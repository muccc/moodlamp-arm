package CodeGenerator;

import java.util.*;
import java.text.*;
import com.ifx.davex.appjetinteract.App2JetInterface;

public class bccudim01_confc_template
{
  protected static String nl;
  public static synchronized bccudim01_confc_template create(String lineSeparator)
  {
    nl = lineSeparator;
    bccudim01_confc_template result = new bccudim01_confc_template();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = NL + "/*CODE_BLOCK_BEGIN[BCCUDIM01_Conf.c]*/" + NL + "/****************************************************************************" + NL + " * @file     BCCUDIM01_Conf.c" + NL + " * @brief    Configuration Source file generated based on UI settings " + NL + " *           of BCCUDIM01 App. It contains all handles available to users" + NL + " *           generated by UI Configuration." + NL + " * @version  V1.0.6" + NL + " * @date     12 Nov 2013" + NL + " *" + NL + " * @note" + NL + " * Copyright (C) 2012-2013 Infineon Technologies AG. All rights reserved." + NL + "" + NL + " *" + NL + " * @par" + NL + " * Infineon Technologies AG (Infineon) is supplying this software for use with" + NL + " * Infineon's microcontrollers." + NL + " *" + NL + " * This file can be freely distributed within development tools that are" + NL + " * supporting such microcontrollers." + NL + " *" + NL + " *" + NL + " * @par" + NL + " * THIS SOFTWARE IS PROVIDED \"AS IS\".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED" + NL + " * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF" + NL + " * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE." + NL + " * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL," + NL + " * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER." + NL + " *" + NL + " ******************************************************************************/" + NL + "/**************************** Change history ***********************************" + NL + " * V1.0.0,\t14-Feb-13\t Initial Version" + NL + " * V1.0.2,\t3-Apr-13\t Initial Target dimming level immediately upon " + NL + " *                       initialization and then update the desired transition " + NL + " *                       time (specified in GUI) is fixed." + NL + " * V1.0.4   4-Oct-13     C++ Support extended and Updated with new Device IDs. " + NL + " * V1.0.6   12-Nov-13    MISRA Checks done, Multiple inclusion of DAVE3.h " + NL + " *                       removed, Extern.h added" + NL + " * *************************** Change history *********************************/" + NL + "#include \"../../inc/BCCUDIM01/BCCUDIM01.h\"" + NL;
  protected final String TEXT_2 = " ";
  protected final String TEXT_3 = NL + "  " + NL + "   " + NL + "const BCCUDIM01_HandleType BCCUDIM01_Handle";
  protected final String TEXT_4 = "  = " + NL + "{" + NL + "        .BCCURegs = BCCU0," + NL + "        .BCCU_DE_Regs = BCCU0_DE";
  protected final String TEXT_5 = "," + NL + "        .DE_Num =";
  protected final String TEXT_6 = "U," + NL + "        .EnableAtStart = ";
  protected final String TEXT_7 = "ENGINE_EN,";
  protected final String TEXT_8 = "ENGINE_DS,";
  protected final String TEXT_9 = NL + "        .DimDiv =";
  protected final String TEXT_10 = "U," + NL + "        .DitherEnable =";
  protected final String TEXT_11 = "DITHER_EN,";
  protected final String TEXT_12 = "DITHER_DS,";
  protected final String TEXT_13 = NL + "        .CurveSel = ";
  protected final String TEXT_14 = "FINE_CURVE,";
  protected final String TEXT_15 = "COARSE_CURVE,";
  protected final String TEXT_16 = NL + "        .InitialLevel = ";
  protected final String TEXT_17 = "U" + NL + "};";
  protected final String TEXT_18 = NL + NL + "const BCCUDIM01_HandleType * BCCUDIM01_HandleArr[BCCUDIM01_NUM_INSTANCES] =" + NL + "{" + NL;
  protected final String TEXT_19 = " ";
  protected final String TEXT_20 = NL + "   &BCCUDIM01_Handle";
  protected final String TEXT_21 = ",";
  protected final String TEXT_22 = " ";
  protected final String TEXT_23 = NL + "};" + NL + "" + NL + "" + NL + " /*CODE_BLOCK_END*/";
  protected final String TEXT_24 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     App2JetInterface app = (App2JetInterface) argument; 
     String AppBaseuri = "app/bccudim01/"; 
     String appInst  = null; 
    stringBuffer.append(TEXT_1);
     ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/bccudim01/"));
for (String appIns : appsList ) {
 appInst = appIns.substring(appIns.lastIndexOf("/")+1);
     String bccudimappuri = null; 
     String dimmingNo = null; 
     bccudimappuri = app.getMappedUri(AppBaseuri + appInst + "/bccudimhw"); 
    stringBuffer.append(TEXT_2);
     dimmingNo = bccudimappuri.substring(bccudimappuri.lastIndexOf("/")+1); 
    stringBuffer.append(TEXT_3);
    stringBuffer.append(appInst);
    stringBuffer.append(TEXT_4);
    stringBuffer.append( dimmingNo);
    stringBuffer.append(TEXT_5);
    stringBuffer.append( dimmingNo);
    stringBuffer.append(TEXT_6);
    if((app.getIntegerValue(AppBaseuri + appInst +"/enable_at_init")) == 1){
    stringBuffer.append(TEXT_7);
    } else{
    stringBuffer.append(TEXT_8);
    }
    stringBuffer.append(TEXT_9);
    stringBuffer.append(app.getIntegerValue (AppBaseuri + appInst + "/bccuch_dtt_dimdiv" ));
    stringBuffer.append(TEXT_10);
    if((app.getIntegerValue(AppBaseuri + appInst +"/bccudim_dten")) == 1){
    stringBuffer.append(TEXT_11);
    } else{
    stringBuffer.append(TEXT_12);
    }
    stringBuffer.append(TEXT_13);
    if((app.getIntegerValue(AppBaseuri + appInst +"/bccudim_dtt_csel")) == 1){
    stringBuffer.append(TEXT_14);
    } else{
    stringBuffer.append(TEXT_15);
    }
    stringBuffer.append(TEXT_16);
    stringBuffer.append(app.getIntegerValue (AppBaseuri + appInst + "/bccuch_dls_tdlev" ));
    stringBuffer.append(TEXT_17);
    }
    stringBuffer.append(TEXT_18);
     int instance = 0; 
     for (String appIns : appsList ) { 
     appInst = appIns.substring(appIns.lastIndexOf("/")+1);
     instance++; 
    stringBuffer.append(TEXT_19);
    }
     String lastAppInstance = null; 
     for (int index = 0;  index < (instance); index++) {  
    stringBuffer.append(TEXT_20);
    stringBuffer.append(index);
     if(index+1 != (instance)) {
    stringBuffer.append(TEXT_21);
    } 
    stringBuffer.append(TEXT_22);
    }
    stringBuffer.append(TEXT_23);
    stringBuffer.append(TEXT_24);
    return stringBuffer.toString();
  }
}
