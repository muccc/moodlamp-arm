package CodeGenerator;

import java.util.*;
import com.ifx.davex.appjetinteract.App2JetInterface;

public class colorlamp01h_template
{
  protected static String nl;
  public static synchronized colorlamp01h_template create(String lineSeparator)
  {
    nl = lineSeparator;
    colorlamp01h_template result = new colorlamp01h_template();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = " ";
  protected final String TEXT_2 = " ";
  protected final String TEXT_3 = NL + "/*CODE_BLOCK_BEGIN[COLORLAMP01.h]*/" + NL + "" + NL + "/******************************************************************************" + NL + " *" + NL + " * Copyright (C) 2013 Infineon Technologies AG. All rights reserved." + NL + " *" + NL + " * Infineon Technologies AG (Infineon) is supplying this software for use with" + NL + " * Infineon's microcontrollers." + NL + " * This file can be freely distributed within development tools that are" + NL + " * supporting such microcontrollers." + NL + " *" + NL + " * THIS SOFTWARE IS PROVIDED \"AS IS\".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED" + NL + " * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF" + NL + " * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE." + NL + " * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL," + NL + " * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER." + NL + " *" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "**                                                                            **" + NL + "** PLATFORM : Infineon XMC4000 Series                                         **" + NL + "**                                                                            **" + NL + "** COMPILER : Compiler Independent                                            **" + NL + "**                                                                            **" + NL + "** AUTHOR   : App Developer                                                   **" + NL + "**                                                                            **" + NL + "** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **" + NL + "**                                                                            **" + NL + "** MODIFICATION DATE : Dec 06, 2013                                           **" + NL + "**                                                                            **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                       Author(s) Identity                                   **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "** Initials     Name                                                          **" + NL + "** ---------------------------------------------------------------------------**" + NL + "** ES          App Developer                                                  **" + NL + "*******************************************************************************/" + NL + "" + NL + "/**" + NL + " * @file COLORLAMP01.h" + NL + " *" + NL + " * @brief  Header file for COLORLAMP01 App" + NL + " */" + NL + "/*" + NL + " * Revision History" + NL + " * 14 Feb  2013 v1.0.0  Initial Version." + NL + " * 03 Apr  2013 v1.0.2  UTP AI00164659: unable to compile the code w Global " + NL + " *                      Dimming configuration is fixed." + NL + " * 26 Sep  2013 v1.0.4  Added support for XMC1202 device." + NL + " * 06 Dec  2013 v1.0.5  Changes related to LIGHTINGSYS01 has taken care." + NL + " */" + NL + "" + NL + "#ifndef _COLORLAMP01_H_" + NL + "#define _COLORLAMP01_H_" + NL + "" + NL + "#ifdef __cplusplus" + NL + "extern \"C\" {" + NL + "#endif" + NL + "" + NL + "/*******************************************************************************" + NL + "**                           Include Files                                    **" + NL + "*******************************************************************************/" + NL;
  protected final String TEXT_4 = NL + "#include \"../../inc/BCCUDIM01/BCCUDIM01.h\" ";
  protected final String TEXT_5 = NL + "#include <DAVE3.h>" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Global Macro Definitions                              **" + NL + "*******************************************************************************/" + NL + "/**" + NL + " * @ingroup COLORLAMP01_apidoc" + NL + " * @{" + NL + " */";
  protected final String TEXT_6 = NL + "/**" + NL + " * @brief This macro defines any one of COLORLAMP01 App instance uses BCCUDIM01" + NL + " * App. This is used in COLORLAMP01_ConfigHandleType data structure and " + NL + " * COLORLAMP01_SetDimLevelExponential API." + NL + " */" + NL + "#define DIMAPP_USEDBY_COLORLAMP01 1U    ";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @}" + NL + " */" + NL + "/*******************************************************************************" + NL + "**                      Global Type Definitions                               **" + NL + "*******************************************************************************/" + NL + "/**" + NL + " * @ingroup COLORLAMP01_publicparam" + NL + " * @{" + NL + " */" + NL + "" + NL + "/**" + NL + " * @brief This data type describes COLORLAMP01 App instance configuration " + NL + " * handle details" + NL + " */" + NL + "typedef struct COLORLAMP01_Config" + NL + "{" + NL + "\t/**" + NL + "\t * Pointer to Red Color Channel handle" + NL + "\t */" + NL + "  const BCCUCH01_HandleType *ChannelRed;" + NL + "\t/**" + NL + "\t * Pointer to Green Color Channel handle" + NL + "\t */" + NL + "  const BCCUCH01_HandleType *ChannelGreen;" + NL + "\t/**" + NL + "\t * Pointer to Blue Color Channel handle" + NL + "\t */" + NL + "  const BCCUCH01_HandleType *ChannelBlue;" + NL + "\t/**" + NL + "\t * Pointer to White Color Channel handle" + NL + "\t */" + NL + "  const BCCUCH01_HandleType *ChannelWhite;" + NL + "\t/**" + NL + "\t * Pointer to Amber Color Channel handle" + NL + "\t */" + NL + "  const BCCUCH01_HandleType *ChannelAmber;" + NL + "\t/**" + NL + "\t * Pointer to Free Color Channel handle" + NL + "\t */" + NL + "  const BCCUCH01_HandleType *ChannelFree;" + NL + "\t/**" + NL + "\t * Channel Mask for Mapped Channels by Solver" + NL + "\t */" + NL + "  const uint32_t ChannelMask;" + NL + "\t/**" + NL + "\t * Pointer to Dimming Engine handle" + NL + "\t */" + NL + "#ifdef DIMAPP_USEDBY_COLORLAMP01" + NL + "  const BCCUDIM01_HandleType   *DimEngine;" + NL + "#endif" + NL + "\t/**" + NL + "\t * Pointer to BCCU Global handle" + NL + "\t */" + NL + "  const BCCUGlobal_HandleType  *BCCUGlobal;" + NL + "" + NL + "}COLORLAMP01_ConfigHandleType;" + NL + "" + NL + "/**" + NL + " * @brief This data type describes COLORLAMP01 App instance Color Intensity " + NL + " * handle details" + NL + " */" + NL + "typedef struct COLORLAMP01_Color" + NL + "{" + NL + "\t/**" + NL + "\t * Target Intensity to Red Color Channel" + NL + "\t */" + NL + "  uint32_t Intensity_Red;" + NL + "\t/**" + NL + "\t * Target Intensity to Green Color Channel" + NL + "\t */" + NL + "  uint32_t Intensity_Green;" + NL + "\t/**" + NL + "\t * Target Intensity to Blue Color Channel" + NL + "\t */" + NL + "  uint32_t Intensity_Blue;" + NL + "\t/**" + NL + "\t * Target Intensity to White Color Channel" + NL + "\t */" + NL + "  uint32_t Intensity_White;" + NL + "\t/**" + NL + "\t * Target Intensity to Amber Color Channel" + NL + "\t */" + NL + "  uint32_t Intensity_Amber;" + NL + "\t/**" + NL + "\t * Target Intensity to Free Color Channel" + NL + "\t */" + NL + "  uint32_t Intensity_Free;" + NL + "\t/**" + NL + "\t * Target Liner Walk Time Prescaler Value to All Mapped Channels" + NL + "\t */" + NL + "  uint32_t LinearWalkPrescaler;" + NL + "" + NL + "} COLORLAMP01_ColorHandleType;" + NL + "/**" + NL + " * @}" + NL + " */" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Global Constant Declarations                          **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Extern Variables                                      **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "** FUNCTION PROTOTYPES                                                        **" + NL + "*******************************************************************************/" + NL + "/**" + NL + " * @ingroup COLORLAMP01_apidoc" + NL + " * @{" + NL + " */" + NL + "/**" + NL + " * @brief" + NL + " *" + NL + " * @return     None" + NL + " *" + NL + " * <b>Reentrant: NO </b><BR>" + NL + " * <b>Sync/Async:  Synchronous</b>" + NL + " * <BR><P ALIGN=\"LEFT\"><B>Example:</B>" + NL + " * <BR><I><b>COLORLAMP01_ConfigHandle0</b></I> is a global structure of type" + NL + " * COLORLAMP01_ConfigHandleType which will be configured in COLORLAMP01_Conf.c file" + NL + " * using UI parameters." + NL + " * @code" + NL + " *  #include <DAVE3.h>" + NL + " *" + NL + " *  int main(void)" + NL + " *  {" + NL + " *\t  // ... Initializes Apps configurations ..." + NL + " *    DAVE_Init(); // COLORLAMP01_Init() will be called inside DAVE_Init()" + NL + " *    while(1)" + NL + " *    {" + NL + " *" + NL + " *    }" + NL + " * }" + NL + " * @endcode<BR> </p>" + NL + " *" + NL + " */" + NL + "void COLORLAMP01_Init(void);" + NL + "" + NL + "/**" + NL + " * @brief Function which enables the mapped channels by solver at run time." + NL + " *" + NL + " *" + NL + " * @param[in]  Handle COLORLAMP01 Config handle" + NL + " *" + NL + " * @return     None" + NL + " *" + NL + " * <b>Reentrant: NO </b><BR>" + NL + " *" + NL + " * <BR><P ALIGN=\"LEFT\"><B>Example:</B>" + NL + " * <BR><I><b>COLORLAMP01_ConfigHandle0</b></I> is a global configuration" + NL + " * structure of type COLORLAMP01_ConfigHandleType which will be configured " + NL + " * based on mapped channel instances by solver" + NL + " * @code" + NL + " *  #include <DAVE3.h>" + NL + " *" + NL + " *  int main(void)" + NL + " *  {" + NL + " *    // ... Initializes Apps configurations ..." + NL + " *    DAVE_Init();" + NL + " *    // ... Enables Mapped Channels by Solver ... " + NL + " *    COLORLAMP01_Enable(&COLORLAMP01_ConfigHandle0);" + NL + " *    // ... infinite loop ..." + NL + " *    while(1)" + NL + " *    {" + NL + " *" + NL + " *    }" + NL + " *  }" + NL + " * @endcode<BR> </p>" + NL + " *" + NL + " */" + NL + "void COLORLAMP01_Enable(const COLORLAMP01_ConfigHandleType *Handle);" + NL + "" + NL + "/**" + NL + " * @brief Function which disables the mapped channels by solver at run time." + NL + " *" + NL + " *" + NL + " * @param[in]  Handle COLORLAMP01 Config handle" + NL + " *" + NL + " * @return     None" + NL + " *" + NL + " * <b>Reentrant: NO </b><BR>" + NL + " *" + NL + " * <BR><P ALIGN=\"LEFT\"><B>Example:</B>" + NL + " * <BR><I><b>COLORLAMP01_ConfigHandle0</b></I> is a global configuration" + NL + " * structure of type COLORLAMP01_ConfigHandleType which will be configured " + NL + " * based on mapped channel instances by solver" + NL + " * @code" + NL + " *  #include <DAVE3.h>" + NL + " *" + NL + " *  int main(void)" + NL + " *  {" + NL + " *    // ... Initializes Apps configurations ..." + NL + " *    DAVE_Init();" + NL + " *    // ... Enables Mapped Channels by Solver ... " + NL + " *    COLORLAMP01_Enable(&COLORLAMP01_ConfigHandle0);" + NL + " *    // ... Add User's Application Code ..." + NL + " *    // ... Disables Mapped Channels by Solver ... " + NL + " *    COLORLAMP01_Disable(&COLORLAMP01_ConfigHandle0);" + NL + " *    // ... infinite loop ..." + NL + " *    while(1)" + NL + " *    {" + NL + " *" + NL + " *    }" + NL + " *  }" + NL + " * @endcode<BR> </p>" + NL + " *" + NL + " */" + NL + "void COLORLAMP01_Disable(const COLORLAMP01_ConfigHandleType *Handle);" + NL + "" + NL + "/**" + NL + " * @brief Function which configures desired color for mapped channels by solver at run time." + NL + " *" + NL + " *" + NL + " * @param[in]  Handle COLORLAMP01 Config handle" + NL + " * @param[in]  HandleColor COLORLAMP01 Color Intensity handle" + NL + " *" + NL + " * @return     None" + NL + " *" + NL + " * <b>Reentrant: NO </b><BR>" + NL + " *" + NL + " * <BR><P ALIGN=\"LEFT\"><B>Example:</B>" + NL + " * <BR><I><b>COLORLAMP01_ConfigHandle0</b></I> is a global configuration" + NL + " * structure of type COLORLAMP01_ConfigHandleType which will be configured " + NL + " * based on mapped channel instances by solver" + NL + " * @code" + NL + " *  #include <DAVE3.h>" + NL + " *" + NL + " *  #define MAX_INTENSITY_DIMLVL 0x07FFUL" + NL + " *  #define MIN_INTENSITY_DIMLVL 0x0UL" + NL + " *" + NL + " *  int main(void)" + NL + " *  {" + NL + " *    COLORLAMP01_ColorHandleType COLORLAMP01_ColorHandle0;" + NL + " *    // ... Initializes Apps configurations ..." + NL + " *    DAVE_Init();" + NL + " *    // ... Desired Color Intensity Configuration ... " + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Red = MAX_INTENSITY_DIMLVL;" + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Green = MIN_INTENSITY_DIMLVL;" + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Blue = MIN_INTENSITY_DIMLVL;" + NL + " *    // ... Enables Mapped Channels by Solver ... " + NL + " *    COLORLAMP01_Enable(&COLORLAMP01_ConfigHandle0);" + NL + " *    // ... Configures the Desired Color for Mapped Channels by Solver" + NL + " *    COLORLAMP01_SetColor(&COLORLAMP01_ConfigHandle0, " + NL + " *                         &COLORLAMP01_ColorHandle0);" + NL + " *    // ... infinite loop ..." + NL + " *    while(1)" + NL + " *    {" + NL + " *" + NL + " *    }" + NL + " *  }" + NL + " * @endcode<BR> </p>" + NL + " *" + NL + " */" + NL + "void COLORLAMP01_SetColor(const COLORLAMP01_ConfigHandleType *Handle, " + NL + "                          COLORLAMP01_ColorHandleType *HandleColor);" + NL + "" + NL + "/**" + NL + " * @brief Function which aborts color change for mapped channels by solver at run time." + NL + " *" + NL + " *" + NL + " * @param[in]  Handle COLORLAMP01 Config handle" + NL + " * @param[in]  HandleColor COLORLAMP01 Color Intensity handle" + NL + " *" + NL + " * @return     None" + NL + " *" + NL + " * <b>Reentrant: NO </b><BR>" + NL + " *" + NL + " * <BR><P ALIGN=\"LEFT\"><B>Example:</B>" + NL + " * <BR><I><b>COLORLAMP01_ConfigHandle0</b></I> is a global configuration" + NL + " * structure of type COLORLAMP01_ConfigHandleType which will be configured " + NL + " * based on mapped channel instances by solver" + NL + " * @code" + NL + " *  #include <DAVE3.h>" + NL + " *" + NL + " *  #define MAX_INTENSITY_DIMLVL 0x07FFUL" + NL + " *  #define MIN_INTENSITY_DIMLVL 0x0UL" + NL + " *" + NL + " *  int main(void)" + NL + " *  {" + NL + " *    COLORLAMP01_ColorHandleType COLORLAMP01_ColorHandle0;" + NL + " *    // ... Initializes Apps configurations ..." + NL + " *    DAVE_Init();" + NL + " *    // ... Desired Color Intensity Configuration ... " + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Red = MAX_INTENSITY_DIMLVL;" + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Green = MIN_INTENSITY_DIMLVL;" + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Blue = MIN_INTENSITY_DIMLVL;" + NL + " *    // ... Configures Linear Walk Time Prescalaer ... " + NL + " *    COLORLAMP01_ColorHandle0.LinearWalkPrescaler = 0x3FFUL;" + NL + " *    // ... Enables Mapped Channels by Solver ... " + NL + " *    COLORLAMP01_Enable(&COLORLAMP01_ConfigHandle0);" + NL + " *    // ... Configures the Desired Color for Mapped Channels by Solver" + NL + " *    COLORLAMP01_SetColor(&COLORLAMP01_ConfigHandle0, &COLORLAMP01_ColorHandle0);" + NL + " *    // ... Aborts the Color change for all Mapped Channels" + NL + " *    COLORLAMP01_AbortColorChange(&COLORLAMP01_ConfigHandle0, &COLORLAMP01_ColorHandle0);" + NL + " *    // ... infinite loop ..." + NL + " *    while(1)" + NL + " *    {" + NL + " *" + NL + " *    }" + NL + " *  }" + NL + " * @endcode<BR> </p>" + NL + " *" + NL + " */" + NL + "void COLORLAMP01_AbortColorChange(const COLORLAMP01_ConfigHandleType *Handle," + NL + "                          COLORLAMP01_ColorHandleType *HandleColor);" + NL + "" + NL + "/**" + NL + " * @brief Function which configures target dimming level, dimming clock divider" + NL + " * and dimming engine clock (dclk) prescaler values for mapped dimming engine " + NL + " * at run time." + NL + " *" + NL + " *" + NL + " * @param[in]  Handle COLORLAMP01 Config Handle" + NL + " * @param[in]  DimLevel Target Dimming Level" + NL + " * @param[in]  DimDiv Target Dimming Clock Divider Value" + NL + " * @param[in]  DimPs Target Dimming Engine Clock (dclk) Prescaler Value" + NL + " *" + NL + " * @return     None" + NL + " *" + NL + " * <b>Reentrant: NO </b><BR>" + NL + " *" + NL + " * <BR><P ALIGN=\"LEFT\"><B>Example:</B>" + NL + " * <BR><I><b>COLORLAMP01_ConfigHandle0</b></I> is a global configuration" + NL + " * structure of type COLORLAMP01_ConfigHandleType which will be configured " + NL + " * based on mapped channel instances by solver" + NL + " * @code" + NL + " *  #include <DAVE3.h>" + NL + " *" + NL + " *  #define MAX_INTENSITY_DIMLVL 0x07FFUL" + NL + " *  #define MIN_INTENSITY_DIMLVL 0x0UL" + NL + " *  //Fade Time: 7sec - 100, 14sec - 200, 21Sec - 300 @ 290.909KHz DClk" + NL + " *  #define DIM_DIVIDER 100" + NL + " *  #define DIM_PS 219UL //290.909KHz @ 64MHz" + NL + " *" + NL + " *  int main(void)" + NL + " *  {" + NL + " *    COLORLAMP01_ColorHandleType COLORLAMP01_ColorHandle0;" + NL + " *    // ... Initializes Apps configurations ..." + NL + " *    DAVE_Init();" + NL + " *    // ... Desired Color Intensity Configuration ... " + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Red = MAX_INTENSITY_DIMLVL;" + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Green = MIN_INTENSITY_DIMLVL;" + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Blue = MIN_INTENSITY_DIMLVL;" + NL + " *    // ... Configures Linear Walk Time Prescalaer ... " + NL + " *    COLORLAMP01_ColorHandle0.LinearWalkPrescaler = 0x3FFUL;" + NL + " *    // ... Enables Mapped Channels by Solver ... " + NL + " *    COLORLAMP01_Enable(&COLORLAMP01_ConfigHandle0);" + NL + " *    // ... Configures the Desired Color for Mapped Channels by Solver" + NL + " *    COLORLAMP01_SetColor(&COLORLAMP01_ConfigHandle0, &COLORLAMP01_ColorHandle0);" + NL + " *    // ... infinite loop ..." + NL + " *    while(1)" + NL + " *    {" + NL + " *      // ... Configures Dimming Level, Dimming Clock Divider and Dimming Engine" + NL + " *      //     Clock (dclk) Prescaler. ...." + NL + " *      COLORLAMP01_SetDimLevelExponential(&COLORLAMP01_ConfigHandle0, MIN_INTENSITY_DIMLVL, DIM_DIVIDER, DIM_PS);" + NL + " *      // ... Wait for Dimming Update Completion" + NL + " *      BCCUDIM01_AwaitFadeCompletion(&BCCUDIM01_Handle0);" + NL + " *" + NL + " *      COLORLAMP01_SetDimLevelExponential(&COLORLAMP01_ConfigHandle0, MAX_INTENSITY_DIMLVL, DIM_DIVIDER, DIM_PS);" + NL + " *      // ... Wait for Dimming Update Completion" + NL + " *      BCCUDIM01_AwaitFadeCompletion(&BCCUDIM01_Handle0);" + NL + " *" + NL + " *    }" + NL + " *  }" + NL + " * @endcode<BR> </p>" + NL + " *" + NL + " */" + NL + "#ifdef DIMAPP_USEDBY_COLORLAMP01" + NL + "void COLORLAMP01_SetDimLevelExponential(const COLORLAMP01_ConfigHandleType " + NL + "                                        *Handle," + NL + "                                        uint32_t DimLevel," + NL + "                                        uint32_t DimDiv," + NL + "                                        uint32_t DimPs);" + NL + "#endif" + NL + "                    " + NL + "/**" + NL + " * @brief Function which controls dimming of the lamp by manually (i.e., Software Controlled dimming) at run time." + NL + " *" + NL + " *" + NL + " * @param[in]  Handle COLORLAMP01 Config Handle" + NL + " * @param[in]  DimLevel Target Dimming Level" + NL + " *" + NL + " * @return     None" + NL + " *" + NL + " * <b>Reentrant: NO </b><BR>" + NL + " *" + NL + " * <BR><P ALIGN=\"LEFT\"><B>Example:</B>" + NL + " * <BR><I><b>COLORLAMP01_ConfigHandle0</b></I> is a global configuration" + NL + " * structure of type COLORLAMP01_ConfigHandleType which will be configured " + NL + " * based on mapped channel instances by solver" + NL + " * @code" + NL + " *  #include <DAVE3.h>" + NL + " *" + NL + " *  #define MAX_INTENSITY_DIMLVL 0x07FFUL" + NL + " *  #define MIN_INTENSITY_DIMLVL 0x0UL" + NL + " *" + NL;
  protected final String TEXT_8 = " *  int main(void)" + NL + " *  {" + NL + " *    uint32_t DimLevel = 0;" + NL + " *    COLORLAMP01_ColorHandleType COLORLAMP01_ColorHandle0;" + NL + " *    // ... Initializes Apps configurations ..." + NL + " *    DAVE_Init();" + NL + " *    // ... Desired Color Intensity Configuration ... " + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Red = MAX_INTENSITY_DIMLVL;" + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Green = MIN_INTENSITY_DIMLVL;" + NL + " *    COLORLAMP01_ColorHandle0.Intensity_Blue = MIN_INTENSITY_DIMLVL;" + NL + " *    // ... Configures Linear Walk Time Prescalaer ... " + NL + " *    COLORLAMP01_ColorHandle0.LinearWalkPrescaler = 0x3FFUL;" + NL + " *    // ... Enables Mapped Channels by Solver ... " + NL + " *    COLORLAMP01_Enable(&COLORLAMP01_ConfigHandle0);" + NL + " *    // ... Configures the Desired Color for Mapped Channels by Solver" + NL + " *    COLORLAMP01_SetColor(&COLORLAMP01_ConfigHandle0, &COLORLAMP01_ColorHandle0);" + NL + " *    // ... infinite loop ..." + NL + " *    while(1)" + NL + " *    {" + NL + " *      // ... Configures Dimming Level ......" + NL + " *      COLORLAMP01_SetDimLevelManual(&COLORLAMP01_ConfigHandle0, DimLevel);" + NL + " *      //Delay(1); //User Specific Teime Delay in msec" + NL + " * \t    DimLevel = (DimLevel < MAX_INTENSITY_DIMLVL)?(DimLevel+1):0;" + NL + " *" + NL + " *    }" + NL + " *  }" + NL + " * @endcode<BR> </p>" + NL + " *" + NL + " */" + NL + "void COLORLAMP01_SetDimLevelManual(const COLORLAMP01_ConfigHandleType *Handle," + NL + "                                                            uint32_t DimLevel);" + NL + "" + NL + "/**" + NL + " *@}" + NL + " */" + NL + "" + NL + "/* Include App config file */" + NL + "#include \"COLORLAMP01_Conf.h\"" + NL + "" + NL + "#ifdef __cplusplus" + NL + "}" + NL + "#endif" + NL + "" + NL + "#endif /* _COLORLAMP01_H_ */" + NL + "" + NL + "" + NL + "/*CODE_BLOCK_END*/ " + NL;
  protected final String TEXT_9 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     App2JetInterface app = (App2JetInterface) argument; 
     String AppBaseuri = "app/colorlamp01/"; 
     String appInst  = null; 
     int BCCUDIM01Flag = 0; 
    stringBuffer.append(TEXT_1);
     ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/colorlamp01/"));
for (String appIns : appsList ) {
 appInst = appIns.substring(appIns.lastIndexOf("/")+1);
    stringBuffer.append(TEXT_2);
     if ((app.getIntegerValue(AppBaseuri + appInst +"/colorlamp01_dimseldummy") == 1) && (BCCUDIM01Flag==0)) { 
     BCCUDIM01Flag = 1; 
     } 
    }
    stringBuffer.append(TEXT_3);
     if(BCCUDIM01Flag == 1) { 
    stringBuffer.append(TEXT_4);
     } 
    stringBuffer.append(TEXT_5);
     if(BCCUDIM01Flag == 1) { 
    stringBuffer.append(TEXT_6);
     } 
    stringBuffer.append(TEXT_7);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
    return stringBuffer.toString();
  }
}
