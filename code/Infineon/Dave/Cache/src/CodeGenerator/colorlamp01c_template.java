package CodeGenerator;

import java.util.*;
import com.ifx.davex.appjetinteract.App2JetInterface;

public class colorlamp01c_template
{
  protected static String nl;
  public static synchronized colorlamp01c_template create(String lineSeparator)
  {
    nl = lineSeparator;
    colorlamp01c_template result = new colorlamp01c_template();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = NL + "/*CODE_BLOCK_BEGIN[COLORLAMP01.c]*/" + NL + "/*******************************************************************************" + NL + " Copyright (c) 2013, Infineon Technologies AG                                 **" + NL + " All rights reserved.                                                         **" + NL + "                                                                              **" + NL + " Redistribution and use in source and binary forms, with or without           **" + NL + " modification,are permitted provided that the following conditions are met:   **" + NL + "                                                                              **" + NL + " *Redistributions of source code must retain the above copyright notice,      **" + NL + " this list of conditions and the following disclaimer.                        **" + NL + " *Redistributions in binary form must reproduce the above copyright notice,   **" + NL + " this list of conditions and the following disclaimer in the documentation    **" + NL + " and/or other materials provided with the distribution.                       **" + NL + " *Neither the name of the copyright holders nor the names of its contributors **" + NL + " may be used to endorse or promote products derived from this software without** " + NL + " specific prior written permission.                                           **" + NL + "                                                                              **" + NL + " THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"  **" + NL + " AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **" + NL + " IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **" + NL + " ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **" + NL + " LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **" + NL + " CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **" + NL + " SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **" + NL + " INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **" + NL + " CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **" + NL + " ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **" + NL + " POSSIBILITY OF SUCH DAMAGE.                                                  **" + NL + "                                                                              **" + NL + " To improve the quality of the software, users are encouraged to share        **" + NL + " modifications, enhancements or bug fixes with Infineon Technologies AG       **" + NL + " dave@infineon.com).                                                          **" + NL + "                                                                              **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "**                                                                            **" + NL + "** PLATFORM : Infineon XMC1000 Series   \t\t\t                          **" + NL + "**                                                                            **" + NL + "** COMPILER : Compiler Independent                                            **" + NL + "**                                                                            **" + NL + "** AUTHOR   : App Developer                                                   **" + NL + "**                                                                            **" + NL + "** MAY BE CHANGED BY USER [yes/no]: Yes                                       **" + NL + "**                                                                            **" + NL + "** MODIFICATION DATE : Dec 06, 2013                                           **" + NL + "**                                                                            **" + NL + "*******************************************************************************/" + NL + "/*******************************************************************************" + NL + "**                      Author(s) Identity                                    **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "** Initials     Name                                                          **" + NL + "** ---------------------------------------------------------------------------**" + NL + "** ES          App Developer                                                  **" + NL + "**                                                                            **" + NL + "*******************************************************************************/" + NL + "/**" + NL + " * @file   COLORLAMP01.c" + NL + " *" + NL + " * @brief  This file contains implementations of all Public and Private functions " + NL + " *        of COLORLAMP01 App." + NL + " */" + NL + "/*" + NL + " * Revision History" + NL + " * 14 Feb  2013 v1.0.0  Initial Version." + NL + " * 03 Apr  2013 v1.0.2  UTP AI00164659: unable to compile the code w Global " + NL + " *                      Dimming configuration is fixed." + NL + " * 26 Sep  2013 v1.0.4  Added support for XMC1202 device." + NL + " * 06 Dec  2013 v1.0.5  Changes related to LIGHTINGSYS01 has taken care." + NL + " */" + NL + "/*******************************************************************************" + NL + " ** INCLUDE FILES                                                             **" + NL + " ******************************************************************************/" + NL + "" + NL + "/** Inclusion of header file */" + NL + "#include <DAVE3.h>" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Private Macro Definitions                             **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Private Type Definitions                              **" + NL + "*******************************************************************************/" + NL + "" + NL + "" + NL + "/*******************************************************************************" + NL + "**                 Private Function Declarations                              **" + NL + "*******************************************************************************/" + NL + "" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Global Constant Definitions                           **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Global Variable Definitions                           **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Private Constant Definitions                          **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                 Function like macro definitions                            **" + NL + "*******************************************************************************/" + NL + "/*******************************************************************************" + NL + "**                      Private Function Definitions                          **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Public Function Definitions                           **" + NL + "*******************************************************************************/" + NL + "//This function is called by DAVESupport App" + NL + "void COLORLAMP01_Init(void)" + NL + "{" + NL + "\t" + NL + "}" + NL + "" + NL + "/* Enable the Color lamp */" + NL + "void COLORLAMP01_Enable(const COLORLAMP01_ConfigHandleType *Handle)" + NL + "{" + NL + "  BCCUCH01_Enable(Handle->BCCUGlobal, Handle->ChannelMask);" + NL + "}" + NL + "" + NL + "/* Disable the Color lamp */" + NL + "void COLORLAMP01_Disable(const COLORLAMP01_ConfigHandleType *Handle)" + NL + "{\t" + NL + "  BCCUCH01_Disable(Handle->BCCUGlobal, Handle->ChannelMask);" + NL + "}" + NL + "" + NL + "/* Set the target Color */" + NL + "void COLORLAMP01_SetColor(const COLORLAMP01_ConfigHandleType *Handle," + NL + "                          COLORLAMP01_ColorHandleType *HandleColor)" + NL + "{" + NL + "" + NL + "  if(Handle->ChannelRed != NULL) {" + NL + "" + NL + "    BCCUCH01_SetIntensity((Handle->ChannelRed), (HandleColor->Intensity_Red));" + NL + "" + NL + "    BCCUCH01_SetLinearWalkPrescaler((Handle->ChannelRed), " + NL + "                               (HandleColor->LinearWalkPrescaler));" + NL + "  }" + NL + "" + NL + "  if(Handle->ChannelGreen != NULL) {" + NL + "" + NL + "    BCCUCH01_SetIntensity((Handle->ChannelGreen), " + NL + "                          (HandleColor->Intensity_Green));" + NL + "" + NL + "    BCCUCH01_SetLinearWalkPrescaler((Handle->ChannelGreen), " + NL + "                               (HandleColor->LinearWalkPrescaler));" + NL + "  }" + NL + "" + NL + "  if(Handle->ChannelBlue != NULL) {" + NL + "" + NL + "    BCCUCH01_SetIntensity((Handle->ChannelBlue), (HandleColor->Intensity_Blue));" + NL + "" + NL + "    BCCUCH01_SetLinearWalkPrescaler((Handle->ChannelBlue), " + NL + "                               (HandleColor->LinearWalkPrescaler));" + NL + "  }" + NL + "" + NL + "  if(Handle->ChannelWhite != NULL) {" + NL + "" + NL + "    BCCUCH01_SetIntensity((Handle->ChannelWhite), " + NL + "                          (HandleColor->Intensity_White));" + NL + "" + NL + "    BCCUCH01_SetLinearWalkPrescaler((Handle->ChannelWhite), " + NL + "                               (HandleColor->LinearWalkPrescaler));" + NL + "  }" + NL + "" + NL + "  if(Handle->ChannelAmber != NULL) {" + NL + "" + NL + "    BCCUCH01_SetIntensity((Handle->ChannelAmber), " + NL + "                          (HandleColor->Intensity_Amber));" + NL + "" + NL + "    BCCUCH01_SetLinearWalkPrescaler((Handle->ChannelAmber), " + NL + "                               (HandleColor->LinearWalkPrescaler));" + NL + "  }" + NL + "" + NL + "  if(Handle->ChannelFree != NULL) {" + NL + "" + NL + "    BCCUCH01_SetIntensity((Handle->ChannelFree), " + NL + "                           (HandleColor->Intensity_Free));" + NL + "" + NL + "    BCCUCH01_SetLinearWalkPrescaler((Handle->ChannelFree), " + NL + "                               (HandleColor->LinearWalkPrescaler));" + NL + "  }" + NL + "    " + NL + "  BCCUCH01_StartLinearWalk(Handle->BCCUGlobal, Handle->ChannelMask);" + NL + "" + NL + "}" + NL + "" + NL + "void COLORLAMP01_AbortColorChange(const COLORLAMP01_ConfigHandleType *Handle," + NL + "                          COLORLAMP01_ColorHandleType *HandleColor)" + NL + "{" + NL + "  BCCUCH01_AbortLinearWalk(Handle->BCCUGlobal, Handle->ChannelMask);" + NL + "}" + NL + "" + NL + "" + NL + "/* Dim level setting with exponential property using Dimming Engine */" + NL + "void COLORLAMP01_SetDimLevelExponential(const COLORLAMP01_ConfigHandleType" + NL + "                                        *Handle, uint32_t DimLevel," + NL + "                                        uint32_t DimDiv," + NL + "                                        uint32_t DimPs" + NL + "\t\t\t\t\t\t\t\t\t\t)" + NL + "{  " + NL + "#ifdef DIMAPP_USEDBY_COLORLAMP01" + NL + "  if(Handle->DimEngine != NULL) {" + NL + "    /* Write DimPs into Reg */" + NL + "    BCCUGLOBAL_SetDimClkPS(Handle->BCCUGlobal, DimPs);" + NL + "" + NL + "    BCCUDIM01_SetDimDiv(Handle->DimEngine, DimDiv);" + NL + "" + NL + "    /* Configure DimLevel in Reg */" + NL + "    BCCUDIM01_SetDimLvl(Handle->DimEngine, DimLevel);" + NL + "    /* Start Dimming */" + NL + "    BCCUDIM01_StartDimming(Handle->DimEngine," + NL + "           GET_CHANNEL_DIM_MASK(Handle->DimEngine->DE_Num));" + NL + "  }" + NL + "#endif" + NL + "}" + NL + "" + NL + "" + NL + "/* Manual Dimming Level Setting */ " + NL + "void COLORLAMP01_SetDimLevelManual(const COLORLAMP01_ConfigHandleType *Handle," + NL + "                                   uint32_t DimLevel)" + NL + "{" + NL + "  BCCUGLOBAL_SetDimLevel(Handle->BCCUGlobal, DimLevel);" + NL + "}" + NL + "" + NL + "/*CODE_BLOCK_END*/ " + NL;
  protected final String TEXT_2 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     App2JetInterface app = (App2JetInterface) argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(TEXT_2);
    return stringBuffer.toString();
  }
}
