<%@ jet package="CodeGenerator" class="i2c003_confc_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>


/*CODE_BLOCK_BEGIN[I2C003_Conf.h]*/
/*******************************************************************************
 *
 * Copyright (C) 2014 Infineon Technologies AG. All rights reserved.
 *
 * Infineon Technologies AG (Infineon) is supplying this software for use with 
 * Infineon's microcontrollers.  
 * This file can be freely distributed within development tools that are 
 * supporting such microcontrollers. 
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, 
 * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
********************************************************************************
**                                                                            **
** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** NOTE     : Any Changes made to this file will be overwritten during Code   **
**            Generation                                                      **
**                                                                            **
********************************************************************************
** VERSION HISTORY:
********************************************************************************
** v1.0.4, 17 Feb 2014,  Initial version 
*******************************************************************************/
<% String AppBaseuri = "app/i2c003/";%>
/**
 * @file   I2C003_Conf.c
 *
 * @App Version I2C003 <<%=app.getAppVersion(AppBaseuri) %>>
 *
 * @brief  Configuration file generated based on UI settings 
 *         of I2C003 App
 *
 */
/*
 * Revision History
 *
 */

/******************************************************************************
 ** INCLUDE FILES                                                            **
 *****************************************************************************/
#include "../../inc/I2C003/I2C003.h"

<% String MappedUri = null; %>
<% String UnitInst = null; %>
<% String ChannelInst = null; %>
<% String appInst  = null; %>

<% int I2C_Configured= 0; %>
<% int NodeNr = 0; %>
<% int loopcount = 0; %>
<% int loopcount1 = 0; %>
<% int loopcount2 = 0; %>
<% double clockfreq = 0; %>

<% int Is44Device = -1; %>
<% int Is42Device = -1; %>
<% int Is45Device = -1; %>
<% int Is1xDevice = -1; %>
<% String deviceId = null; %>
<% deviceId = app.getSoftwareId(); %>
<% if (deviceId != null)
{      
   Is44Device = ((deviceId.substring(0,2).compareTo("44")==0)?1:0);
   Is42Device = ((deviceId.substring(0,2).compareTo("42")==0)?1:0);
   Is45Device = ((deviceId.substring(0,2).compareTo("45")==0)?1:0);
   Is1xDevice = ((deviceId.substring(0,1).compareTo("1")==0)?1:0); 	
}%>

<% if(Is1xDevice == 1){
  clockfreq = app.getDoubleValue (AppBaseuri + 0 + "/clockapp_XMC1000/clk002_irMCLK");
}else if ((Is45Device==1)||(Is44Device==1)||(Is42Device==1)){
  clockfreq = app.getDoubleValue (AppBaseuri + 0 + "/clockapp_XMC4000/clk001_iroActualFreqPB");
}
else{}
%>
<% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/i2c003/"));
 for (String appIns : appsList ) {
 appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
<% MappedUri = app.getMappedUri(AppBaseuri + appInst + "/channel"); %>
<% if((MappedUri != null) && (MappedUri != "")) { %>
<% UnitInst = MappedUri.substring(MappedUri .length()-11,MappedUri.indexOf("/channel/")); %>
<% ChannelInst = MappedUri.substring(MappedUri.length()-1); %>
<% NodeNr++; %>
<% I2C_Configured = 1; %>
const I2C003_HandleType I2C003_Handle<%=appInst%> = 
{
   .I2CRegs = USIC<%=UnitInst%>_CH<%=ChannelInst%>, /*!< Register Base address */
   <% String pinUri = app.getMappedUri(AppBaseuri + appInst +"/i2c_scl"); %>
   <% if ((pinUri != null) && (pinUri.trim() != "")) { %>
   <% String portNo = pinUri.substring(pinUri.indexOf("port/p/")+7,pinUri.indexOf("/pad/")); %>
   <% String pinNo = pinUri.substring(pinUri.indexOf("/pad/")+5,pinUri.length()); %>   
   <% int Pin = Integer.parseInt(pinNo);%>
   .PinHandle.SCL_PortBase = (I2C003_PORTS_TypeDef *) PORT<%=portNo%>_BASE,
   .PinHandle.SCL_Pin = (uint8_t) <%= Pin %>,
   <%} else { %>
   /* SCL PIN instance (no.<%= appInst %>) is not mapped to any port pin. */
   <%} %> 
   <% String pinUri2 = app.getMappedUri(AppBaseuri + appInst +"/i2c_sda"); %>
   <% if ((pinUri2 != null) && (pinUri2.trim() != "")) { %>
   <% String portNo2 = pinUri2.substring(pinUri.indexOf("port/p/")+7,pinUri2.indexOf("/pad/")); %>
   <% String pinNo2 = pinUri2.substring(pinUri.indexOf("/pad/")+5,pinUri2.length());%> 
   <% int Pin2 = Integer.parseInt(pinNo2);%>
   .PinHandle.SDA_PortBase = (I2C003_PORTS_TypeDef *) PORT<%=portNo2%>_BASE,
   .PinHandle.SDA_Pin = (uint8_t) <%= Pin2 %>,
   <%} else { %>
   /* SDA Pin instance (no.<%= appInst %>) is not mapped to any port pin. */
   <%} %>   
   <% int AddrMode = app.getIntegerValue(AppBaseuri + appInst +"/I2C003_erwAddressMode/0");
	  int TempSlaveAddr = 0;
	  if(AddrMode == 1){
	  TempSlaveAddr = app.getIntegerValue(AppBaseuri + appInst +"/I2C003_irwSlaveAddress")<<9;
	  } else {   
	  TempSlaveAddr  = 30720 | app.getIntegerValue(AppBaseuri + appInst +"/I2C003_irwSlaveAddress");
   } %>
   .SlaveAddress = (uint16_t) <%= TempSlaveAddr %>,/*!< I2C Slave Address */
   .BitRate = (uint32_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/I2C003_irwbitrate") %>,/*!< Bit Rate */
   .TxFifoEn = (bool) <%= app.getIntegerValue(AppBaseuri + appInst +"/I2C003_erwEnbleTxFIFO/0") %>, /*!<Additional Transmit FIFO buffer capability enable*/
   .RxFifoEn = (bool) <%= app.getIntegerValue(AppBaseuri + appInst +"/I2C003_erwEnbleRxFIFO/0") %>, /*!<Additional Receive FIFO buffer capability enable */
   .TxLimit = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/tbctr/limit") %>,/*!< FIFO Trigger Level */
   .RxLimit = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/rbctr/limit") %>,/*!< FIFO Trigger Level */
   .TxFifoSize = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/tbctr_size") %>,/*!< Tx FIFO Size */
   .RxFifoSize = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/rbctr_size") %>,/*!< Rx FIFO Size */
   .StartCondRecvIntEn = (bool) <%= app.getIntegerValue(AppBaseuri + appInst +"/I2C003_erwStartCondRecvInt/0") %>, /*!< Protocol specific interrupt enable */
   .RepStartCondRecvIntEn = (bool) <%= app.getIntegerValue(AppBaseuri + appInst +"/I2C003_erwRepStartCondRecvInt/0") %>, /*!< Protocol specific interrupt enable */
   .SlaveReadReqIntEn = (bool) <%= app.getIntegerValue(AppBaseuri + appInst +"/I2C003_erwSlaveReadReqInt/0") %>, /*!< Protocol specific interrupt enable */
   .StopCondRecvIntEn = (bool) <%= app.getIntegerValue(AppBaseuri + appInst +"/I2C003_erwStopCondRecvInt/0") %>, /*!< Protocol specific interrupt enable */
   .ErrorIntEn = (bool) <%= app.getIntegerValue(AppBaseuri + appInst +"/I2C003_erwErrorInt/0") %>, /*!< Protocol specific interrupt enable */ 
 <% double ratio = 0;
	double TempBitrate = 0;
	double TempPdiv = 0;
	double TempStep = 0;
	long PDivValue = 0;
	int PDivValue1 = 0;
	long StepValue = 0;
	double tempbitrate1 = app.getIntegerValue(AppBaseuri + appInst +"/I2C003_irwbitrate");
	TempBitrate = (tempbitrate1 * 1000);
	if(TempBitrate <= 100000)
	{
	ratio = ((((clockfreq * 1000000)/(10*1024)) * 500)/TempBitrate);
	} else {
	ratio = ((((clockfreq * 1000000)/(25*1024)) * 500)/TempBitrate);
	}
	 /* Calculating optimum PDIV value */
	if( ratio <= 1)
	{
	 TempPdiv = 0;
	}else{
	 TempPdiv =  ratio - 1;
	 if( TempPdiv > 1023)
	 {
		 TempPdiv = 1023;
	 }
	}
	PDivValue = Math.round(TempPdiv);
	 /* Calculating STEP value */
	if(TempBitrate <= 100000)
	{
	 TempStep = Math.floor((((((TempBitrate * 10 * 512)/ 1000000) * 2 ) * (1+ ((double)PDivValue)))/(clockfreq)));
	} else {
	 TempStep = (((((TempBitrate * 25 * 512)/ 1000000) * 2 ) * (1+ ((double)PDivValue)))/(clockfreq));
	}
	if(TempStep > 1023)
	{
	 TempStep = 1023;
	}
	StepValue = Math.round(TempStep);
	PDivValue1 = (int)PDivValue;%>	
   .Fdr_StepValue = (uint16_t) 0x<%=Integer.toHexString((int)StepValue)%>,/*!< Calculated Step value for configured 
                                              baud rate*/
   .Brg_PDivValue = (uint16_t) 0x<%=Integer.toHexString(PDivValue1)%>/*!< Calculated optimum PDIV value */ 

};
<% } %>
<% else { %>
/* CHANNEL IS NOT MAPPED */
<% } %>
<% } %>
<% if(I2C_Configured == 1) { %>
const I2C003_HandleType *I2C003_HandleArray[I2C003_NUM_HANDLES] = 
{
   <% for (String appIns : appsList ) {
	appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
   <% MappedUri = app.getMappedUri(AppBaseuri + appInst + "/channel"); %>
   <% if((MappedUri != null) && (MappedUri != "")) { %>  		
   &I2C003_Handle<%=appInst%>
   <% loopcount++; %><% if(loopcount != NodeNr) { %>,<% } %>
   <% } %> 
   <%} %>
};

<% } %>
<% else { %>
/* CHANNEL IS NOT MAPPED */
<% } %>

/*CODE_BLOCK_END*/ 
