   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CLK002.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CLK002_Init,"ax",%progbits
  18              		.align	1
  19              		.global	CLK002_Init
  20              		.code	16
  21              		.thumb_func
  23              	CLK002_Init:
  24              	.LFB38:
  25              		.file 1 "../Dave/Generated/src/CLK002/CLK002.c"
   1:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
   2:../Dave/Generated/src/CLK002/CLK002.c **** **  DAVE App Name : CLK002       App Version: 1.0.8               
   3:../Dave/Generated/src/CLK002/CLK002.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/CLK002/CLK002.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
   6:../Dave/Generated/src/CLK002/CLK002.c **** 
   7:../Dave/Generated/src/CLK002/CLK002.c **** /*CODE_BLOCK_BEGIN[CLK002.c]*/
   8:../Dave/Generated/src/CLK002/CLK002.c **** 
   9:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
  10:../Dave/Generated/src/CLK002/CLK002.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
  11:../Dave/Generated/src/CLK002/CLK002.c ****  All rights reserved.                                                         **
  12:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  13:../Dave/Generated/src/CLK002/CLK002.c ****  Redistribution and use in source and binary forms, with or without           **
  14:../Dave/Generated/src/CLK002/CLK002.c ****  modification,are permitted provided that the following conditions are met:   **
  15:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  16:../Dave/Generated/src/CLK002/CLK002.c ****  *Redistributions of source code must retain the above copyright notice,      **
  17:../Dave/Generated/src/CLK002/CLK002.c ****  this list of conditions and the following disclaimer.                        **
  18:../Dave/Generated/src/CLK002/CLK002.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  19:../Dave/Generated/src/CLK002/CLK002.c ****  this list of conditions and the following disclaimer in the documentation    **
  20:../Dave/Generated/src/CLK002/CLK002.c ****  and/or other materials provided with the distribution.                       **
  21:../Dave/Generated/src/CLK002/CLK002.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  22:../Dave/Generated/src/CLK002/CLK002.c ****  may be used to endorse or promote products derived from this software without** 
  23:../Dave/Generated/src/CLK002/CLK002.c ****  specific prior written permission.                                           **
  24:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  25:../Dave/Generated/src/CLK002/CLK002.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  26:../Dave/Generated/src/CLK002/CLK002.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  27:../Dave/Generated/src/CLK002/CLK002.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  28:../Dave/Generated/src/CLK002/CLK002.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  29:../Dave/Generated/src/CLK002/CLK002.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  30:../Dave/Generated/src/CLK002/CLK002.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  31:../Dave/Generated/src/CLK002/CLK002.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  32:../Dave/Generated/src/CLK002/CLK002.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  33:../Dave/Generated/src/CLK002/CLK002.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  34:../Dave/Generated/src/CLK002/CLK002.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  35:../Dave/Generated/src/CLK002/CLK002.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  36:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  37:../Dave/Generated/src/CLK002/CLK002.c ****  To improve the quality of the software, users are encouraged to share        **
  38:../Dave/Generated/src/CLK002/CLK002.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  39:../Dave/Generated/src/CLK002/CLK002.c ****  dave@infineon.com).                                                          **
  40:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  41:../Dave/Generated/src/CLK002/CLK002.c **** ********************************************************************************
  42:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  43:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  44:../Dave/Generated/src/CLK002/CLK002.c **** ** PLATFORM : Infineon XMC1xxx Series                                         **
  45:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  46:../Dave/Generated/src/CLK002/CLK002.c **** ** COMPILER : Compiler Independent                                            **
  47:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  48:../Dave/Generated/src/CLK002/CLK002.c **** ** AUTHOR   : App Developer                                                   **
  49:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  50:../Dave/Generated/src/CLK002/CLK002.c **** ** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **
  51:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  52:../Dave/Generated/src/CLK002/CLK002.c **** ** MODIFICATION DATE : Oct 30, 2013                                           **
  53:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  54:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
  55:../Dave/Generated/src/CLK002/CLK002.c **** /* Revision History
  56:../Dave/Generated/src/CLK002/CLK002.c ****  *****************************************************************************
  57:../Dave/Generated/src/CLK002/CLK002.c ****  *
  58:../Dave/Generated/src/CLK002/CLK002.c **** */
  59:../Dave/Generated/src/CLK002/CLK002.c **** /**
  60:../Dave/Generated/src/CLK002/CLK002.c ****  * @file   CLK002.c
  61:../Dave/Generated/src/CLK002/CLK002.c ****  *
  62:../Dave/Generated/src/CLK002/CLK002.c ****  * @brief  SCU_Clock_CLK002 App
  63:../Dave/Generated/src/CLK002/CLK002.c ****  *         
  64:../Dave/Generated/src/CLK002/CLK002.c ****  *  CLK002 App is a singleton app which is used by all applications to configure 
  65:../Dave/Generated/src/CLK002/CLK002.c ****  *  the PLL as well as enable the Clock of Peripheral Units.
  66:../Dave/Generated/src/CLK002/CLK002.c ****  
  67:../Dave/Generated/src/CLK002/CLK002.c ****  * Revision History
  68:../Dave/Generated/src/CLK002/CLK002.c ****  * 18 Jan 2013   v1.0.0  Initial Version
  69:../Dave/Generated/src/CLK002/CLK002.c ****  * 04 Sep 2013   v1.0.4  Added support for XMC1201, XMC1202, XMC1301 devices
  70:../Dave/Generated/src/CLK002/CLK002.c ****  * 30 Oct 2013   v1.0.6  SystemCoreClockUpdate API called at end of CLK002_Init API
  71:../Dave/Generated/src/CLK002/CLK002.c ****  */
  72:../Dave/Generated/src/CLK002/CLK002.c **** 
  73:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
  74:../Dave/Generated/src/CLK002/CLK002.c **** **                      Author(s) Identity                                    **
  75:../Dave/Generated/src/CLK002/CLK002.c **** ********************************************************************************
  76:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  77:../Dave/Generated/src/CLK002/CLK002.c **** ** Initials     Name                                                          **
  78:../Dave/Generated/src/CLK002/CLK002.c **** ** ---------------------------------------------------------------------------**
  79:../Dave/Generated/src/CLK002/CLK002.c **** ** Yogesh       App Developer                                                 **
  80:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
  81:../Dave/Generated/src/CLK002/CLK002.c **** 
  82:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
  83:../Dave/Generated/src/CLK002/CLK002.c ****  ** INCLUDE FILES                                                             **
  84:../Dave/Generated/src/CLK002/CLK002.c ****  ******************************************************************************/
  85:../Dave/Generated/src/CLK002/CLK002.c **** /** Inclusion of header file */
  86:../Dave/Generated/src/CLK002/CLK002.c **** #include <DAVE3.h>
  87:../Dave/Generated/src/CLK002/CLK002.c **** 
  88:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
  89:../Dave/Generated/src/CLK002/CLK002.c **** **  0                    Private Macro Definitions                             **
  90:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
  91:../Dave/Generated/src/CLK002/CLK002.c **** /* Master Clock setup parameters */  
  92:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_CLKCR_PCLKSEL           (1U)
  93:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_CLKCR_IDIV              (1U)      
  94:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_CLKCR_FDIV              (0U)    
  95:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_DIRECT_ACCESS_ALLOW     (0xC0U)
  96:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_DIRECT_ACCESS_DISALLOW  (0xC3U)
  97:../Dave/Generated/src/CLK002/CLK002.c **** 
  98:../Dave/Generated/src/CLK002/CLK002.c **** 
  99:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 100:../Dave/Generated/src/CLK002/CLK002.c **** **                      Private Type Definitions                              **
 101:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 102:../Dave/Generated/src/CLK002/CLK002.c **** 
 103:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 104:../Dave/Generated/src/CLK002/CLK002.c **** **                 Private Function Declarations:
 105:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 106:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lFrequencyUpScaling(void);
 107:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lFrequencyDownScaling(void);
 108:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lDivUpdate(void);
 109:../Dave/Generated/src/CLK002/CLK002.c **** 
 110:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 111:../Dave/Generated/src/CLK002/CLK002.c **** **                      Extern Declarations                                   **
 112:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 113:../Dave/Generated/src/CLK002/CLK002.c **** extern void SystemCoreClockUpdate(void);
 114:../Dave/Generated/src/CLK002/CLK002.c **** 
 115:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 116:../Dave/Generated/src/CLK002/CLK002.c **** **                      Public Function Definitions                           **
 117:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 118:../Dave/Generated/src/CLK002/CLK002.c **** /**
 119:../Dave/Generated/src/CLK002/CLK002.c ****   * @brief  Function to initialise the Clock Tree based on UI configuration.
 120:../Dave/Generated/src/CLK002/CLK002.c ****   * @note   -
 121:../Dave/Generated/src/CLK002/CLK002.c ****   * @param  None
 122:../Dave/Generated/src/CLK002/CLK002.c ****   * @retval None
 123:../Dave/Generated/src/CLK002/CLK002.c ****   */
 124:../Dave/Generated/src/CLK002/CLK002.c **** void CLK002_Init(void)
 125:../Dave/Generated/src/CLK002/CLK002.c **** {
  26              		.loc 1 125 0
  27              		.cfi_startproc
  28 0000 70B5     		push	{r4, r5, r6, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 16
  31              		.cfi_offset 4, -16
  32              		.cfi_offset 5, -12
  33              		.cfi_offset 6, -8
  34              		.cfi_offset 14, -4
 126:../Dave/Generated/src/CLK002/CLK002.c ****     /* Open the lock that protects privileged bits. */
 127:../Dave/Generated/src/CLK002/CLK002.c ****     SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
  35              		.loc 1 127 0
  36 0002 314C     		ldr	r4, .L24
  37 0004 C023     		mov	r3, #192
  38 0006 6362     		str	r3, [r4, #36]
  39              	.L2:
 128:../Dave/Generated/src/CLK002/CLK002.c **** 
 129:../Dave/Generated/src/CLK002/CLK002.c ****     /* Loop until protection is removed. */
 130:../Dave/Generated/src/CLK002/CLK002.c ****     while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
  40              		.loc 1 130 0 discriminator 1
  41 0008 606A     		ldr	r0, [r4, #36]
  42 000a 4007     		lsl	r0, r0, #29
  43 000c FCD4     		bmi	.L2
 131:../Dave/Generated/src/CLK002/CLK002.c ****     {
 132:../Dave/Generated/src/CLK002/CLK002.c **** 	    ;
 133:../Dave/Generated/src/CLK002/CLK002.c ****     }
 134:../Dave/Generated/src/CLK002/CLK002.c **** 
 135:../Dave/Generated/src/CLK002/CLK002.c ****     /* Update PCLK selection mux. */
 136:../Dave/Generated/src/CLK002/CLK002.c ****     SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
  44              		.loc 1 136 0
  45 000e 2F4B     		ldr	r3, .L24+4
  46 0010 8022     		mov	r2, #128
  47 0012 1968     		ldr	r1, [r3]
  48 0014 5502     		lsl	r5, r2, #9
  49 0016 0D43     		orr	r5, r1
  50 0018 1D60     		str	r5, [r3]
  51              	.LVL0:
  52              	.LBB8:
  53              	.LBB9:
 137:../Dave/Generated/src/CLK002/CLK002.c **** 	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);
 138:../Dave/Generated/src/CLK002/CLK002.c **** 
 139:../Dave/Generated/src/CLK002/CLK002.c ****     CLK002_lDivUpdate();
 140:../Dave/Generated/src/CLK002/CLK002.c **** 
 141:../Dave/Generated/src/CLK002/CLK002.c ****     /*Close the lock opened above. */
 142:../Dave/Generated/src/CLK002/CLK002.c ****     SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
 143:../Dave/Generated/src/CLK002/CLK002.c **** 
 144:../Dave/Generated/src/CLK002/CLK002.c ****     /* Update the clock variable */
 145:../Dave/Generated/src/CLK002/CLK002.c ****     SystemCoreClockUpdate();
 146:../Dave/Generated/src/CLK002/CLK002.c **** }
 147:../Dave/Generated/src/CLK002/CLK002.c **** 
 148:../Dave/Generated/src/CLK002/CLK002.c **** /**
 149:../Dave/Generated/src/CLK002/CLK002.c **** * @brief  This routine is called by CMSIS startup to find out if clock tree
 150:../Dave/Generated/src/CLK002/CLK002.c **** *         setup should be done by it.This routine is WEAKLY defined in CStart.
 151:../Dave/Generated/src/CLK002/CLK002.c **** *         In the absence of clock app, the weak definition takes precedence
 152:../Dave/Generated/src/CLK002/CLK002.c **** *         which always permits clock tree setup by CStart. When clock app is
 153:../Dave/Generated/src/CLK002/CLK002.c **** *         defined, this function overrides the CStart definition. Clock tree
 154:../Dave/Generated/src/CLK002/CLK002.c **** *         setup is launched and upon completion, control is ceded back to
 155:../Dave/Generated/src/CLK002/CLK002.c **** *         CStart.CStart abstains from setting up clock tree and instead
 156:../Dave/Generated/src/CLK002/CLK002.c **** *         proceeds with program  loading. Return 0 to disallow CStart from
 157:../Dave/Generated/src/CLK002/CLK002.c **** *         performing clock tree setup.
 158:../Dave/Generated/src/CLK002/CLK002.c **** */
 159:../Dave/Generated/src/CLK002/CLK002.c **** 
 160:../Dave/Generated/src/CLK002/CLK002.c **** uint32_t AllowClkInitByStartup(void)
 161:../Dave/Generated/src/CLK002/CLK002.c **** {
 162:../Dave/Generated/src/CLK002/CLK002.c ****     /* Return FALSE - Do not allow any initialisation by startup code. */
 163:../Dave/Generated/src/CLK002/CLK002.c ****     return ((uint32_t)0);
 164:../Dave/Generated/src/CLK002/CLK002.c **** }
 165:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 166:../Dave/Generated/src/CLK002/CLK002.c **** **                 Private Function definition:
 167:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 168:../Dave/Generated/src/CLK002/CLK002.c **** 
 169:../Dave/Generated/src/CLK002/CLK002.c **** /**
 170:../Dave/Generated/src/CLK002/CLK002.c ****   * @brief  Function to update idiv in steps of quard.
 171:../Dave/Generated/src/CLK002/CLK002.c ****   * @note   -
 172:../Dave/Generated/src/CLK002/CLK002.c ****   * @param  None
 173:../Dave/Generated/src/CLK002/CLK002.c ****   * @retval None
 174:../Dave/Generated/src/CLK002/CLK002.c ****   */
 175:../Dave/Generated/src/CLK002/CLK002.c **** static void CLK002_lDivUpdate(void)
 176:../Dave/Generated/src/CLK002/CLK002.c **** {
 177:../Dave/Generated/src/CLK002/CLK002.c ****  /*  Find out current and target value of idiv */
 178:../Dave/Generated/src/CLK002/CLK002.c ****  uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
 179:../Dave/Generated/src/CLK002/CLK002.c ****  uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
 180:../Dave/Generated/src/CLK002/CLK002.c ****  uint32_t lCLKCR;
 181:../Dave/Generated/src/CLK002/CLK002.c ****  lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
  54              		.loc 1 181 0
  55 001a 1E68     		ldr	r6, [r3]
 182:../Dave/Generated/src/CLK002/CLK002.c ****  lTargetidiv = CLK002_CLKCR_IDIV;
 183:../Dave/Generated/src/CLK002/CLK002.c **** 
 184:../Dave/Generated/src/CLK002/CLK002.c ****  /* Update FDIV here, unconditionally. */
 185:../Dave/Generated/src/CLK002/CLK002.c **** 
 186:../Dave/Generated/src/CLK002/CLK002.c ****   lCLKCR = SCU_CLK->CLKCR;
  56              		.loc 1 186 0
  57 001c 1A68     		ldr	r2, [r3]
 187:../Dave/Generated/src/CLK002/CLK002.c ****   WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
  58              		.loc 1 187 0
  59 001e FF21     		mov	r1, #255
  60 0020 8A43     		bic	r2, r1
 188:../Dave/Generated/src/CLK002/CLK002.c ****   SCU_CLK->CLKCR = lCLKCR;
  61              		.loc 1 188 0
  62 0022 1A60     		str	r2, [r3]
 189:../Dave/Generated/src/CLK002/CLK002.c **** 
 190:../Dave/Generated/src/CLK002/CLK002.c ****      /* Delay, till frequency stable, appox. 15us. */
 191:../Dave/Generated/src/CLK002/CLK002.c **** 
 192:../Dave/Generated/src/CLK002/CLK002.c **** 
 193:../Dave/Generated/src/CLK002/CLK002.c ****   WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
  63              		.loc 1 193 0
  64 0024 1D68     		ldr	r5, [r3]
  65 0026 2A4A     		ldr	r2, .L24+8
 181:../Dave/Generated/src/CLK002/CLK002.c ****  lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
  66              		.loc 1 181 0
  67 0028 3004     		lsl	r0, r6, #16
  68              		.loc 1 193 0
  69 002a 1543     		orr	r5, r2
 181:../Dave/Generated/src/CLK002/CLK002.c ****  lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
  70              		.loc 1 181 0
  71 002c 060E     		lsr	r6, r0, #24
  72              	.LVL1:
  73              		.loc 1 193 0
  74 002e 1D60     		str	r5, [r3]
  75              	.L3:
 194:../Dave/Generated/src/CLK002/CLK002.c ****   while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
  76              		.loc 1 194 0
  77 0030 1868     		ldr	r0, [r3]
  78 0032 264D     		ldr	r5, .L24+4
  79 0034 4000     		lsl	r0, r0, #1
  80 0036 FBD4     		bmi	.L3
 195:../Dave/Generated/src/CLK002/CLK002.c ****   {
 196:../Dave/Generated/src/CLK002/CLK002.c ****     ;
 197:../Dave/Generated/src/CLK002/CLK002.c ****   }
 198:../Dave/Generated/src/CLK002/CLK002.c **** 
 199:../Dave/Generated/src/CLK002/CLK002.c **** 
 200:../Dave/Generated/src/CLK002/CLK002.c ****     /* Find out current value of direction in which idiv has to update. */
 201:../Dave/Generated/src/CLK002/CLK002.c ****  if (lCurrIdiv==lTargetidiv)
  81              		.loc 1 201 0
  82 0038 012E     		cmp	r6, #1
  83 003a 04D1     		bne	.L4
  84              	.LVL2:
  85              	.L10:
  86              	.LBE9:
  87              	.LBE8:
 142:../Dave/Generated/src/CLK002/CLK002.c ****     SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
  88              		.loc 1 142 0
  89 003c C323     		mov	r3, #195
  90 003e 6362     		str	r3, [r4, #36]
 145:../Dave/Generated/src/CLK002/CLK002.c ****     SystemCoreClockUpdate();
  91              		.loc 1 145 0
  92 0040 FFF7FEFF 		bl	SystemCoreClockUpdate
  93              	.LVL3:
 146:../Dave/Generated/src/CLK002/CLK002.c **** }
  94              		.loc 1 146 0
  95              		@ sp needed for prologue
  96 0044 70BD     		pop	{r4, r5, r6, pc}
  97              	.LVL4:
  98              	.L4:
  99 0046 FF21     		mov	r1, #255
 100 0048 0802     		lsl	r0, r1, #8
 101              	.LBB17:
 102              	.LBB16:
 103              	.LBB10:
 104              	.LBB11:
 202:../Dave/Generated/src/CLK002/CLK002.c ****   {
 203:../Dave/Generated/src/CLK002/CLK002.c ****    /*No change in IDIV. */
 204:../Dave/Generated/src/CLK002/CLK002.c ****   }
 205:../Dave/Generated/src/CLK002/CLK002.c ****  else if(lCurrIdiv < lTargetidiv)
 206:../Dave/Generated/src/CLK002/CLK002.c ****   {
 207:../Dave/Generated/src/CLK002/CLK002.c ****     CLK002_lFrequencyDownScaling();
 208:../Dave/Generated/src/CLK002/CLK002.c ****   }
 209:../Dave/Generated/src/CLK002/CLK002.c ****   else
 210:../Dave/Generated/src/CLK002/CLK002.c ****    {
 211:../Dave/Generated/src/CLK002/CLK002.c ****      CLK002_lFrequencyUpScaling();
 212:../Dave/Generated/src/CLK002/CLK002.c ****    }
 213:../Dave/Generated/src/CLK002/CLK002.c **** 
 214:../Dave/Generated/src/CLK002/CLK002.c **** }
 215:../Dave/Generated/src/CLK002/CLK002.c **** 
 216:../Dave/Generated/src/CLK002/CLK002.c **** /**
 217:../Dave/Generated/src/CLK002/CLK002.c ****   * @brief  Function to provide frequency up scaling.
 218:../Dave/Generated/src/CLK002/CLK002.c ****   * @note   -
 219:../Dave/Generated/src/CLK002/CLK002.c ****   * @param  None
 220:../Dave/Generated/src/CLK002/CLK002.c ****   * @retval None
 221:../Dave/Generated/src/CLK002/CLK002.c ****   */
 222:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lFrequencyUpScaling()
 223:../Dave/Generated/src/CLK002/CLK002.c **** {
 224:../Dave/Generated/src/CLK002/CLK002.c ****   uint32_t CurrIdiv;
 225:../Dave/Generated/src/CLK002/CLK002.c ****   uint32_t TargetIdiv;
 226:../Dave/Generated/src/CLK002/CLK002.c ****   uint32_t lCLKCR;
 227:../Dave/Generated/src/CLK002/CLK002.c ****   CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
 228:../Dave/Generated/src/CLK002/CLK002.c ****   TargetIdiv = CLK002_CLKCR_IDIV;
 229:../Dave/Generated/src/CLK002/CLK002.c ****   while(1)
 230:../Dave/Generated/src/CLK002/CLK002.c ****   {
 231:../Dave/Generated/src/CLK002/CLK002.c ****     if(CurrIdiv > (TargetIdiv * 4UL))
 232:../Dave/Generated/src/CLK002/CLK002.c ****     {
 233:../Dave/Generated/src/CLK002/CLK002.c ****         CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
 234:../Dave/Generated/src/CLK002/CLK002.c ****         CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
 235:../Dave/Generated/src/CLK002/CLK002.c ****         /* Program interim value of IDIV. */
 236:../Dave/Generated/src/CLK002/CLK002.c **** 
 237:../Dave/Generated/src/CLK002/CLK002.c ****         lCLKCR = SCU_CLK->CLKCR;
 238:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
 239:../Dave/Generated/src/CLK002/CLK002.c ****         SCU_CLK->CLKCR = lCLKCR;
 240:../Dave/Generated/src/CLK002/CLK002.c **** 
 241:../Dave/Generated/src/CLK002/CLK002.c ****         /* Wait till frequency stable. */
 242:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
 243:../Dave/Generated/src/CLK002/CLK002.c ****         while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 244:../Dave/Generated/src/CLK002/CLK002.c ****         {
 245:../Dave/Generated/src/CLK002/CLK002.c ****             ;
 246:../Dave/Generated/src/CLK002/CLK002.c ****         }
 247:../Dave/Generated/src/CLK002/CLK002.c ****     }
 248:../Dave/Generated/src/CLK002/CLK002.c ****     else
 249:../Dave/Generated/src/CLK002/CLK002.c ****     {
 250:../Dave/Generated/src/CLK002/CLK002.c ****         /* Program TargetIDiv into IDIV bitfield of CLKCR. */
 251:../Dave/Generated/src/CLK002/CLK002.c ****         lCLKCR = SCU_CLK->CLKCR;
 252:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
 253:../Dave/Generated/src/CLK002/CLK002.c ****         SCU_CLK->CLKCR = lCLKCR;
 254:../Dave/Generated/src/CLK002/CLK002.c ****         /* Wait till frequency stable. */
 255:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
 256:../Dave/Generated/src/CLK002/CLK002.c ****         while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 257:../Dave/Generated/src/CLK002/CLK002.c ****         {
 258:../Dave/Generated/src/CLK002/CLK002.c ****             ;
 259:../Dave/Generated/src/CLK002/CLK002.c ****         }
 260:../Dave/Generated/src/CLK002/CLK002.c ****         break;
 261:../Dave/Generated/src/CLK002/CLK002.c ****     }
 262:../Dave/Generated/src/CLK002/CLK002.c **** 
 263:../Dave/Generated/src/CLK002/CLK002.c ****   }
 264:../Dave/Generated/src/CLK002/CLK002.c **** 
 265:../Dave/Generated/src/CLK002/CLK002.c **** }
 266:../Dave/Generated/src/CLK002/CLK002.c **** 
 267:../Dave/Generated/src/CLK002/CLK002.c **** /**
 268:../Dave/Generated/src/CLK002/CLK002.c ****   * @brief  Function to provide frequency up scaling.
 269:../Dave/Generated/src/CLK002/CLK002.c ****   * @note   -
 270:../Dave/Generated/src/CLK002/CLK002.c ****   * @param  None
 271:../Dave/Generated/src/CLK002/CLK002.c ****   * @retval None
 272:../Dave/Generated/src/CLK002/CLK002.c ****   */
 273:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lFrequencyDownScaling()
 274:../Dave/Generated/src/CLK002/CLK002.c **** {
 275:../Dave/Generated/src/CLK002/CLK002.c ****     uint32_t CurrIdiv;
 276:../Dave/Generated/src/CLK002/CLK002.c ****     uint32_t TargetIdiv;
 277:../Dave/Generated/src/CLK002/CLK002.c ****     uint32_t lCLKCR;
 278:../Dave/Generated/src/CLK002/CLK002.c ****     CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
 105              		.loc 1 278 0
 106 004a 2D68     		ldr	r5, [r5]
 107 004c 2149     		ldr	r1, .L24+12
 108              	.LBE11:
 109              	.LBE10:
 205:../Dave/Generated/src/CLK002/CLK002.c ****  else if(lCurrIdiv < lTargetidiv)
 110              		.loc 1 205 0
 111 004e 002E     		cmp	r6, #0
 112 0050 18D1     		bne	.L5
 113              	.LVL5:
 114              	.LBB13:
 115              	.LBB12:
 279:../Dave/Generated/src/CLK002/CLK002.c ****     TargetIdiv = CLK002_CLKCR_IDIV;
 280:../Dave/Generated/src/CLK002/CLK002.c ****     while(1)
 281:../Dave/Generated/src/CLK002/CLK002.c ****     {
 282:../Dave/Generated/src/CLK002/CLK002.c ****         if((CurrIdiv * 4UL) < TargetIdiv )
 116              		.loc 1 282 0
 117 0052 0542     		tst	r5, r0
 118 0054 09D1     		bne	.L6
 119              	.LVL6:
 120              	.L22:
 283:../Dave/Generated/src/CLK002/CLK002.c ****         {
 284:../Dave/Generated/src/CLK002/CLK002.c ****             CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
 285:../Dave/Generated/src/CLK002/CLK002.c ****             /* Program interim value of IDIV */
 286:../Dave/Generated/src/CLK002/CLK002.c ****             lCLKCR = SCU_CLK->CLKCR;
 121              		.loc 1 286 0
 122 0056 1C68     		ldr	r4, [r3]
 123              	.LVL7:
 287:../Dave/Generated/src/CLK002/CLK002.c ****             WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
 124              		.loc 1 287 0
 125 0058 0C40     		and	r4, r1
 126              	.LVL8:
 288:../Dave/Generated/src/CLK002/CLK002.c ****             SCU_CLK->CLKCR = lCLKCR;
 127              		.loc 1 288 0
 128 005a 1C60     		str	r4, [r3]
 289:../Dave/Generated/src/CLK002/CLK002.c ****             /* Wait till frequency stable. */
 290:../Dave/Generated/src/CLK002/CLK002.c ****             WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYC
 129              		.loc 1 290 0
 130 005c 1868     		ldr	r0, [r3]
 131 005e 1043     		orr	r0, r2
 132 0060 1860     		str	r0, [r3]
 133              	.LVL9:
 134              	.L7:
 291:../Dave/Generated/src/CLK002/CLK002.c ****             while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 135              		.loc 1 291 0
 136 0062 1D68     		ldr	r5, [r3]
 137 0064 6C00     		lsl	r4, r5, #1
 138 0066 FCD4     		bmi	.L7
 139 0068 F5E7     		b	.L22
 140              	.LVL10:
 141              	.L6:
 292:../Dave/Generated/src/CLK002/CLK002.c ****             {
 293:../Dave/Generated/src/CLK002/CLK002.c ****                 ;
 294:../Dave/Generated/src/CLK002/CLK002.c ****             }
 295:../Dave/Generated/src/CLK002/CLK002.c ****         }
 296:../Dave/Generated/src/CLK002/CLK002.c ****         else
 297:../Dave/Generated/src/CLK002/CLK002.c ****         {
 298:../Dave/Generated/src/CLK002/CLK002.c ****             /* Program TargetIDiv into IDIV bitfield of CLKCR */
 299:../Dave/Generated/src/CLK002/CLK002.c ****             lCLKCR = SCU_CLK->CLKCR;
 142              		.loc 1 299 0
 143 006a 1868     		ldr	r0, [r3]
 144              	.LVL11:
 300:../Dave/Generated/src/CLK002/CLK002.c ****             WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
 145              		.loc 1 300 0
 146 006c 8025     		mov	r5, #128
 147              	.LVL12:
 148 006e 0140     		and	r1, r0
 149 0070 6E00     		lsl	r6, r5, #1
 150              	.LVL13:
 151 0072 3143     		orr	r1, r6
 152              	.LVL14:
 301:../Dave/Generated/src/CLK002/CLK002.c ****             SCU_CLK->CLKCR = lCLKCR;
 153              		.loc 1 301 0
 154 0074 1960     		str	r1, [r3]
 302:../Dave/Generated/src/CLK002/CLK002.c ****             /* Wait till frequency stable. */
 303:../Dave/Generated/src/CLK002/CLK002.c ****            
 304:../Dave/Generated/src/CLK002/CLK002.c ****             WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYC
 155              		.loc 1 304 0
 156 0076 1968     		ldr	r1, [r3]
 157              	.LVL15:
 158 0078 0A43     		orr	r2, r1
 159 007a 1A60     		str	r2, [r3]
 160              	.L9:
 305:../Dave/Generated/src/CLK002/CLK002.c ****             while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 161              		.loc 1 305 0
 162 007c 1A68     		ldr	r2, [r3]
 163 007e 5600     		lsl	r6, r2, #1
 164 0080 FCD4     		bmi	.L9
 165 0082 DBE7     		b	.L10
 166              	.LVL16:
 167              	.L5:
 168              	.LBE12:
 169              	.LBE13:
 170              	.LBB14:
 171              	.LBB15:
 227:../Dave/Generated/src/CLK002/CLK002.c ****   CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
 172              		.loc 1 227 0
 173 0084 2840     		and	r0, r5
 174 0086 000A     		lsr	r0, r0, #8
 175              	.LVL17:
 176              	.L13:
 231:../Dave/Generated/src/CLK002/CLK002.c ****     if(CurrIdiv > (TargetIdiv * 4UL))
 177              		.loc 1 231 0
 178 0088 0428     		cmp	r0, #4
 179 008a 10D9     		bls	.L11
 233:../Dave/Generated/src/CLK002/CLK002.c ****         CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
 180              		.loc 1 233 0
 181 008c 0326     		mov	r6, #3
 182 008e B043     		bic	r0, r6
 183              	.LVL18:
 184 0090 0430     		add	r0, r0, #4
 185              	.LVL19:
 237:../Dave/Generated/src/CLK002/CLK002.c ****         lCLKCR = SCU_CLK->CLKCR;
 186              		.loc 1 237 0
 187 0092 1D68     		ldr	r5, [r3]
 234:../Dave/Generated/src/CLK002/CLK002.c ****         CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
 188              		.loc 1 234 0
 189 0094 8008     		lsr	r0, r0, #2
 190              	.LVL20:
 238:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
 191              		.loc 1 238 0
 192 0096 0606     		lsl	r6, r0, #24
 193 0098 0D40     		and	r5, r1
 194              	.LVL21:
 195 009a 360C     		lsr	r6, r6, #16
 196 009c 3543     		orr	r5, r6
 197              	.LVL22:
 239:../Dave/Generated/src/CLK002/CLK002.c ****         SCU_CLK->CLKCR = lCLKCR;
 198              		.loc 1 239 0
 199 009e 1D60     		str	r5, [r3]
 242:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
 200              		.loc 1 242 0
 201 00a0 1D68     		ldr	r5, [r3]
 202              	.LVL23:
 203 00a2 1543     		orr	r5, r2
 204 00a4 1D60     		str	r5, [r3]
 205              	.L12:
 243:../Dave/Generated/src/CLK002/CLK002.c ****         while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 206              		.loc 1 243 0
 207 00a6 1E68     		ldr	r6, [r3]
 208 00a8 7600     		lsl	r6, r6, #1
 209 00aa FCD4     		bmi	.L12
 210 00ac ECE7     		b	.L13
 211              	.LVL24:
 212              	.L11:
 251:../Dave/Generated/src/CLK002/CLK002.c ****         lCLKCR = SCU_CLK->CLKCR;
 213              		.loc 1 251 0
 214 00ae 1E68     		ldr	r6, [r3]
 215              	.LVL25:
 252:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
 216              		.loc 1 252 0
 217 00b0 8020     		mov	r0, #128
 218              	.LVL26:
 219 00b2 3140     		and	r1, r6
 220 00b4 4500     		lsl	r5, r0, #1
 221 00b6 2943     		orr	r1, r5
 222              	.LVL27:
 253:../Dave/Generated/src/CLK002/CLK002.c ****         SCU_CLK->CLKCR = lCLKCR;
 223              		.loc 1 253 0
 224 00b8 1960     		str	r1, [r3]
 255:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
 225              		.loc 1 255 0
 226 00ba 1968     		ldr	r1, [r3]
 227              	.LVL28:
 228 00bc 0A43     		orr	r2, r1
 229 00be 1A60     		str	r2, [r3]
 230              	.L14:
 256:../Dave/Generated/src/CLK002/CLK002.c ****         while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 231              		.loc 1 256 0
 232 00c0 1A68     		ldr	r2, [r3]
 233 00c2 5000     		lsl	r0, r2, #1
 234 00c4 FCD4     		bmi	.L14
 235 00c6 B9E7     		b	.L10
 236              	.L25:
 237              		.align	2
 238              	.L24:
 239 00c8 00000140 		.word	1073807360
 240 00cc 00030140 		.word	1073808128
 241 00d0 0000F03F 		.word	1072693248
 242 00d4 FF00FFFF 		.word	-65281
 243              	.LBE15:
 244              	.LBE14:
 245              	.LBE16:
 246              	.LBE17:
 247              		.cfi_endproc
 248              	.LFE38:
 250              		.section	.text.AllowClkInitByStartup,"ax",%progbits
 251              		.align	1
 252              		.global	AllowClkInitByStartup
 253              		.code	16
 254              		.thumb_func
 256              	AllowClkInitByStartup:
 257              	.LFB39:
 161:../Dave/Generated/src/CLK002/CLK002.c **** {
 258              		.loc 1 161 0
 259              		.cfi_startproc
 164:../Dave/Generated/src/CLK002/CLK002.c **** }
 260              		.loc 1 164 0
 261 0000 0020     		mov	r0, #0
 262              		@ sp needed for prologue
 263 0002 7047     		bx	lr
 264              		.cfi_endproc
 265              	.LFE39:
 267              		.text
 268              	.Letext0:
 269              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1200_series/Include/XMC1200.h"
 270              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
DEFINED SYMBOLS
                            *ABS*:00000000 CLK002.c
C:\Users\tomasoat\AppData\Local\Temp\ccu8wz2r.s:18     .text.CLK002_Init:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccu8wz2r.s:23     .text.CLK002_Init:00000000 CLK002_Init
C:\Users\tomasoat\AppData\Local\Temp\ccu8wz2r.s:239    .text.CLK002_Init:000000c8 $d
C:\Users\tomasoat\AppData\Local\Temp\ccu8wz2r.s:251    .text.AllowClkInitByStartup:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccu8wz2r.s:256    .text.AllowClkInitByStartup:00000000 AllowClkInitByStartup
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e09b9dd5224853206c418479f14d6963
                           .group:00000000 wm4.XMC1200.h.45.4c899b4822ac22c0f00d6fd7f173cc96
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1200.h.122.96b58b1204def4c9f76341a4e21abaf6
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.uc_id.h.35.62dcba5f6261c1436e3866a751c1a98b
                           .group:00000000 wm4.BCCUDIM01_Conf.h.46.1e3ffd6581cbd401bcc28a6ce60f19f0
                           .group:00000000 wm4.BCCUCH01_Conf.h.48.2ce679450068d1645a9e0c3a7937e697
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP003_Conf.h.49.a3ea83c25b3af429e78acb0f2dc45bd4
                           .group:00000000 wm4.PWMSP003.h.103.903071678b9af5683776405c5b299fbb
                           .group:00000000 wm4.IO002_Conf.h.51.9fc2eb43e77e0a2c02912a3744f3ec9d
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.NVIC002_Conf.h.62.64042456dc7f2eb96fc713abacb4c5d4
                           .group:00000000 wm4.DMX512RD01_Conf.h.49.036b57ce74a404ea8f8ade310b364436
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.Usic.h.40.f6a4fed014760114cf5039d398d6dd2c
                           .group:00000000 wm4.I2C003_Conf.h.50.5fb7c255d386301836868ba2fd78b91f
                           .group:00000000 wm4.FLASH003.h.76.20bf3d34b222314a45adfdfb414ab1b6
                           .group:00000000 wm4.FLASH003_Conf.h.72.6d366060eda228c6c8843c467361c30c

UNDEFINED SYMBOLS
SystemCoreClockUpdate
