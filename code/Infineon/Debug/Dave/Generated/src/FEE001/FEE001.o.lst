   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"FEE001.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Fee_lGetUsrBlockIndex,"ax",%progbits
  18              		.align	1
  19              		.code	16
  20              		.thumb_func
  22              	Fee_lGetUsrBlockIndex:
  23              	.LFB61:
  24              		.file 1 "../Dave/Generated/src/FEE001/FEE001.c"
   1:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
   2:../Dave/Generated/src/FEE001/FEE001.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
   3:../Dave/Generated/src/FEE001/FEE001.c ****  All rights reserved.                                                         **
   4:../Dave/Generated/src/FEE001/FEE001.c ****                                                                               **
   5:../Dave/Generated/src/FEE001/FEE001.c ****  Redistribution and use in source and binary forms, with or without           **
   6:../Dave/Generated/src/FEE001/FEE001.c ****  modification,are permitted provided that the following conditions are met:   **
   7:../Dave/Generated/src/FEE001/FEE001.c ****                                                                               **
   8:../Dave/Generated/src/FEE001/FEE001.c ****  *Redistributions of source code must retain the above copyright notice,      **
   9:../Dave/Generated/src/FEE001/FEE001.c ****  this list of conditions and the following disclaimer.                        **
  10:../Dave/Generated/src/FEE001/FEE001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  11:../Dave/Generated/src/FEE001/FEE001.c ****  this list of conditions and the following disclaimer in the documentation    **
  12:../Dave/Generated/src/FEE001/FEE001.c ****  and/or other materials provided with the distribution.                       **
  13:../Dave/Generated/src/FEE001/FEE001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  14:../Dave/Generated/src/FEE001/FEE001.c ****  may be used to endorse or promote products derived from this software without**
  15:../Dave/Generated/src/FEE001/FEE001.c ****  specific prior written permission.                                           **
  16:../Dave/Generated/src/FEE001/FEE001.c ****                                                                               **
  17:../Dave/Generated/src/FEE001/FEE001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  18:../Dave/Generated/src/FEE001/FEE001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  19:../Dave/Generated/src/FEE001/FEE001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  20:../Dave/Generated/src/FEE001/FEE001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  21:../Dave/Generated/src/FEE001/FEE001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  22:../Dave/Generated/src/FEE001/FEE001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  23:../Dave/Generated/src/FEE001/FEE001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  24:../Dave/Generated/src/FEE001/FEE001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  25:../Dave/Generated/src/FEE001/FEE001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  26:../Dave/Generated/src/FEE001/FEE001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  27:../Dave/Generated/src/FEE001/FEE001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  28:../Dave/Generated/src/FEE001/FEE001.c ****                                                                               **
  29:../Dave/Generated/src/FEE001/FEE001.c ****  To improve the quality of the software, users are encouraged to share        **
  30:../Dave/Generated/src/FEE001/FEE001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  31:../Dave/Generated/src/FEE001/FEE001.c ****  dave@infineon.com).                                                          **
  32:../Dave/Generated/src/FEE001/FEE001.c ****                                                                               **
  33:../Dave/Generated/src/FEE001/FEE001.c **** ********************************************************************************
  34:../Dave/Generated/src/FEE001/FEE001.c **** 
  35:../Dave/Generated/src/FEE001/FEE001.c **** ********************************************************************************
  36:../Dave/Generated/src/FEE001/FEE001.c **** ** Filename : FEE001.c                                                        **
  37:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
  38:../Dave/Generated/src/FEE001/FEE001.c **** ** PLATFORM : Infineon XMC1000 Series                                         **
  39:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
  40:../Dave/Generated/src/FEE001/FEE001.c **** ** COMPILER : Compiler Independent                                            **
  41:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
  42:../Dave/Generated/src/FEE001/FEE001.c **** ** AUTHOR   : App Developer                                                   **
  43:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
  44:../Dave/Generated/src/FEE001/FEE001.c **** ** MAY BE CHANGED BY USER [Yes/No]: No                                        **
  45:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
  46:../Dave/Generated/src/FEE001/FEE001.c **** ** MODIFICATION DATE : Nov  15, 2013                                          **
  47:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
  48:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
  49:../Dave/Generated/src/FEE001/FEE001.c **** 
  50:../Dave/Generated/src/FEE001/FEE001.c **** /**********************   Version History   ************************************
  51:../Dave/Generated/src/FEE001/FEE001.c **** ** Date      Version    Dev    Remarks
  52:../Dave/Generated/src/FEE001/FEE001.c **** **
  53:../Dave/Generated/src/FEE001/FEE001.c **** ** V1.0.0    15-11-13   JBT    Initial Version
  54:../Dave/Generated/src/FEE001/FEE001.c **** ** 
  55:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
  56:../Dave/Generated/src/FEE001/FEE001.c **** 
  57:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
  58:../Dave/Generated/src/FEE001/FEE001.c **** **  Developer     Name
  59:../Dave/Generated/src/FEE001/FEE001.c **** **----------------------------------------------------------------------------
  60:../Dave/Generated/src/FEE001/FEE001.c **** **  JBT           Jubin Thomas
  61:../Dave/Generated/src/FEE001/FEE001.c **** **
  62:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
  63:../Dave/Generated/src/FEE001/FEE001.c **** /**
  64:../Dave/Generated/src/FEE001/FEE001.c ****  * @file FEE001.c
  65:../Dave/Generated/src/FEE001/FEE001.c ****  *
  66:../Dave/Generated/src/FEE001/FEE001.c ****  * @brief  FEE001  App implementation source file.
  67:../Dave/Generated/src/FEE001/FEE001.c ****  *
  68:../Dave/Generated/src/FEE001/FEE001.c ****  **/
  69:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
  70:../Dave/Generated/src/FEE001/FEE001.c ****  **                        INCLUDE FILES                                      **
  71:../Dave/Generated/src/FEE001/FEE001.c ****  ******************************************************************************/
  72:../Dave/Generated/src/FEE001/FEE001.c **** #include "../../inc/FEE001/FEE001.h"
  73:../Dave/Generated/src/FEE001/FEE001.c **** 
  74:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_DFLASH_BANK_SIZE               (FEE001_FLASH_BANK_SIZE)
  75:../Dave/Generated/src/FEE001/FEE001.c **** 
  76:../Dave/Generated/src/FEE001/FEE001.c **** /* Garbage Collection procedure States */
  77:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_IDLE                        (0x0U)
  78:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_START_COPY                  (0x1U)
  79:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_COPY_READ_NXTBLOCK          (0x2U)
  80:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_ERASE_PREV_BANK             (0x3U)
  81:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_REQUESTED                   (0x4U)
  82:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_COPY_WRITE                  (0x5U)
  83:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_END_OF_COPY                 (0x6U)
  84:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_MARK_NEXT_BANK_VALID        (0x7U)
  85:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_MARK_END_ERASE1             (0x8U)
  86:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_FAIL                        (0x9U)
  87:../Dave/Generated/src/FEE001/FEE001.c **** 
  88:../Dave/Generated/src/FEE001/FEE001.c **** /* Prepare DFLASH states states */
  89:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_PREPDFLASH_MARK_FF             (0x1U)
  90:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_PREPDFLASH_MARK_7F             (0x2U)
  91:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_PREPDFLASH_MARK_3F             (0x3U)
  92:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_PREPDFLASH_MARK_2F             (0x4U)
  93:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_PREPDFLASH_MARK_2E             (0x5U)
  94:../Dave/Generated/src/FEE001/FEE001.c **** 
  95:../Dave/Generated/src/FEE001/FEE001.c **** 
  96:../Dave/Generated/src/FEE001/FEE001.c **** /* Cache Update states */ 
  97:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_CACHE_IDLE                     (0U)
  98:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_CACHE_EMPTY_BLOCK_EVAL         (1U)
  99:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_CACHE_NEXT_FREE_BLK_UPDATED    (2U)
 100:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_CACHE_UPDATE_COMPLETE          (4U)
 101:../Dave/Generated/src/FEE001/FEE001.c **** 
 102:../Dave/Generated/src/FEE001/FEE001.c **** /* Bank BLOCK values, used to store current status of the DFLASH */
 103:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_ALL_ONES                       (uint32_t)(0xFFFFFFFF)
 104:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_ALL_ZEROS                      (uint32_t)(0x00000000)
 105:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_START_BIT                      (0x80U)
 106:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_VALID_BIT                      (0x40U)
 107:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_CRC_BIT                        (0x10U)
 108:../Dave/Generated/src/FEE001/FEE001.c **** 
 109:../Dave/Generated/src/FEE001/FEE001.c **** /* InternL Block status macros for implementation*/
 110:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_BLOCK1_DATA_SIZE               (12U)
 111:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_BLOCK2_DATA_SIZE               (14U)
 112:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_8BIT_ALL_ONE                   (0xFFU)
 113:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_LOG_BLOCK_NOT_FOUND            (0xFFU)
 114:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_DUMMY_CRC                      (0xFFFFFFFF)
 115:../Dave/Generated/src/FEE001/FEE001.c **** 
 116:../Dave/Generated/src/FEE001/FEE001.c **** /* Bank BLOCK offsets */
 117:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_MARK_NEXT_VALID_OFFSET         (0U)
 118:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_MARK_BEGIN_OFFSET              (FEE001_DFLASH_BLOCK_SIZE)
 119:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_END_OF_COPY_OFFSET             (FEE001_DFLASH_BLOCK_SIZE * 2U)
 120:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_MARK_END_ERASE_OFFSET          (FEE001_DFLASH_BLOCK_SIZE * 3U)
 121:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_FIRST_DATA_BLOCK_OFFSET        (FEE001_DFLASH_BLOCK_SIZE * 16U)
 122:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_BLOCK1_DATA_OFFSET             (4U)
 123:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_BLOCK2_DATA_OFFSET             (2U)
 124:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_MARKER_OFFSET                  (1U)
 125:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_CRC_OFFSET                     (2U)
 126:../Dave/Generated/src/FEE001/FEE001.c **** 
 127:../Dave/Generated/src/FEE001/FEE001.c **** /* Read and Write Pending request types */
 128:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_NO_REQ_PENDING                 (1U)
 129:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_WRITE_REQ_PENDING              (2U)
 130:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_READ_REQ_PENDING               (3U)
 131:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_WRITE_LAST_BLOCK_COMPLETED     (4U)
 132:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_READ_LAST_BLOCK_COMPLETED      (5U)
 133:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_READ_REQ_START                 (6U)
 134:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_WRITE_REQ_START                (7U)
 135:../Dave/Generated/src/FEE001/FEE001.c **** 
 136:../Dave/Generated/src/FEE001/FEE001.c **** /**
 137:../Dave/Generated/src/FEE001/FEE001.c ****  * States to monitor Garbage Collection completion, if it was interrupted
 138:../Dave/Generated/src/FEE001/FEE001.c ****  * earlier due to reset
 139:../Dave/Generated/src/FEE001/FEE001.c **** */
 140:../Dave/Generated/src/FEE001/FEE001.c **** 
 141:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_NORMAL1                (0x2EU)
 142:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_NORMAL2                (0xE2U)
 143:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_DATA_COPY1             (0x2AU)
 144:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_DATA_COPY2             (0xA2U)
 145:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_COPY_COMPLETE1         (0xA0U)
 146:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_COPY_COMPLETE2         (0x0AU)
 147:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_NEXT_VALID1            (0x20U)
 148:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_NEXT_VALID2            (0x02U)
 149:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_END_ERASE1             (0x2FU)
 150:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_END_ERASE2             (0xF2U)
 151:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_ALL_ERASED             (0xFFU)
 152:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_PREPDFLASH_MARK_7F     (0x7FU)
 153:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_PREPDFLASH_MARK_3F     (0x3FU)
 154:../Dave/Generated/src/FEE001/FEE001.c **** 
 155:../Dave/Generated/src/FEE001/FEE001.c **** 
 156:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_VALID_CORRUPT_2D       (0x2DU)
 157:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_VALID_CORRUPT_D2       (0xD2U)
 158:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_COPIED_CORRUPT_AD      (0xADU)
 159:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_CORRUPT_COPIED_DA      (0xDAU)
 160:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_COMPLETED_CORRUPT_0D   (0x0DU)
 161:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_CORRUPT_COMPLETED_D0   (0xD0U)
 162:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_COPIED_INT_AF          (0xAFU)
 163:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_INT_COPIED_FA          (0xFAU)
 164:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_COMPLETED_INT_0F       (0x0FU)
 165:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_GC_INIT_INT_COMPLETED_F0       (0xF0U)
 166:../Dave/Generated/src/FEE001/FEE001.c **** 
 167:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_VALID_STATE            (uint8_t)(0x20U)
 168:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_COPY_COMPLETED_STATE   (uint8_t)(0x00U)
 169:../Dave/Generated/src/FEE001/FEE001.c **** 
 170:../Dave/Generated/src/FEE001/FEE001.c **** /* Job results */
 171:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_JOB_PASS    ((FEE001_JobResultType)0U)
 172:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_JOB_FAIL    ((FEE001_JobResultType)1U)
 173:../Dave/Generated/src/FEE001/FEE001.c **** 
 174:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_SUCCESS 0U
 175:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_FAILED  1U
 176:../Dave/Generated/src/FEE001/FEE001.c **** 
 177:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_BLK_ECC_ERROR (uint8_t)0x01
 178:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_BLK_INVALID   (uint8_t)0x02
 179:../Dave/Generated/src/FEE001/FEE001.c **** 
 180:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_PREV_READ (uint32_t)1U
 181:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_NORM_READ (uint32_t)0U
 182:../Dave/Generated/src/FEE001/FEE001.c **** 
 183:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_MARKER_MAX_SHIFT            (uint8_t)(4U)
 184:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_MAX_WORDS_IN_BLOCK          (uint8_t)(4U)
 185:../Dave/Generated/src/FEE001/FEE001.c **** #define FEE001_NON_MARKER_WORDS_IN_PAGE1  (uint8_t)(48U)
 186:../Dave/Generated/src/FEE001/FEE001.c **** 
 187:../Dave/Generated/src/FEE001/FEE001.c **** /*
 188:../Dave/Generated/src/FEE001/FEE001.c ****  * Marker states on Init GC operation
 189:../Dave/Generated/src/FEE001/FEE001.c ****  */
 190:../Dave/Generated/src/FEE001/FEE001.c **** #define	   FEE001_MB_0       (uint8_t)0U
 191:../Dave/Generated/src/FEE001/FEE001.c **** #define	   FEE001_MB_1       (uint8_t)1U
 192:../Dave/Generated/src/FEE001/FEE001.c **** #define    FEE001_MB_DIRTY   (uint8_t)2U
 193:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 194:../Dave/Generated/src/FEE001/FEE001.c **** **                      Private Type Definitions                              **
 195:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 196:../Dave/Generated/src/FEE001/FEE001.c **** 
 197:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 198:../Dave/Generated/src/FEE001/FEE001.c **** **                      Global Constant Definitions                           **
 199:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 200:../Dave/Generated/src/FEE001/FEE001.c **** 
 201:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 202:../Dave/Generated/src/FEE001/FEE001.c **** **                      Global Variable Definitions                           **
 203:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 204:../Dave/Generated/src/FEE001/FEE001.c **** 
 205:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 206:../Dave/Generated/src/FEE001/FEE001.c **** **                      Private Constant Definitions                          **
 207:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 208:../Dave/Generated/src/FEE001/FEE001.c **** 
 209:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 210:../Dave/Generated/src/FEE001/FEE001.c **** **                      Private Variable Definitions                          **
 211:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 212:../Dave/Generated/src/FEE001/FEE001.c **** 
 213:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 214:../Dave/Generated/src/FEE001/FEE001.c **** **                      Private Function Declarations                         **
 215:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 216:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lInitGc(void);
 217:../Dave/Generated/src/FEE001/FEE001.c **** 
 218:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lLocalWrite(void);
 219:../Dave/Generated/src/FEE001/FEE001.c **** 
 220:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lUpdateCache(void);
 221:../Dave/Generated/src/FEE001/FEE001.c **** 
 222:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lPrepareDFlash (void);
 223:../Dave/Generated/src/FEE001/FEE001.c **** 
 224:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lLastBlkHandler(void);
 225:../Dave/Generated/src/FEE001/FEE001.c **** 
 226:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lReadMarkerBlocks(void);
 227:../Dave/Generated/src/FEE001/FEE001.c **** 
 228:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lGarbageCollection(void);
 229:../Dave/Generated/src/FEE001/FEE001.c **** 
 230:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lUpdateCurrBankInfo(void);
 231:../Dave/Generated/src/FEE001/FEE001.c **** 
 232:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lUpdateCacheBlockRead(void);
 233:../Dave/Generated/src/FEE001/FEE001.c **** 
 234:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lSetMarkerBlockBuffer(void);
 235:../Dave/Generated/src/FEE001/FEE001.c **** 
 236:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lInitllegalStateMachine(void);
 237:../Dave/Generated/src/FEE001/FEE001.c **** 
 238:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lInitDirtyStateMachine(void);
 239:../Dave/Generated/src/FEE001/FEE001.c **** 
 240:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lInitNormalStateMachine(void);
 241:../Dave/Generated/src/FEE001/FEE001.c **** 
 242:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lLocalRead(uint32_t ReadMode);
 243:../Dave/Generated/src/FEE001/FEE001.c **** 
 244:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lGetPrevData(uint8_t BlockNumber);
 245:../Dave/Generated/src/FEE001/FEE001.c **** 
 246:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lSetMarkerPageBuffer(uint8_t State);
 247:../Dave/Generated/src/FEE001/FEE001.c **** 
 248:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lCacheEmptyBlkEval(uint32_t EndAddr);
 249:../Dave/Generated/src/FEE001/FEE001.c **** 
 250:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lEvalBlockStatus(uint8_t BlockNumber);
 251:../Dave/Generated/src/FEE001/FEE001.c **** 
 252:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lHandleInvldReq( uint8_t  UserBlockIndex);
 253:../Dave/Generated/src/FEE001/FEE001.c **** 
 254:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lHandleWriteReq(uint16_t  BlkSize,uint8_t  UserBlockIndex);
 255:../Dave/Generated/src/FEE001/FEE001.c **** 
 256:../Dave/Generated/src/FEE001/FEE001.c **** static void     Fee_lReadVerifyCRC(uint8_t BlockNumber,
 257:../Dave/Generated/src/FEE001/FEE001.c **** 		                              uint8_t* DataBufferPtr,uint32_t Size);
 258:../Dave/Generated/src/FEE001/FEE001.c **** 
 259:../Dave/Generated/src/FEE001/FEE001.c **** static uint32_t Fee_lGetFreeDFLASHBlocks(void);
 260:../Dave/Generated/src/FEE001/FEE001.c **** 
 261:../Dave/Generated/src/FEE001/FEE001.c **** static uint8_t  Fee_lGetUsrBlockIndex(uint8_t BlockNumber);
 262:../Dave/Generated/src/FEE001/FEE001.c **** 
 263:../Dave/Generated/src/FEE001/FEE001.c **** static uint32_t Fee_lGetDFLASHPhysicalBlocks(uint16_t Size);
 264:../Dave/Generated/src/FEE001/FEE001.c **** 
 265:../Dave/Generated/src/FEE001/FEE001.c **** static uint8_t  Fee_lReadVerifyMarker(uint8_t Bank, uint8_t Block);
 266:../Dave/Generated/src/FEE001/FEE001.c **** 
 267:../Dave/Generated/src/FEE001/FEE001.c **** 
 268:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type  Fee_lHandleGcStartCopy(void);
 269:../Dave/Generated/src/FEE001/FEE001.c **** 
 270:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type  Fee_lGCWrite(uint32_t Position);
 271:../Dave/Generated/src/FEE001/FEE001.c **** 
 272:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type  Fee_lHandleGcStartCopyWrite(void);
 273:../Dave/Generated/src/FEE001/FEE001.c **** 
 274:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type  Fee_lEraseBank(uint32_t PageAddress);
 275:../Dave/Generated/src/FEE001/FEE001.c **** 
 276:../Dave/Generated/src/FEE001/FEE001.c **** 
 277:../Dave/Generated/src/FEE001/FEE001.c **** static status_t Fee_lSrchCopy( uint32_t EndAddr, uint32_t* ReadBlockAddrPtr,
 278:../Dave/Generated/src/FEE001/FEE001.c ****                                                                uint8_t BlkReqd);
 279:../Dave/Generated/src/FEE001/FEE001.c **** static status_t Fee_lTraverseCopy( uint32_t EndAddr, uint32_t* ReadPageAddrPtr,
 280:../Dave/Generated/src/FEE001/FEE001.c ****                       FEE001_TraverseBlkRsltType* BlkRslt, uint8_t BlkNumExptd);
 281:../Dave/Generated/src/FEE001/FEE001.c **** 
 282:../Dave/Generated/src/FEE001/FEE001.c **** #if( FEE001_COMPARE_ON_WRITE_ENABLE == 1U)
 283:../Dave/Generated/src/FEE001/FEE001.c **** 
 284:../Dave/Generated/src/FEE001/FEE001.c **** static status_t Fee_lWriteBlock(uint32_t BlockAddress,
 285:../Dave/Generated/src/FEE001/FEE001.c ****                                            const uint32_t* DataBufferPtr);
 286:../Dave/Generated/src/FEE001/FEE001.c **** 
 287:../Dave/Generated/src/FEE001/FEE001.c **** #endif
 288:../Dave/Generated/src/FEE001/FEE001.c **** 
 289:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 290:../Dave/Generated/src/FEE001/FEE001.c **** **                      Global function  Declarations                         **
 291:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 292:../Dave/Generated/src/FEE001/FEE001.c **** 
 293:../Dave/Generated/src/FEE001/FEE001.c **** void FEE001_Init(void);
 294:../Dave/Generated/src/FEE001/FEE001.c **** 
 295:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_Write(uint8_t BlockNumber, uint8_t *DataBufferPtr);
 296:../Dave/Generated/src/FEE001/FEE001.c **** 
 297:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_Read(uint8_t BlockNumber, uint16_t BlockOffset,
 298:../Dave/Generated/src/FEE001/FEE001.c ****                      uint8_t *DataBufferPtr, uint16_t Length );
 299:../Dave/Generated/src/FEE001/FEE001.c **** 
 300:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_StartGarbageCollection( void );
 301:../Dave/Generated/src/FEE001/FEE001.c **** 
 302:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_InvalidateBlock(uint8_t BlockNumber);
 303:../Dave/Generated/src/FEE001/FEE001.c **** 
 304:../Dave/Generated/src/FEE001/FEE001.c **** FEE001_GLobalStatusType FEE001_GetStatus(void);
 305:../Dave/Generated/src/FEE001/FEE001.c **** 
 306:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_ReadBlockWithCRC(uint8_t BlockNumber,uint8_t *DataBufferPtr);
 307:../Dave/Generated/src/FEE001/FEE001.c **** 
 308:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_GetPreviousData(uint8_t BlockNumber,
 309:../Dave/Generated/src/FEE001/FEE001.c **** 		       uint16_t BlockOffset, uint8_t *DataBufferPtr, uint16_t Length );
 310:../Dave/Generated/src/FEE001/FEE001.c **** 
 311:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 312:../Dave/Generated/src/FEE001/FEE001.c **** **                      Global Function Definitions                           **
 313:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 314:../Dave/Generated/src/FEE001/FEE001.c **** 
 315:../Dave/Generated/src/FEE001/FEE001.c **** 
 316:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 317:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void FEE001_Init(void)                                   **
 318:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 319:../Dave/Generated/src/FEE001/FEE001.c **** ** Requirement ID  :                                                          **
 320:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 321:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
 322:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 323:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
 324:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 325:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : None                                                     **
 326:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 327:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
 328:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 329:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
 330:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 331:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : Driver Module Initialization function                    **
 332:../Dave/Generated/src/FEE001/FEE001.c **** **                   This service shall initialise the Flash EEPROM Emulation **
 333:../Dave/Generated/src/FEE001/FEE001.c **** **                   module using the values provided by configuration set.   **
 334:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 335:../Dave/Generated/src/FEE001/FEE001.c **** 
 336:../Dave/Generated/src/FEE001/FEE001.c **** void FEE001_Init(void)
 337:../Dave/Generated/src/FEE001/FEE001.c **** {
 338:../Dave/Generated/src/FEE001/FEE001.c **** 
 339:../Dave/Generated/src/FEE001/FEE001.c ****    uint16_t Index;
 340:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType  *StateDataPtr;
 341:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 342:../Dave/Generated/src/FEE001/FEE001.c **** 
 343:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the Fee_Init API is called once*/
 344:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 345:../Dave/Generated/src/FEE001/FEE001.c ****    {
 346:../Dave/Generated/src/FEE001/FEE001.c **** 
 347:../Dave/Generated/src/FEE001/FEE001.c ****    /*
 348:../Dave/Generated/src/FEE001/FEE001.c ****     *  Initialise the cache variables for the User defined Block
 349:../Dave/Generated/src/FEE001/FEE001.c ****     *  configuration list
 350:../Dave/Generated/src/FEE001/FEE001.c ****     */
 351:../Dave/Generated/src/FEE001/FEE001.c **** 	  Index = 0U;
 352:../Dave/Generated/src/FEE001/FEE001.c ****     do
 353:../Dave/Generated/src/FEE001/FEE001.c ****     {
 354:../Dave/Generated/src/FEE001/FEE001.c ****       FEE001_CacheType * BlockPtr;
 355:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr = &(StateDataPtr->FeeBlockInfo[Index]);
 356:../Dave/Generated/src/FEE001/FEE001.c **** 
 357:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Address = 0U;
 358:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Consistent = 0U; 
 359:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Valid = 1U;      
 360:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Copied = 0U;
 361:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Crc = 0U;
 362:../Dave/Generated/src/FEE001/FEE001.c ****       Index++;
 363:../Dave/Generated/src/FEE001/FEE001.c ****     }while(Index < FEE001_CfgPtr->FeeBlkCnt);
 364:../Dave/Generated/src/FEE001/FEE001.c **** 
 365:../Dave/Generated/src/FEE001/FEE001.c ****     /********* Initialize all global variables *****************/
 366:../Dave/Generated/src/FEE001/FEE001.c **** 
 367:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCacheUpdateIndex = 0U;
 368:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeJobResult = FEE001_JOB_OK;
 369:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCacheState = FEE001_CACHE_IDLE;
 370:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 371:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcState = FEE001_GC_IDLE;
 372:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeInitGCState = 0U;
 373:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGCLogBlkCount = 0U;
 374:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCRCBuffer = 0U;
 375:../Dave/Generated/src/FEE001/FEE001.c **** 
 376:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeWrittenDFlashBlocksCnt = (uint32_t)0;
 377:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCurrReqBlockNum = 0U;
 378:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCurrBankSrcAddr = 0U;
 379:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserReadDestPtr = (uint8_t*)NULL_PTR;
 380:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcSrcAddr = 0U;
 381:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcDestAddr = 0U;
 382:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeNextFreeBlockAddr = 0U;
 383:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGCDFlashBlocks = (uint32_t)0;
 384:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserWriteBytesCount = 0U;
 385:../Dave/Generated/src/FEE001/FEE001.c ****    
 386:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 0U;
 387:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeWriteInvldAPICalled = 0U;
 388:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 389:../Dave/Generated/src/FEE001/FEE001.c **** 
 390:../Dave/Generated/src/FEE001/FEE001.c ****     /*
 391:../Dave/Generated/src/FEE001/FEE001.c ****     * Read the marker blocks from flash and decide the MARKER STATES
 392:../Dave/Generated/src/FEE001/FEE001.c ****     */
 393:../Dave/Generated/src/FEE001/FEE001.c ****     Fee_lReadMarkerBlocks();
 394:../Dave/Generated/src/FEE001/FEE001.c ****    
 395:../Dave/Generated/src/FEE001/FEE001.c ****     /*
 396:../Dave/Generated/src/FEE001/FEE001.c ****     *  Call INIT-GC state machine function to take decision on current MARKER
 397:../Dave/Generated/src/FEE001/FEE001.c ****     *  STATE available. Progress to GC state machine or PrepareDFLASH State
 398:../Dave/Generated/src/FEE001/FEE001.c ****     *  machine after completing  the Cache update
 399:../Dave/Generated/src/FEE001/FEE001.c ****     */
 400:../Dave/Generated/src/FEE001/FEE001.c ****     Fee_lInitGc();
 401:../Dave/Generated/src/FEE001/FEE001.c ****    
 402:../Dave/Generated/src/FEE001/FEE001.c ****     /*
 403:../Dave/Generated/src/FEE001/FEE001.c ****     *    If Initialisation is done without any errors, set the INIT API called
 404:../Dave/Generated/src/FEE001/FEE001.c ****     *    state into Initialized once.
 405:../Dave/Generated/src/FEE001/FEE001.c ****     */
 406:../Dave/Generated/src/FEE001/FEE001.c ****     if(StateDataPtr->FeeGcState == FEE001_GC_IDLE)
 407:../Dave/Generated/src/FEE001/FEE001.c ****     {
 408:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeInitAPICalled = 1U;
 409:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeIntrJobResult = FEE001_JOB_PASS;
 410:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeUserJobResult = FEE001_JOB_PASS;
 411:../Dave/Generated/src/FEE001/FEE001.c ****     }
 412:../Dave/Generated/src/FEE001/FEE001.c ****    }
 413:../Dave/Generated/src/FEE001/FEE001.c **** }/*End of FEE001_Init*/
 414:../Dave/Generated/src/FEE001/FEE001.c **** 
 415:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 416:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : status_t   FEE001_Write(uint8_t  BlockNumber,            **
 417:../Dave/Generated/src/FEE001/FEE001.c **** **                                           uint8_t *DataBufferPtr)          **
 418:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 419:../Dave/Generated/src/FEE001/FEE001.c **** ** Requirement ID  :                                                          **
 420:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 421:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
 422:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 423:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
 424:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 425:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : BlockNumber   - Number of logical block (Block-ID)       **
 426:../Dave/Generated/src/FEE001/FEE001.c **** **                   DataBufferPtr - Pointer to user data buffer              **
 427:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 428:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
 429:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 430:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : status_t                                                 **
 431:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 432:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall take the block start address and     **
 433:../Dave/Generated/src/FEE001/FEE001.c **** **                   calculate the corresponding memory write address. This   **
 434:../Dave/Generated/src/FEE001/FEE001.c **** **                   routine will perform the write operation on FLASH.       **
 435:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 436:../Dave/Generated/src/FEE001/FEE001.c **** 
 437:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_Write(uint8_t BlockNumber, uint8_t *DataBufferPtr)
 438:../Dave/Generated/src/FEE001/FEE001.c **** {
 439:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001Status_Type     ReturnValue;
 440:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType     *StateDataPtr;
 441:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_BlockType*        BlockPtr;
 442:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t               UserBlockIndex;
 443:../Dave/Generated/src/FEE001/FEE001.c ****    
 444:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 445:../Dave/Generated/src/FEE001/FEE001.c **** 
 446:../Dave/Generated/src/FEE001/FEE001.c ****    UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
 447:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
 448:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = FEE001_INITIALIZED;
 449:../Dave/Generated/src/FEE001/FEE001.c ****    
 450:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the Fee_Init API is called */
 451:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 452:../Dave/Generated/src/FEE001/FEE001.c ****    {
 453:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_OPER_NOT_ALLOWED;
 454:../Dave/Generated/src/FEE001/FEE001.c ****    }
 455:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the block number is correct */
 456:../Dave/Generated/src/FEE001/FEE001.c ****    else if(UserBlockIndex == FEE001_LOG_BLOCK_NOT_FOUND)
 457:../Dave/Generated/src/FEE001/FEE001.c ****    {
 458:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_INVALID_PARAM;
 459:../Dave/Generated/src/FEE001/FEE001.c ****    }
 460:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the buffer pointer is NULL */
 461:../Dave/Generated/src/FEE001/FEE001.c ****    else if(DataBufferPtr == (uint8_t*)NULL_PTR)
 462:../Dave/Generated/src/FEE001/FEE001.c ****    {
 463:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_INVALID_PARAM;
 464:../Dave/Generated/src/FEE001/FEE001.c ****    }
 465:../Dave/Generated/src/FEE001/FEE001.c ****    /*
 466:../Dave/Generated/src/FEE001/FEE001.c ****    *  Execute only if there is no previous pending request and the GC process
 467:../Dave/Generated/src/FEE001/FEE001.c ****    *  is in IDLE state
 468:../Dave/Generated/src/FEE001/FEE001.c ****    */
 469:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING)&&
 470:../Dave/Generated/src/FEE001/FEE001.c ****            (StateDataPtr->FeeGcState == FEE001_GC_IDLE))
 471:../Dave/Generated/src/FEE001/FEE001.c ****    {
 472:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 0U;
 473:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeWriteInvldAPICalled = 1U;
 474:../Dave/Generated/src/FEE001/FEE001.c **** 
 475:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_WRITE_REQ_START;
 476:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeJobResult = FEE001_JOB_PENDING;
 477:../Dave/Generated/src/FEE001/FEE001.c **** 
 478:../Dave/Generated/src/FEE001/FEE001.c ****       /* Store the pending request parameters in the pending request buffer*/
 479:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.BlockNumber  = BlockPtr->BlockNumber;
 480:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.DataBufferPtr = DataBufferPtr;
 481:../Dave/Generated/src/FEE001/FEE001.c **** 
 482:../Dave/Generated/src/FEE001/FEE001.c ****       /* Update the current requested logical block number */
 483:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockPtr->BlockNumber;
 484:../Dave/Generated/src/FEE001/FEE001.c ****       
 485:../Dave/Generated/src/FEE001/FEE001.c ****       /* Call local function to write the specified block of data into flash */
 486:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lLocalWrite();
 487:../Dave/Generated/src/FEE001/FEE001.c **** 
 488:../Dave/Generated/src/FEE001/FEE001.c ****       /* If the user write job is succeeded then return success*/
 489:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeUserJobResult != FEE001_JOB_FAIL)
 490:../Dave/Generated/src/FEE001/FEE001.c ****       {
 491:../Dave/Generated/src/FEE001/FEE001.c ****         ReturnValue = FEE001_COMPLETE;
 492:../Dave/Generated/src/FEE001/FEE001.c ****       }
 493:../Dave/Generated/src/FEE001/FEE001.c ****       /* If the user job is failed due to any flash errors return error*/
 494:../Dave/Generated/src/FEE001/FEE001.c ****       else
 495:../Dave/Generated/src/FEE001/FEE001.c ****       {
 496:../Dave/Generated/src/FEE001/FEE001.c ****         ReturnValue = FEE001_ERROR;
 497:../Dave/Generated/src/FEE001/FEE001.c ****       }
 498:../Dave/Generated/src/FEE001/FEE001.c ****       /* Set the pending request pointer to not request pending state*/
 499:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 500:../Dave/Generated/src/FEE001/FEE001.c ****    }
 501:../Dave/Generated/src/FEE001/FEE001.c ****    else
 502:../Dave/Generated/src/FEE001/FEE001.c ****    {
 503:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_OPER_NOT_ALLOWED;
 504:../Dave/Generated/src/FEE001/FEE001.c ****    }
 505:../Dave/Generated/src/FEE001/FEE001.c ****    return((status_t)ReturnValue);
 506:../Dave/Generated/src/FEE001/FEE001.c ****    
 507:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_Write */
 508:../Dave/Generated/src/FEE001/FEE001.c **** 
 509:../Dave/Generated/src/FEE001/FEE001.c **** 
 510:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 511:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : status_t   FEE001_InvalidateBlock(uint8_t  BlockNumber)  **
 512:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 513:../Dave/Generated/src/FEE001/FEE001.c **** ** Requirement ID  :                                                          **
 514:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 515:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
 516:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 517:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
 518:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 519:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : BlockNumber   - Number of logical block (Block-ID)       **
 520:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 521:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
 522:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 523:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : status_t                                                 **
 524:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 525:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall take the block start address and     **
 526:../Dave/Generated/src/FEE001/FEE001.c **** **                   calculate the corresponding memory write address. This   **
 527:../Dave/Generated/src/FEE001/FEE001.c **** **                   routine will perform the Invalidate operation on FLASH.  **
 528:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 529:../Dave/Generated/src/FEE001/FEE001.c **** 
 530:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_InvalidateBlock(uint8_t BlockNumber)
 531:../Dave/Generated/src/FEE001/FEE001.c **** {
 532:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001Status_Type     ReturnValue;
 533:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType     *StateDataPtr;
 534:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_BlockType*        BlockPtr;
 535:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t               UserBlockIndex;
 536:../Dave/Generated/src/FEE001/FEE001.c **** 
 537:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 538:../Dave/Generated/src/FEE001/FEE001.c **** 
 539:../Dave/Generated/src/FEE001/FEE001.c ****    UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
 540:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
 541:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = FEE001_INITIALIZED;
 542:../Dave/Generated/src/FEE001/FEE001.c **** 
 543:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the Fee_Init API is called */
 544:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 545:../Dave/Generated/src/FEE001/FEE001.c ****    {
 546:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_OPER_NOT_ALLOWED;
 547:../Dave/Generated/src/FEE001/FEE001.c ****    }
 548:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the block number is correct */
 549:../Dave/Generated/src/FEE001/FEE001.c ****    else if(UserBlockIndex == FEE001_LOG_BLOCK_NOT_FOUND)
 550:../Dave/Generated/src/FEE001/FEE001.c ****    {
 551:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_INVALID_PARAM;
 552:../Dave/Generated/src/FEE001/FEE001.c ****    }
 553:../Dave/Generated/src/FEE001/FEE001.c ****    /*
 554:../Dave/Generated/src/FEE001/FEE001.c ****    *  Execute only if there is no previous pending request and the GC process
 555:../Dave/Generated/src/FEE001/FEE001.c ****    *  is in IDLE state
 556:../Dave/Generated/src/FEE001/FEE001.c ****    */
 557:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING)&&
 558:../Dave/Generated/src/FEE001/FEE001.c ****            (StateDataPtr->FeeGcState == FEE001_GC_IDLE))
 559:../Dave/Generated/src/FEE001/FEE001.c ****    {
 560:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 1U;
 561:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeWriteInvldAPICalled = 1U;
 562:../Dave/Generated/src/FEE001/FEE001.c **** 
 563:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_WRITE_REQ_START;
 564:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeJobResult = FEE001_JOB_PENDING;
 565:../Dave/Generated/src/FEE001/FEE001.c **** 
 566:../Dave/Generated/src/FEE001/FEE001.c ****       /* Store the pending request parameters in the pending request buffer*/
 567:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.BlockNumber  = BlockPtr->BlockNumber;
 568:../Dave/Generated/src/FEE001/FEE001.c **** 
 569:../Dave/Generated/src/FEE001/FEE001.c ****       /* Update the current requested logical block number */
 570:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockPtr->BlockNumber;
 571:../Dave/Generated/src/FEE001/FEE001.c **** 
 572:../Dave/Generated/src/FEE001/FEE001.c ****       /* Call local function to write the specified block of data into flash */
 573:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lLocalWrite();
 574:../Dave/Generated/src/FEE001/FEE001.c **** 
 575:../Dave/Generated/src/FEE001/FEE001.c ****       /* If the user job is succeeded return success*/
 576:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeUserJobResult != FEE001_JOB_FAIL)
 577:../Dave/Generated/src/FEE001/FEE001.c ****       {
 578:../Dave/Generated/src/FEE001/FEE001.c ****         ReturnValue = FEE001_COMPLETE;
 579:../Dave/Generated/src/FEE001/FEE001.c ****       }
 580:../Dave/Generated/src/FEE001/FEE001.c ****       /* If the user job is failed due to any flash errors return failure*/
 581:../Dave/Generated/src/FEE001/FEE001.c ****       else
 582:../Dave/Generated/src/FEE001/FEE001.c ****       {
 583:../Dave/Generated/src/FEE001/FEE001.c ****         ReturnValue = FEE001_ERROR;
 584:../Dave/Generated/src/FEE001/FEE001.c ****       }
 585:../Dave/Generated/src/FEE001/FEE001.c ****       /* Set the pending request pointer to not request pending state*/
 586:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 587:../Dave/Generated/src/FEE001/FEE001.c ****    }
 588:../Dave/Generated/src/FEE001/FEE001.c ****    else
 589:../Dave/Generated/src/FEE001/FEE001.c ****    {
 590:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_OPER_NOT_ALLOWED;
 591:../Dave/Generated/src/FEE001/FEE001.c ****    }
 592:../Dave/Generated/src/FEE001/FEE001.c ****    return((status_t)ReturnValue);
 593:../Dave/Generated/src/FEE001/FEE001.c **** 
 594:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_InvalidateBlock */
 595:../Dave/Generated/src/FEE001/FEE001.c **** 
 596:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 597:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : status_t FEE001_Read(uint8_t BlockNumber,                **
 598:../Dave/Generated/src/FEE001/FEE001.c **** **                                        uint16_t BlockOffset,               **
 599:../Dave/Generated/src/FEE001/FEE001.c **** **                                        uint8_t *DataBufferPt               **
 600:../Dave/Generated/src/FEE001/FEE001.c **** **                                        uint16_t Length )                   **
 601:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 602:../Dave/Generated/src/FEE001/FEE001.c **** ** Requirement ID  :                                                          **
 603:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 604:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
 605:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 606:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
 607:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 608:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : BlockNumber   - Number of logical block                  **
 609:../Dave/Generated/src/FEE001/FEE001.c **** **                   Offset        - Start Location for Read start            **
 610:../Dave/Generated/src/FEE001/FEE001.c **** **                   DataBufferPtr - Pointer to user data buffer              **
 611:../Dave/Generated/src/FEE001/FEE001.c **** **                   Length        - End Location for read completion         **
 612:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 613:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
 614:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 615:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : status_t                                                 **
 616:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 617:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall take the block start address and     **
 618:../Dave/Generated/src/FEE001/FEE001.c **** **                   offset to calculate the corresponding memory read        **
 619:../Dave/Generated/src/FEE001/FEE001.c **** **                   address. The address offset and length parameter can     **
 620:../Dave/Generated/src/FEE001/FEE001.c **** **                   take any value within the given types range. This allows **
 621:../Dave/Generated/src/FEE001/FEE001.c **** **                   reading of an arbitrary number of bytes from an          **
 622:../Dave/Generated/src/FEE001/FEE001.c **** **                   arbitrary start address inside a logical block.          **
 623:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 624:../Dave/Generated/src/FEE001/FEE001.c **** 
 625:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_Read(uint8_t BlockNumber, uint16_t BlockOffset,
 626:../Dave/Generated/src/FEE001/FEE001.c ****                        uint8_t *DataBufferPtr, uint16_t Length )
 627:../Dave/Generated/src/FEE001/FEE001.c **** {
 628:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType    *StateDataPtr;
 629:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001Status_Type    ReturnValue;
 630:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_PendReqBufType   *PendReqPtr;
 631:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t             BlkSize;
 632:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t              BlkIdx;
 633:../Dave/Generated/src/FEE001/FEE001.c **** 
 634:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 635:../Dave/Generated/src/FEE001/FEE001.c **** 
 636:../Dave/Generated/src/FEE001/FEE001.c ****    BlkIdx = Fee_lGetUsrBlockIndex(BlockNumber);
 637:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = FEE001_INITIALIZED;
 638:../Dave/Generated/src/FEE001/FEE001.c ****    PendReqPtr = &(StateDataPtr->FeePendReqInfo);
 639:../Dave/Generated/src/FEE001/FEE001.c ****    BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 640:../Dave/Generated/src/FEE001/FEE001.c **** 
 641:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the Fee_Init API is called */
 642:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 643:../Dave/Generated/src/FEE001/FEE001.c ****    {
 644:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_UNINITIALIZED;
 645:../Dave/Generated/src/FEE001/FEE001.c ****    }
 646:../Dave/Generated/src/FEE001/FEE001.c ****    /* If BlockNumber exists in the user configuration and is within range */
 647:../Dave/Generated/src/FEE001/FEE001.c ****    else if(BlkIdx == FEE001_LOG_BLOCK_NOT_FOUND)
 648:../Dave/Generated/src/FEE001/FEE001.c ****    {
 649:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 650:../Dave/Generated/src/FEE001/FEE001.c ****    }
 651:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the buffer pointer is NULL  and check whether the requested read
 652:../Dave/Generated/src/FEE001/FEE001.c ****     * size is out of bounds*/
 653:../Dave/Generated/src/FEE001/FEE001.c ****    else if  ((DataBufferPtr == (uint8_t*) NULL_PTR) ||
 654:../Dave/Generated/src/FEE001/FEE001.c ****             (((uint32_t)BlockOffset + Length) > BlkSize))
 655:../Dave/Generated/src/FEE001/FEE001.c ****    {
 656:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 657:../Dave/Generated/src/FEE001/FEE001.c ****    }
 658:../Dave/Generated/src/FEE001/FEE001.c ****    /*
 659:../Dave/Generated/src/FEE001/FEE001.c ****    *  Execute only if there is no previous pending request and the GC process
 660:../Dave/Generated/src/FEE001/FEE001.c ****    *  is in IDLE state
 661:../Dave/Generated/src/FEE001/FEE001.c ****    */
 662:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 663:../Dave/Generated/src/FEE001/FEE001.c ****            (StateDataPtr->FeeGcState == FEE001_GC_IDLE))
 664:../Dave/Generated/src/FEE001/FEE001.c ****    {
 665:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_START;
 666:../Dave/Generated/src/FEE001/FEE001.c **** 
 667:../Dave/Generated/src/FEE001/FEE001.c ****       /* Store the read request parameters in the Pending buffer structure */
 668:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockNumber = BlockNumber;
 669:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockOffset = BlockOffset;
 670:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->DataBufferPtr = DataBufferPtr;
 671:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = Length;
 672:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 673:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeJobResult = FEE001_JOB_PENDING;
 674:../Dave/Generated/src/FEE001/FEE001.c **** 
 675:../Dave/Generated/src/FEE001/FEE001.c ****       /* Call local function to read the specified block of data from flash */
 676:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lLocalRead((uint32_t)FEE001_NORM_READ);
 677:../Dave/Generated/src/FEE001/FEE001.c **** 
 678:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeJobResult == FEE001_JOB_FAILED)
 679:../Dave/Generated/src/FEE001/FEE001.c ****       {
 680:../Dave/Generated/src/FEE001/FEE001.c ****           ReturnValue = FEE001_ERROR;
 681:../Dave/Generated/src/FEE001/FEE001.c ****       }
 682:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INCONSISTENT)
 683:../Dave/Generated/src/FEE001/FEE001.c ****       {
 684:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INCONSISTENT;
 685:../Dave/Generated/src/FEE001/FEE001.c ****       }
 686:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INVALID)
 687:../Dave/Generated/src/FEE001/FEE001.c ****       {
 688:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INVALID;
 689:../Dave/Generated/src/FEE001/FEE001.c ****       }
 690:../Dave/Generated/src/FEE001/FEE001.c ****       else
 691:../Dave/Generated/src/FEE001/FEE001.c ****       {
 692:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_COMPLETE;
 693:../Dave/Generated/src/FEE001/FEE001.c ****       }
 694:../Dave/Generated/src/FEE001/FEE001.c ****       /* Set the pending request pointer to not request pending state*/
 695:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 696:../Dave/Generated/src/FEE001/FEE001.c ****    }
 697:../Dave/Generated/src/FEE001/FEE001.c ****    else
 698:../Dave/Generated/src/FEE001/FEE001.c ****    {
 699:../Dave/Generated/src/FEE001/FEE001.c **** 	  ReturnValue = FEE001_OPER_NOT_ALLOWED;
 700:../Dave/Generated/src/FEE001/FEE001.c ****    }
 701:../Dave/Generated/src/FEE001/FEE001.c **** 
 702:../Dave/Generated/src/FEE001/FEE001.c ****    return((status_t)ReturnValue);
 703:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_Read */
 704:../Dave/Generated/src/FEE001/FEE001.c **** 
 705:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 706:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : status_t  Fee_StartGarbageCollection( void )             **
 707:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 708:../Dave/Generated/src/FEE001/FEE001.c **** ** Requirement ID  :                                                          **
 709:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 710:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
 711:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 712:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
 713:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 714:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : None                                                     **
 715:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 716:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
 717:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 718:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : status_t                                                 **
 719:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 720:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall start Garbage collection abruptly    **
 721:../Dave/Generated/src/FEE001/FEE001.c **** **                   even threshold is not crossed or flash bank is non empty **
 722:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 723:../Dave/Generated/src/FEE001/FEE001.c **** 
 724:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_StartGarbageCollection( void )
 725:../Dave/Generated/src/FEE001/FEE001.c **** {
 726:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001Status_Type  Status;
 727:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType  *StateDataPtr;
 728:../Dave/Generated/src/FEE001/FEE001.c **** 
 729:../Dave/Generated/src/FEE001/FEE001.c ****    Status = FEE001_INITIALIZED;
 730:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 731:../Dave/Generated/src/FEE001/FEE001.c ****    
 732:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the Fee_Init API is called */
 733:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 734:../Dave/Generated/src/FEE001/FEE001.c ****    {
 735:../Dave/Generated/src/FEE001/FEE001.c ****      Status = FEE001_UNINITIALIZED;
 736:../Dave/Generated/src/FEE001/FEE001.c ****    }
 737:../Dave/Generated/src/FEE001/FEE001.c ****    /*
 738:../Dave/Generated/src/FEE001/FEE001.c ****    *  Execute only if there is no previous pending request and the GC process
 739:../Dave/Generated/src/FEE001/FEE001.c ****    *  is in IDLE state
 740:../Dave/Generated/src/FEE001/FEE001.c ****    */
 741:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 742:../Dave/Generated/src/FEE001/FEE001.c ****            (StateDataPtr->FeeGcState == FEE001_GC_IDLE))
 743:../Dave/Generated/src/FEE001/FEE001.c ****    {
 744:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcState = FEE001_GC_REQUESTED;
 745:../Dave/Generated/src/FEE001/FEE001.c **** 
 746:../Dave/Generated/src/FEE001/FEE001.c ****      /* Call local function to start garbage collection process from scratch */
 747:../Dave/Generated/src/FEE001/FEE001.c ****      Fee_lGarbageCollection();
 748:../Dave/Generated/src/FEE001/FEE001.c **** 
 749:../Dave/Generated/src/FEE001/FEE001.c ****      if(StateDataPtr->FeeGcState == FEE001_GC_FAIL)
 750:../Dave/Generated/src/FEE001/FEE001.c ****      {
 751:../Dave/Generated/src/FEE001/FEE001.c ****      	Status = FEE001_ERROR;
 752:../Dave/Generated/src/FEE001/FEE001.c ****      }
 753:../Dave/Generated/src/FEE001/FEE001.c ****      else
 754:../Dave/Generated/src/FEE001/FEE001.c ****      {
 755:../Dave/Generated/src/FEE001/FEE001.c ****         Status = FEE001_COMPLETE;
 756:../Dave/Generated/src/FEE001/FEE001.c ****      }
 757:../Dave/Generated/src/FEE001/FEE001.c ****    }
 758:../Dave/Generated/src/FEE001/FEE001.c ****    else
 759:../Dave/Generated/src/FEE001/FEE001.c ****    {
 760:../Dave/Generated/src/FEE001/FEE001.c **** 	   Status = FEE001_OPER_NOT_ALLOWED;
 761:../Dave/Generated/src/FEE001/FEE001.c ****    }
 762:../Dave/Generated/src/FEE001/FEE001.c **** 
 763:../Dave/Generated/src/FEE001/FEE001.c ****    return ((status_t)Status);
 764:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_StartGarbageCollection */
 765:../Dave/Generated/src/FEE001/FEE001.c **** 
 766:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 767:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : FEE001_GLobalStatusType FEE001_GetStatus(void)           **
 768:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 769:../Dave/Generated/src/FEE001/FEE001.c **** ** Requirement ID  :                                                          **
 770:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 771:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
 772:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 773:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
 774:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 775:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : None                                                     **
 776:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 777:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
 778:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 779:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : FEE001_GLobalStatusType                                  **
 780:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 781:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall return the status of the App         **
 782:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 783:../Dave/Generated/src/FEE001/FEE001.c **** FEE001_GLobalStatusType FEE001_GetStatus(void)
 784:../Dave/Generated/src/FEE001/FEE001.c **** {
 785:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_GLobalStatusType     ReturnStatus;
 786:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType  *StateDataPtr;
 787:../Dave/Generated/src/FEE001/FEE001.c **** 
 788:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 789:../Dave/Generated/src/FEE001/FEE001.c **** 
 790:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnStatus = FEE001_IDLE;
 791:../Dave/Generated/src/FEE001/FEE001.c **** 
 792:../Dave/Generated/src/FEE001/FEE001.c ****    /* If the GC/InitGC has failed */
 793:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeGcState == FEE001_GC_FAIL)
 794:../Dave/Generated/src/FEE001/FEE001.c ****    {
 795:../Dave/Generated/src/FEE001/FEE001.c **** 	   ReturnStatus = FEE001_GC_FAILED;
 796:../Dave/Generated/src/FEE001/FEE001.c ****    }
 797:../Dave/Generated/src/FEE001/FEE001.c ****    /* If there is a request pending */
 798:../Dave/Generated/src/FEE001/FEE001.c ****    else if(StateDataPtr->FeePendReqStatus != FEE001_NO_REQ_PENDING)
 799:../Dave/Generated/src/FEE001/FEE001.c ****    {
 800:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnStatus = FEE001_BUSY;
 801:../Dave/Generated/src/FEE001/FEE001.c ****    }
 802:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the Fee_Init API is called */
 803:../Dave/Generated/src/FEE001/FEE001.c ****    else if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 804:../Dave/Generated/src/FEE001/FEE001.c ****    {
 805:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnStatus = FEE001_UNINIT;
 806:../Dave/Generated/src/FEE001/FEE001.c ****    }
 807:../Dave/Generated/src/FEE001/FEE001.c ****    else
 808:../Dave/Generated/src/FEE001/FEE001.c ****    {
 809:../Dave/Generated/src/FEE001/FEE001.c ****       /* ReturnStatus is FEE001_IDLE */
 810:../Dave/Generated/src/FEE001/FEE001.c ****    }
 811:../Dave/Generated/src/FEE001/FEE001.c **** 
 812:../Dave/Generated/src/FEE001/FEE001.c ****    return (ReturnStatus);
 813:../Dave/Generated/src/FEE001/FEE001.c **** 
 814:../Dave/Generated/src/FEE001/FEE001.c **** }/*End of FEE01_GetStatus */
 815:../Dave/Generated/src/FEE001/FEE001.c **** 
 816:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 817:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : status_t FEE001_ReadBlockWithCRC(uint8_t BlockNumber,    **
 818:../Dave/Generated/src/FEE001/FEE001.c **** **                                              uint8_t *DataBufferPtr        **
 819:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 820:../Dave/Generated/src/FEE001/FEE001.c **** ** Requirement ID  :                                                          **
 821:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 822:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
 823:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 824:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
 825:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 826:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : BlockNumber   - Number of logical block                  **
 827:../Dave/Generated/src/FEE001/FEE001.c **** **                   DataBufferPtr - Pointer to user data buffer              **
 828:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 829:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
 830:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 831:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : status_t                                                 **
 832:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 833:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall take the block start address and     **
 834:../Dave/Generated/src/FEE001/FEE001.c **** **                   offset to calculate the corresponding memory read        **
 835:../Dave/Generated/src/FEE001/FEE001.c **** **                   address.It reads the complete data block from the flash  **
 836:../Dave/Generated/src/FEE001/FEE001.c **** **                   and compare the CRC from header block with the computed  **
 837:../Dave/Generated/src/FEE001/FEE001.c **** **                   CRC using CRC001 app. Read from arbitary location and    **
 838:../Dave/Generated/src/FEE001/FEE001.c **** **                   limited length is not possible under this API.           **
 839:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 840:../Dave/Generated/src/FEE001/FEE001.c **** 
 841:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_ReadBlockWithCRC(uint8_t BlockNumber,uint8_t *DataBufferPtr)
 842:../Dave/Generated/src/FEE001/FEE001.c **** {
 843:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType    *StateDataPtr;
 844:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001Status_Type    ReturnValue;
 845:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_PendReqBufType   *PendReqPtr;
 846:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t             BlkSize;
 847:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t              BlkIdx;
 848:../Dave/Generated/src/FEE001/FEE001.c **** 
 849:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 850:../Dave/Generated/src/FEE001/FEE001.c **** 
 851:../Dave/Generated/src/FEE001/FEE001.c ****    BlkIdx = Fee_lGetUsrBlockIndex(BlockNumber);
 852:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = FEE001_INITIALIZED;
 853:../Dave/Generated/src/FEE001/FEE001.c ****    PendReqPtr = &(StateDataPtr->FeePendReqInfo);
 854:../Dave/Generated/src/FEE001/FEE001.c ****    BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 855:../Dave/Generated/src/FEE001/FEE001.c **** 
 856:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the Fee_Init API is called */
 857:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 858:../Dave/Generated/src/FEE001/FEE001.c ****    {
 859:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_UNINITIALIZED;
 860:../Dave/Generated/src/FEE001/FEE001.c ****    }
 861:../Dave/Generated/src/FEE001/FEE001.c ****    /* If BlockNumber exists in the user configuration and is within range */
 862:../Dave/Generated/src/FEE001/FEE001.c ****    else if(BlkIdx == FEE001_LOG_BLOCK_NOT_FOUND)
 863:../Dave/Generated/src/FEE001/FEE001.c ****    {
 864:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 865:../Dave/Generated/src/FEE001/FEE001.c ****    }
 866:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the buffer pointer is NULL */
 867:../Dave/Generated/src/FEE001/FEE001.c ****    else if ( DataBufferPtr == (uint8_t*) NULL_PTR )
 868:../Dave/Generated/src/FEE001/FEE001.c ****    {
 869:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 870:../Dave/Generated/src/FEE001/FEE001.c ****    }
 871:../Dave/Generated/src/FEE001/FEE001.c ****    /*
 872:../Dave/Generated/src/FEE001/FEE001.c ****    *  Execute only if there is no previous pending request and the GC process
 873:../Dave/Generated/src/FEE001/FEE001.c ****    *  is in IDLE state
 874:../Dave/Generated/src/FEE001/FEE001.c ****    */
 875:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 876:../Dave/Generated/src/FEE001/FEE001.c ****            (StateDataPtr->FeeGcState == FEE001_GC_IDLE))
 877:../Dave/Generated/src/FEE001/FEE001.c ****    {
 878:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_START;
 879:../Dave/Generated/src/FEE001/FEE001.c **** 
 880:../Dave/Generated/src/FEE001/FEE001.c ****       /* Store the read request parameters in the Pending buffer structure */
 881:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockNumber = BlockNumber;
 882:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockOffset = 0U;
 883:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->DataBufferPtr = DataBufferPtr;
 884:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 885:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 886:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeJobResult = FEE001_JOB_PENDING;
 887:../Dave/Generated/src/FEE001/FEE001.c ****       BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 888:../Dave/Generated/src/FEE001/FEE001.c **** 
 889:../Dave/Generated/src/FEE001/FEE001.c ****       /* Call local function to read the specified block of data from flash */
 890:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lLocalRead((uint32_t)FEE001_NORM_READ);
 891:../Dave/Generated/src/FEE001/FEE001.c **** 
 892:../Dave/Generated/src/FEE001/FEE001.c ****       /* Check for the status after read operation finishes*/
 893:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeJobResult == FEE001_JOB_FAILED)
 894:../Dave/Generated/src/FEE001/FEE001.c ****       {
 895:../Dave/Generated/src/FEE001/FEE001.c ****           ReturnValue = FEE001_ERROR;
 896:../Dave/Generated/src/FEE001/FEE001.c ****       }
 897:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INCONSISTENT)
 898:../Dave/Generated/src/FEE001/FEE001.c ****       {
 899:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INCONSISTENT;
 900:../Dave/Generated/src/FEE001/FEE001.c ****       }
 901:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INVALID)
 902:../Dave/Generated/src/FEE001/FEE001.c ****       {
 903:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INVALID;
 904:../Dave/Generated/src/FEE001/FEE001.c ****       }
 905:../Dave/Generated/src/FEE001/FEE001.c ****       else
 906:../Dave/Generated/src/FEE001/FEE001.c ****       {
 907:../Dave/Generated/src/FEE001/FEE001.c ****     	  /* Call local function to cross check the CRC  */
 908:../Dave/Generated/src/FEE001/FEE001.c ****     	  Fee_lReadVerifyCRC(BlockNumber,DataBufferPtr,BlkSize);
 909:../Dave/Generated/src/FEE001/FEE001.c **** 
 910:../Dave/Generated/src/FEE001/FEE001.c ****     	  if(StateDataPtr->FeeJobResult == FEE001_JOB_OK)
 911:../Dave/Generated/src/FEE001/FEE001.c ****     	  {
 912:../Dave/Generated/src/FEE001/FEE001.c ****     		  ReturnValue = FEE001_COMPLETE;
 913:../Dave/Generated/src/FEE001/FEE001.c ****     	  }
 914:../Dave/Generated/src/FEE001/FEE001.c ****     	  else
 915:../Dave/Generated/src/FEE001/FEE001.c ****     	  {
 916:../Dave/Generated/src/FEE001/FEE001.c ****     		  ReturnValue = FEE001_BLOCK_CRC_FAILED;
 917:../Dave/Generated/src/FEE001/FEE001.c ****     	  }
 918:../Dave/Generated/src/FEE001/FEE001.c ****       }
 919:../Dave/Generated/src/FEE001/FEE001.c ****       /* Set the pending request pointer to not request pending state*/
 920:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 921:../Dave/Generated/src/FEE001/FEE001.c ****    }
 922:../Dave/Generated/src/FEE001/FEE001.c ****    else
 923:../Dave/Generated/src/FEE001/FEE001.c ****    {
 924:../Dave/Generated/src/FEE001/FEE001.c **** 	  ReturnValue = FEE001_OPER_NOT_ALLOWED;
 925:../Dave/Generated/src/FEE001/FEE001.c ****    }
 926:../Dave/Generated/src/FEE001/FEE001.c **** 
 927:../Dave/Generated/src/FEE001/FEE001.c ****    return((status_t)ReturnValue);
 928:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_Read */
 929:../Dave/Generated/src/FEE001/FEE001.c **** 
 930:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
 931:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : status_t FEE001_GetPreviousData(uint8_t BlockNumber,     **
 932:../Dave/Generated/src/FEE001/FEE001.c **** **                                                   uint16_t BlockOffset,    **
 933:../Dave/Generated/src/FEE001/FEE001.c **** **                                                   uint8_t *DataBufferPtr   **
 934:../Dave/Generated/src/FEE001/FEE001.c **** **                                                   uint16_t Length )        **
 935:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 936:../Dave/Generated/src/FEE001/FEE001.c **** ** Requirement ID  :                                                          **
 937:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 938:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
 939:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 940:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
 941:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 942:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : BlockNumber   - Number of logical block                  **
 943:../Dave/Generated/src/FEE001/FEE001.c **** **                   Offset        - Start Location for Read start            **
 944:../Dave/Generated/src/FEE001/FEE001.c **** **                   DataBufferPtr - Pointer to user data buffer              **
 945:../Dave/Generated/src/FEE001/FEE001.c **** **                   Length        - End Location for read completion         **
 946:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 947:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
 948:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 949:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : status_t                                                 **
 950:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
 951:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall read the just previous copy of the   **
 952:../Dave/Generated/src/FEE001/FEE001.c **** **                   particular block when requested. This function is used   **
 953:../Dave/Generated/src/FEE001/FEE001.c **** **                   commonly when the latest copy gets corrupted. This allows**
 954:../Dave/Generated/src/FEE001/FEE001.c **** **                   reading of an arbitrary number of bytes from an          **
 955:../Dave/Generated/src/FEE001/FEE001.c **** **                   arbitrary start address inside a logical block.          **
 956:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
 957:../Dave/Generated/src/FEE001/FEE001.c **** 
 958:../Dave/Generated/src/FEE001/FEE001.c **** status_t FEE001_GetPreviousData(uint8_t BlockNumber, uint16_t BlockOffset,
 959:../Dave/Generated/src/FEE001/FEE001.c ****                        uint8_t *DataBufferPtr, uint16_t Length )
 960:../Dave/Generated/src/FEE001/FEE001.c **** {
 961:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType       *StateDataPtr;
 962:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001Status_Type       ReturnValue;
 963:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_PendReqBufType      *PendReqPtr;
 964:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t                BlkSize;
 965:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t                 BlkIdx;
 966:../Dave/Generated/src/FEE001/FEE001.c **** 
 967:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 968:../Dave/Generated/src/FEE001/FEE001.c **** 
 969:../Dave/Generated/src/FEE001/FEE001.c ****    BlkIdx = Fee_lGetUsrBlockIndex(BlockNumber);
 970:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = FEE001_INITIALIZED;
 971:../Dave/Generated/src/FEE001/FEE001.c ****    PendReqPtr = &(StateDataPtr->FeePendReqInfo);
 972:../Dave/Generated/src/FEE001/FEE001.c ****    BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 973:../Dave/Generated/src/FEE001/FEE001.c **** 
 974:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the Fee_Init API is called */
 975:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 976:../Dave/Generated/src/FEE001/FEE001.c ****    {
 977:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_UNINITIALIZED;
 978:../Dave/Generated/src/FEE001/FEE001.c ****    }
 979:../Dave/Generated/src/FEE001/FEE001.c ****    /* If BlockNumber exists in the user configuration and is within range */
 980:../Dave/Generated/src/FEE001/FEE001.c ****    else if(BlkIdx == FEE001_LOG_BLOCK_NOT_FOUND)
 981:../Dave/Generated/src/FEE001/FEE001.c ****    {
 982:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 983:../Dave/Generated/src/FEE001/FEE001.c ****    }
 984:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if the buffer pointer is NULL as well as the requested size is out
 985:../Dave/Generated/src/FEE001/FEE001.c ****     * of bounds of the actual configured block size. */
 986:../Dave/Generated/src/FEE001/FEE001.c ****    else if  ((DataBufferPtr == (uint8_t*) NULL_PTR) ||
 987:../Dave/Generated/src/FEE001/FEE001.c ****             (((uint32_t)BlockOffset + Length) > BlkSize))
 988:../Dave/Generated/src/FEE001/FEE001.c ****    {
 989:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 990:../Dave/Generated/src/FEE001/FEE001.c ****    }
 991:../Dave/Generated/src/FEE001/FEE001.c ****    /*
 992:../Dave/Generated/src/FEE001/FEE001.c ****    *  Execute only if there is no previous pending request and the GC process
 993:../Dave/Generated/src/FEE001/FEE001.c ****    *  is in IDLE state
 994:../Dave/Generated/src/FEE001/FEE001.c ****    */
 995:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 996:../Dave/Generated/src/FEE001/FEE001.c ****            (StateDataPtr->FeeGcState == FEE001_GC_IDLE))
 997:../Dave/Generated/src/FEE001/FEE001.c ****    {
 998:../Dave/Generated/src/FEE001/FEE001.c **** 
 999:../Dave/Generated/src/FEE001/FEE001.c **** 	   /* Call local function to find out the location of previous block */
1000:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lGetPrevData(BlockNumber);
1001:../Dave/Generated/src/FEE001/FEE001.c **** 
1002:../Dave/Generated/src/FEE001/FEE001.c ****       /* Check if a valid pre-existing block is found or not*/
1003:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeJobResult == FEE001_JOB_PENDING)
1004:../Dave/Generated/src/FEE001/FEE001.c ****       {
1005:../Dave/Generated/src/FEE001/FEE001.c **** 
1006:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->BlockNumber = BlockNumber;
1007:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->BlockOffset = BlockOffset;
1008:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->DataBufferPtr = DataBufferPtr;
1009:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->Length = Length;
1010:../Dave/Generated/src/FEE001/FEE001.c **** 
1011:../Dave/Generated/src/FEE001/FEE001.c ****     	/* Call local function to read the specified block of data from flash */
1012:../Dave/Generated/src/FEE001/FEE001.c ****         Fee_lLocalRead((uint32_t)FEE001_PREV_READ);
1013:../Dave/Generated/src/FEE001/FEE001.c ****       }
1014:../Dave/Generated/src/FEE001/FEE001.c ****       /* Check for various consistency error checks for the read block*/
1015:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeJobResult == FEE001_JOB_FAILED)
1016:../Dave/Generated/src/FEE001/FEE001.c ****       {
1017:../Dave/Generated/src/FEE001/FEE001.c ****           ReturnValue = FEE001_ERROR;
1018:../Dave/Generated/src/FEE001/FEE001.c ****       }
1019:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INCONSISTENT)
1020:../Dave/Generated/src/FEE001/FEE001.c ****       {
1021:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INCONSISTENT;
1022:../Dave/Generated/src/FEE001/FEE001.c ****       }
1023:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INVALID)
1024:../Dave/Generated/src/FEE001/FEE001.c ****       {
1025:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INVALID;
1026:../Dave/Generated/src/FEE001/FEE001.c ****       }
1027:../Dave/Generated/src/FEE001/FEE001.c ****       else
1028:../Dave/Generated/src/FEE001/FEE001.c ****       {
1029:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_COMPLETE;
1030:../Dave/Generated/src/FEE001/FEE001.c ****       }
1031:../Dave/Generated/src/FEE001/FEE001.c ****       /* Set the pending request pointer to not request pending state*/
1032:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
1033:../Dave/Generated/src/FEE001/FEE001.c ****    }
1034:../Dave/Generated/src/FEE001/FEE001.c ****    else
1035:../Dave/Generated/src/FEE001/FEE001.c ****    {
1036:../Dave/Generated/src/FEE001/FEE001.c **** 	  ReturnValue = FEE001_OPER_NOT_ALLOWED;
1037:../Dave/Generated/src/FEE001/FEE001.c ****    }
1038:../Dave/Generated/src/FEE001/FEE001.c **** 
1039:../Dave/Generated/src/FEE001/FEE001.c ****    return((status_t)ReturnValue);
1040:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_GetPreviousData */
1041:../Dave/Generated/src/FEE001/FEE001.c **** 
1042:../Dave/Generated/src/FEE001/FEE001.c **** 
1043:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
1044:../Dave/Generated/src/FEE001/FEE001.c **** **                      Private Function Definitions                          **
1045:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
1046:../Dave/Generated/src/FEE001/FEE001.c **** 
1047:../Dave/Generated/src/FEE001/FEE001.c **** 
1048:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
1049:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void Fee_lGetPrevData ( uint8_t BlockNumber )            **
1050:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1051:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
1052:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1053:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
1054:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1055:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : BlockNumber   - ID Number of logical block               **
1056:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1057:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
1058:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1059:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
1060:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1061:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function will traverse through the bank and find    **
1062:../Dave/Generated/src/FEE001/FEE001.c **** **                   the previous copy of the block if existing.              **
1063:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
1064:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lGetPrevData(uint8_t BlockNumber)
1065:../Dave/Generated/src/FEE001/FEE001.c **** {
1066:../Dave/Generated/src/FEE001/FEE001.c **** 
1067:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t                 RetVal;
1068:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType        *StateDataPtr;
1069:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_PendReqBufType       *PendReqPtr;
1070:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t                 ReadBlockAddr;
1071:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t                 EndAddr;
1072:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_TraverseBlkRsltType  BlkRslt;
1073:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t                 ExptdBlockCnt;
1074:../Dave/Generated/src/FEE001/FEE001.c ****    uint16_t                 BlkSize;
1075:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t                  BlkIdx;
1076:../Dave/Generated/src/FEE001/FEE001.c **** 
1077:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
1078:../Dave/Generated/src/FEE001/FEE001.c ****    /* Get the block details */
1079:../Dave/Generated/src/FEE001/FEE001.c ****    BlkIdx = Fee_lGetUsrBlockIndex(BlockNumber);
1080:../Dave/Generated/src/FEE001/FEE001.c ****    PendReqPtr = &(StateDataPtr->FeePendReqInfo);
1081:../Dave/Generated/src/FEE001/FEE001.c ****    BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
1082:../Dave/Generated/src/FEE001/FEE001.c ****    ExptdBlockCnt = Fee_lGetDFLASHPhysicalBlocks(BlkSize);
1083:../Dave/Generated/src/FEE001/FEE001.c ****    /* Load */
1084:../Dave/Generated/src/FEE001/FEE001.c ****    ReadBlockAddr = StateDataPtr->FeeNextFreeBlockAddr;
1085:../Dave/Generated/src/FEE001/FEE001.c ****    /* Find the end address from current Bank */
1086:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeCurrBank == 0U)
1087:../Dave/Generated/src/FEE001/FEE001.c ****    {
1088:../Dave/Generated/src/FEE001/FEE001.c ****      EndAddr = FEE001_DFLASH_BANK0_BASE + FEE001_FIRST_DATA_BLOCK_OFFSET;
1089:../Dave/Generated/src/FEE001/FEE001.c ****    }
1090:../Dave/Generated/src/FEE001/FEE001.c ****    else
1091:../Dave/Generated/src/FEE001/FEE001.c ****    {
1092:../Dave/Generated/src/FEE001/FEE001.c ****      EndAddr = FEE001_DFLASH_BANK1_BASE + FEE001_FIRST_DATA_BLOCK_OFFSET;
1093:../Dave/Generated/src/FEE001/FEE001.c ****    }
1094:../Dave/Generated/src/FEE001/FEE001.c **** 
1095:../Dave/Generated/src/FEE001/FEE001.c ****    /* Search for the latest copy */
1096:../Dave/Generated/src/FEE001/FEE001.c ****    RetVal = Fee_lSrchCopy(EndAddr, &ReadBlockAddr, BlockNumber);
1097:../Dave/Generated/src/FEE001/FEE001.c **** 
1098:../Dave/Generated/src/FEE001/FEE001.c ****    /* If the latest copy is found */
1099:../Dave/Generated/src/FEE001/FEE001.c ****    if(RetVal == FEE001_SUCCESS)
1100:../Dave/Generated/src/FEE001/FEE001.c ****    {
1101:../Dave/Generated/src/FEE001/FEE001.c ****       /* Traverse the latest copy */
1102:../Dave/Generated/src/FEE001/FEE001.c ****       RetVal = Fee_lTraverseCopy(EndAddr,&ReadBlockAddr,&BlkRslt, BlockNumber);
1103:../Dave/Generated/src/FEE001/FEE001.c **** 
1104:../Dave/Generated/src/FEE001/FEE001.c ****       if(RetVal == FEE001_SUCCESS)
1105:../Dave/Generated/src/FEE001/FEE001.c ****       {
1106:../Dave/Generated/src/FEE001/FEE001.c ****          /* Search for the old copy of required block */
1107:../Dave/Generated/src/FEE001/FEE001.c ****          RetVal = Fee_lSrchCopy(EndAddr,&ReadBlockAddr,BlockNumber);
1108:../Dave/Generated/src/FEE001/FEE001.c **** 
1109:../Dave/Generated/src/FEE001/FEE001.c ****          /* If the old copy is found */
1110:../Dave/Generated/src/FEE001/FEE001.c ****          if (RetVal == FEE001_SUCCESS)
1111:../Dave/Generated/src/FEE001/FEE001.c ****          {
1112:../Dave/Generated/src/FEE001/FEE001.c ****           /* No need to check the return value as this is the last step
1113:../Dave/Generated/src/FEE001/FEE001.c ****            * i.e
1114:../Dave/Generated/src/FEE001/FEE001.c ****            *  FEE001_SUCCESS : Proceed with next step i.e next search
1115:../Dave/Generated/src/FEE001/FEE001.c ****            *  FEE001_FAILED  : Don't proceed with next search as marker block is
1116:../Dave/Generated/src/FEE001/FEE001.c ****            *                   already reached
1117:../Dave/Generated/src/FEE001/FEE001.c ****           */
1118:../Dave/Generated/src/FEE001/FEE001.c ****            (void) Fee_lTraverseCopy(EndAddr,
1119:../Dave/Generated/src/FEE001/FEE001.c ****                                        &ReadBlockAddr,&BlkRslt, BlockNumber);
1120:../Dave/Generated/src/FEE001/FEE001.c **** 
1121:../Dave/Generated/src/FEE001/FEE001.c ****            /* Check if the old copy has an ECC error */
1122:../Dave/Generated/src/FEE001/FEE001.c ****            if((BlkRslt.Status & FEE001_BLK_ECC_ERROR) == FEE001_BLK_ECC_ERROR)
1123:../Dave/Generated/src/FEE001/FEE001.c ****            {
1124:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
1125:../Dave/Generated/src/FEE001/FEE001.c ****            }
1126:../Dave/Generated/src/FEE001/FEE001.c ****            /* Old copy has been invalidated */
1127:../Dave/Generated/src/FEE001/FEE001.c ****            else if ((BlkRslt.Status & FEE001_BLK_INVALID) == FEE001_BLK_INVALID)
1128:../Dave/Generated/src/FEE001/FEE001.c ****            {
1129:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeJobResult = FEE001_JOB_INVALID;
1130:../Dave/Generated/src/FEE001/FEE001.c ****            }
1131:../Dave/Generated/src/FEE001/FEE001.c ****            /* Old copy is inconsistent */
1132:../Dave/Generated/src/FEE001/FEE001.c ****            else if (BlkRslt.BlockCnt != ExptdBlockCnt)
1133:../Dave/Generated/src/FEE001/FEE001.c ****            {
1134:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeJobResult = FEE001_JOB_INCONSISTENT;
1135:../Dave/Generated/src/FEE001/FEE001.c ****            }
1136:../Dave/Generated/src/FEE001/FEE001.c ****            /* Old copy is OK. Store the request */
1137:../Dave/Generated/src/FEE001/FEE001.c ****            else
1138:../Dave/Generated/src/FEE001/FEE001.c ****            {
1139:../Dave/Generated/src/FEE001/FEE001.c ****               /* Traverse Copy crosses block by one block. Hence increment
1140:../Dave/Generated/src/FEE001/FEE001.c ****                  by one block to get the actual block start address
1141:../Dave/Generated/src/FEE001/FEE001.c ****               */
1142:../Dave/Generated/src/FEE001/FEE001.c ****               PendReqPtr->BlkStartAddr=ReadBlockAddr + FEE001_DFLASH_BLOCK_SIZE;
1143:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_START;
1144:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
1145:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeJobResult = FEE001_JOB_PENDING;
1146:../Dave/Generated/src/FEE001/FEE001.c ****            } /* End of Traverse old copy */
1147:../Dave/Generated/src/FEE001/FEE001.c ****          } /* End of Search old copy */
1148:../Dave/Generated/src/FEE001/FEE001.c ****          else
1149:../Dave/Generated/src/FEE001/FEE001.c ****          {
1150:../Dave/Generated/src/FEE001/FEE001.c ****         	 StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
1151:../Dave/Generated/src/FEE001/FEE001.c ****          }
1152:../Dave/Generated/src/FEE001/FEE001.c ****       } /* End of Traverse latest copy */
1153:../Dave/Generated/src/FEE001/FEE001.c ****       else
1154:../Dave/Generated/src/FEE001/FEE001.c ****       {
1155:../Dave/Generated/src/FEE001/FEE001.c ****     	  StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
1156:../Dave/Generated/src/FEE001/FEE001.c ****       }
1157:../Dave/Generated/src/FEE001/FEE001.c ****    } /* End of Search latest copy */
1158:../Dave/Generated/src/FEE001/FEE001.c ****    else
1159:../Dave/Generated/src/FEE001/FEE001.c ****    {
1160:../Dave/Generated/src/FEE001/FEE001.c **** 	   StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
1161:../Dave/Generated/src/FEE001/FEE001.c ****    }
1162:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lGetPrevData */
1163:../Dave/Generated/src/FEE001/FEE001.c **** 
1164:../Dave/Generated/src/FEE001/FEE001.c **** 
1165:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
1166:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : status_t Fee_lSrchCopy( uint32_t EndAddr,                **
1167:../Dave/Generated/src/FEE001/FEE001.c **** **                                           uint32_t* ReadBlockAddrPtr,      **
1168:../Dave/Generated/src/FEE001/FEE001.c **** **                                           uint8_t BlkReqd                  **
1169:../Dave/Generated/src/FEE001/FEE001.c **** **                                         )                                  **
1170:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1171:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
1172:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1173:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
1174:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1175:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : BlockNumber   - ID Number of logical block               **
1176:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1177:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
1178:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1179:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
1180:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1181:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function reads the block header bytes and compare   **
1182:../Dave/Generated/src/FEE001/FEE001.c **** **                   the block number to find the matching block.             **
1183:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
1184:../Dave/Generated/src/FEE001/FEE001.c **** static status_t Fee_lSrchCopy  (  uint32_t EndAddr,
1185:../Dave/Generated/src/FEE001/FEE001.c ****                                   uint32_t* ReadBlockAddrPtr,
1186:../Dave/Generated/src/FEE001/FEE001.c ****                                   uint8_t BlkReqd
1187:../Dave/Generated/src/FEE001/FEE001.c ****                                 )
1188:../Dave/Generated/src/FEE001/FEE001.c **** {
1189:../Dave/Generated/src/FEE001/FEE001.c ****    BOOLType              LoopStop;
1190:../Dave/Generated/src/FEE001/FEE001.c ****    status_t              StatVal;
1191:../Dave/Generated/src/FEE001/FEE001.c ****    status_t              RetVal;
1192:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType     *StateDataPtr;
1193:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t              TmpReadAddr;
1194:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t               BlkNumRead;
1195:../Dave/Generated/src/FEE001/FEE001.c **** 
1196:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
1197:../Dave/Generated/src/FEE001/FEE001.c **** 
1198:../Dave/Generated/src/FEE001/FEE001.c ****    RetVal = FEE001_SUCCESS;
1199:../Dave/Generated/src/FEE001/FEE001.c **** 
1200:../Dave/Generated/src/FEE001/FEE001.c ****    do
1201:../Dave/Generated/src/FEE001/FEE001.c ****    {
1202:../Dave/Generated/src/FEE001/FEE001.c ****      TmpReadAddr = *ReadBlockAddrPtr;
1203:../Dave/Generated/src/FEE001/FEE001.c **** 
1204:../Dave/Generated/src/FEE001/FEE001.c ****      /* State page reached. No more data pages to be read */
1205:../Dave/Generated/src/FEE001/FEE001.c ****      if( TmpReadAddr < EndAddr)
1206:../Dave/Generated/src/FEE001/FEE001.c ****      {
1207:../Dave/Generated/src/FEE001/FEE001.c ****        RetVal = FEE001_FAILED;
1208:../Dave/Generated/src/FEE001/FEE001.c ****        LoopStop = TRUE;
1209:../Dave/Generated/src/FEE001/FEE001.c ****      }
1210:../Dave/Generated/src/FEE001/FEE001.c ****      else
1211:../Dave/Generated/src/FEE001/FEE001.c ****      {
1212:../Dave/Generated/src/FEE001/FEE001.c ****        /* Clear all error status flags before flash operation*/
1213:../Dave/Generated/src/FEE001/FEE001.c ****        FLASH003_ClearStatus();
1214:../Dave/Generated/src/FEE001/FEE001.c ****     	  
1215:../Dave/Generated/src/FEE001/FEE001.c ****        /* Read the header (2 Words) */
1216:../Dave/Generated/src/FEE001/FEE001.c ****        StatVal = FLASH003_ReadBytes((uint32_t)TmpReadAddr,
1217:../Dave/Generated/src/FEE001/FEE001.c ****     		                (uint8_t *)(void*)StateDataPtr->FeeReadWriteBuffer,
1218:../Dave/Generated/src/FEE001/FEE001.c ****     		                (uint32_t)2U);
1219:../Dave/Generated/src/FEE001/FEE001.c **** 
1220:../Dave/Generated/src/FEE001/FEE001.c ****        BlkNumRead = *(uint8_t*)(void*)(StateDataPtr->FeeReadWriteBuffer);
1221:../Dave/Generated/src/FEE001/FEE001.c **** 
1222:../Dave/Generated/src/FEE001/FEE001.c ****        /* Check if DBER is found in the header */
1223:../Dave/Generated/src/FEE001/FEE001.c ****        if (StatVal != FEE001_SUCCESS)
1224:../Dave/Generated/src/FEE001/FEE001.c ****        {
1225:../Dave/Generated/src/FEE001/FEE001.c ****          LoopStop = FALSE;
1226:../Dave/Generated/src/FEE001/FEE001.c ****          *ReadBlockAddrPtr = TmpReadAddr - FEE001_DFLASH_BLOCK_SIZE;
1227:../Dave/Generated/src/FEE001/FEE001.c ****        }
1228:../Dave/Generated/src/FEE001/FEE001.c ****        /* Required block not yet found */
1229:../Dave/Generated/src/FEE001/FEE001.c ****        else if (BlkNumRead != BlkReqd)
1230:../Dave/Generated/src/FEE001/FEE001.c ****        {
1231:../Dave/Generated/src/FEE001/FEE001.c ****          LoopStop = FALSE;
1232:../Dave/Generated/src/FEE001/FEE001.c ****          *ReadBlockAddrPtr = TmpReadAddr - FEE001_DFLASH_BLOCK_SIZE;
1233:../Dave/Generated/src/FEE001/FEE001.c ****        }
1234:../Dave/Generated/src/FEE001/FEE001.c ****        /* Required block is found */
1235:../Dave/Generated/src/FEE001/FEE001.c ****        else
1236:../Dave/Generated/src/FEE001/FEE001.c ****        {
1237:../Dave/Generated/src/FEE001/FEE001.c ****          LoopStop = TRUE;
1238:../Dave/Generated/src/FEE001/FEE001.c ****        }
1239:../Dave/Generated/src/FEE001/FEE001.c ****      }
1240:../Dave/Generated/src/FEE001/FEE001.c ****    }while(LoopStop == FALSE);
1241:../Dave/Generated/src/FEE001/FEE001.c **** 
1242:../Dave/Generated/src/FEE001/FEE001.c ****    return(RetVal);
1243:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lSrchCopy */
1244:../Dave/Generated/src/FEE001/FEE001.c **** 
1245:../Dave/Generated/src/FEE001/FEE001.c **** 
1246:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
1247:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : status_t  Fee_lTraverseCopy( uint32_t EndAddr,           **
1248:../Dave/Generated/src/FEE001/FEE001.c **** **                                       uint32_t* ReadPageAddrPtr,           **
1249:../Dave/Generated/src/FEE001/FEE001.c **** **                                       FEE001_TraverseBlkRsltType* BlkRslt, **
1250:../Dave/Generated/src/FEE001/FEE001.c **** **                                       uint8_t BlkNumExptd                  **
1251:../Dave/Generated/src/FEE001/FEE001.c **** **                                       )                                    **
1252:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1253:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
1254:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1255:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
1256:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1257:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : BlockNumber   - ID Number of logical block               **
1258:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1259:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
1260:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1261:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
1262:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1263:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function checks for the status information of the   **
1264:../Dave/Generated/src/FEE001/FEE001.c **** **                   particular block and return the status info.             **
1265:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
1266:../Dave/Generated/src/FEE001/FEE001.c **** static status_t Fee_lTraverseCopy( uint32_t EndAddr,
1267:../Dave/Generated/src/FEE001/FEE001.c ****                                          uint32_t* ReadBlockAddrPtr,
1268:../Dave/Generated/src/FEE001/FEE001.c ****                                          FEE001_TraverseBlkRsltType* BlkRslt,
1269:../Dave/Generated/src/FEE001/FEE001.c ****                                          uint8_t BlkNumExptd
1270:../Dave/Generated/src/FEE001/FEE001.c ****                                         )
1271:../Dave/Generated/src/FEE001/FEE001.c **** {
1272:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType   *StateDataPtr;
1273:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t             BlockCnt;
1274:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t             TmpReadAddr;
1275:../Dave/Generated/src/FEE001/FEE001.c ****    uint16_t             BlkNumRead;
1276:../Dave/Generated/src/FEE001/FEE001.c ****    BOOLType             LoopStop;
1277:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t             StatVal;
1278:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t             RetVal;
1279:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_BlockHeaderType* BlkHeaderPtr;
1280:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t              StatusByte;
1281:../Dave/Generated/src/FEE001/FEE001.c **** 
1282:../Dave/Generated/src/FEE001/FEE001.c ****    BlockCnt = 0U;
1283:../Dave/Generated/src/FEE001/FEE001.c ****    RetVal = FEE001_SUCCESS;
1284:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
1285:../Dave/Generated/src/FEE001/FEE001.c **** 
1286:../Dave/Generated/src/FEE001/FEE001.c ****    BlkRslt->Status = 0U;
1287:../Dave/Generated/src/FEE001/FEE001.c ****    BlkRslt->BlockCnt = 0U;
1288:../Dave/Generated/src/FEE001/FEE001.c **** 
1289:../Dave/Generated/src/FEE001/FEE001.c ****    do
1290:../Dave/Generated/src/FEE001/FEE001.c ****    {
1291:../Dave/Generated/src/FEE001/FEE001.c ****      TmpReadAddr = *ReadBlockAddrPtr;
1292:../Dave/Generated/src/FEE001/FEE001.c **** 
1293:../Dave/Generated/src/FEE001/FEE001.c ****      /* Marker block reached. No more data data to be read */
1294:../Dave/Generated/src/FEE001/FEE001.c ****      /* Case: ECC error in first page of multi block data structure*/
1295:../Dave/Generated/src/FEE001/FEE001.c ****      if( TmpReadAddr < EndAddr)
1296:../Dave/Generated/src/FEE001/FEE001.c ****      {
1297:../Dave/Generated/src/FEE001/FEE001.c ****        RetVal = FEE001_FAILED;
1298:../Dave/Generated/src/FEE001/FEE001.c ****        LoopStop = TRUE;
1299:../Dave/Generated/src/FEE001/FEE001.c ****      }
1300:../Dave/Generated/src/FEE001/FEE001.c ****      else
1301:../Dave/Generated/src/FEE001/FEE001.c ****      {
1302:../Dave/Generated/src/FEE001/FEE001.c ****        /* Clear all error status flags before flash operation*/
1303:../Dave/Generated/src/FEE001/FEE001.c ****        FLASH003_ClearStatus();
1304:../Dave/Generated/src/FEE001/FEE001.c ****        
1305:../Dave/Generated/src/FEE001/FEE001.c ****        /* Read the header (2 Words) */
1306:../Dave/Generated/src/FEE001/FEE001.c ****        StatVal = FLASH003_ReadBytes((uint32_t)TmpReadAddr,
1307:../Dave/Generated/src/FEE001/FEE001.c ****       		                (uint8_t *)(void*)StateDataPtr->FeeReadWriteBuffer,
1308:../Dave/Generated/src/FEE001/FEE001.c ****       		                (uint32_t)2U);
1309:../Dave/Generated/src/FEE001/FEE001.c **** 
1310:../Dave/Generated/src/FEE001/FEE001.c ****        *ReadBlockAddrPtr = TmpReadAddr - FEE001_DFLASH_BLOCK_SIZE;
1311:../Dave/Generated/src/FEE001/FEE001.c **** 
1312:../Dave/Generated/src/FEE001/FEE001.c ****        if(StatVal == FEE001_SUCCESS)
1313:../Dave/Generated/src/FEE001/FEE001.c ****        {
1314:../Dave/Generated/src/FEE001/FEE001.c ****          BlkHeaderPtr = (FEE001_BlockHeaderType*)(void *)
1315:../Dave/Generated/src/FEE001/FEE001.c ****                             StateDataPtr->FeeReadWriteBuffer;
1316:../Dave/Generated/src/FEE001/FEE001.c ****          StatusByte = BlkHeaderPtr->Status;
1317:../Dave/Generated/src/FEE001/FEE001.c ****          BlockCnt++;
1318:../Dave/Generated/src/FEE001/FEE001.c ****          BlkNumRead = *(uint8_t*)(void*)(StateDataPtr->FeeReadWriteBuffer);
1319:../Dave/Generated/src/FEE001/FEE001.c **** 
1320:../Dave/Generated/src/FEE001/FEE001.c ****          /* The required block number does not match */
1321:../Dave/Generated/src/FEE001/FEE001.c ****          /* Case: First block of the required block has ECC error */
1322:../Dave/Generated/src/FEE001/FEE001.c ****          if (BlkNumRead != BlkNumExptd )
1323:../Dave/Generated/src/FEE001/FEE001.c ****          {
1324:../Dave/Generated/src/FEE001/FEE001.c ****            LoopStop = TRUE;
1325:../Dave/Generated/src/FEE001/FEE001.c ****            BlockCnt = 0U;
1326:../Dave/Generated/src/FEE001/FEE001.c ****          }
1327:../Dave/Generated/src/FEE001/FEE001.c ****          /* The start of the block is reached */
1328:../Dave/Generated/src/FEE001/FEE001.c ****          else if ((StatusByte & (FEE001_START_BIT)) != 0U)
1329:../Dave/Generated/src/FEE001/FEE001.c ****          {
1330:../Dave/Generated/src/FEE001/FEE001.c ****            LoopStop = TRUE;
1331:../Dave/Generated/src/FEE001/FEE001.c **** 
1332:../Dave/Generated/src/FEE001/FEE001.c ****            /* Update the result */
1333:../Dave/Generated/src/FEE001/FEE001.c ****            if ((StatusByte & (FEE001_VALID_BIT)) == 0U)
1334:../Dave/Generated/src/FEE001/FEE001.c ****            {
1335:../Dave/Generated/src/FEE001/FEE001.c ****              BlkRslt->Status |= FEE001_BLK_INVALID;
1336:../Dave/Generated/src/FEE001/FEE001.c ****            }
1337:../Dave/Generated/src/FEE001/FEE001.c ****            BlkRslt->BlockCnt = BlockCnt;
1338:../Dave/Generated/src/FEE001/FEE001.c ****          }
1339:../Dave/Generated/src/FEE001/FEE001.c ****          /* Start of block not yet reached */
1340:../Dave/Generated/src/FEE001/FEE001.c ****          else
1341:../Dave/Generated/src/FEE001/FEE001.c ****          {
1342:../Dave/Generated/src/FEE001/FEE001.c ****            LoopStop = FALSE;
1343:../Dave/Generated/src/FEE001/FEE001.c ****          }
1344:../Dave/Generated/src/FEE001/FEE001.c ****        }
1345:../Dave/Generated/src/FEE001/FEE001.c ****        /* ECC error seen in the header part of the block pages */
1346:../Dave/Generated/src/FEE001/FEE001.c ****        else
1347:../Dave/Generated/src/FEE001/FEE001.c ****        {
1348:../Dave/Generated/src/FEE001/FEE001.c ****          LoopStop = FALSE;
1349:../Dave/Generated/src/FEE001/FEE001.c ****          BlkRslt->Status |= FEE001_BLK_ECC_ERROR;
1350:../Dave/Generated/src/FEE001/FEE001.c ****        }
1351:../Dave/Generated/src/FEE001/FEE001.c ****      }
1352:../Dave/Generated/src/FEE001/FEE001.c ****    }while(LoopStop == FALSE);
1353:../Dave/Generated/src/FEE001/FEE001.c **** 
1354:../Dave/Generated/src/FEE001/FEE001.c ****    return(RetVal);
1355:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lSrchCopy */
1356:../Dave/Generated/src/FEE001/FEE001.c **** 
1357:../Dave/Generated/src/FEE001/FEE001.c **** 
1358:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
1359:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void Fee_lInitGc(void)                                   **
1360:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1361:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      : Synchronous                                              **
1362:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1363:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      : Non reentrant                                            **
1364:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1365:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) : None                                                     **
1366:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1367:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out): None                                                     **
1368:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1369:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
1370:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1371:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall detect if there was any interruption **
1372:../Dave/Generated/src/FEE001/FEE001.c **** **                   in the ongoing FEE running state(Read/Write/GC). If yes, **
1373:../Dave/Generated/src/FEE001/FEE001.c **** **                   then this routine shall decide to run a state machine    **
1374:../Dave/Generated/src/FEE001/FEE001.c **** **                   to bring back the FEE to normal state.                   **
1375:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
1376:../Dave/Generated/src/FEE001/FEE001.c **** 
1377:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lInitGc(void)
1378:../Dave/Generated/src/FEE001/FEE001.c **** {
1379:../Dave/Generated/src/FEE001/FEE001.c ****     FEE001_StateDataType  *StateDataPtr;
1380:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
1381:../Dave/Generated/src/FEE001/FEE001.c ****     /* If both the bank state markers are in dirty state */
1382:../Dave/Generated/src/FEE001/FEE001.c ****     if( (StateDataPtr->FeeDirtyCount[0U]) && (StateDataPtr->FeeDirtyCount[1U]) )
1383:../Dave/Generated/src/FEE001/FEE001.c ****     {
1384:../Dave/Generated/src/FEE001/FEE001.c ****         StateDataPtr->FeeInitGCState = 0xDDU;
1385:../Dave/Generated/src/FEE001/FEE001.c **** 
1386:../Dave/Generated/src/FEE001/FEE001.c ****         Fee_lInitllegalStateMachine();
1387:../Dave/Generated/src/FEE001/FEE001.c ****     }
1388:../Dave/Generated/src/FEE001/FEE001.c ****     /* If Bank0 state marker is in dirty state */
1389:../Dave/Generated/src/FEE001/FEE001.c ****     else if( StateDataPtr->FeeDirtyCount[0U] )
1390:../Dave/Generated/src/FEE001/FEE001.c ****     {
1391:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState &= 0x0FU;
1392:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState |= 0xD0U;
1393:../Dave/Generated/src/FEE001/FEE001.c **** 
1394:../Dave/Generated/src/FEE001/FEE001.c ****     	Fee_lInitDirtyStateMachine();
1395:../Dave/Generated/src/FEE001/FEE001.c ****     }
1396:../Dave/Generated/src/FEE001/FEE001.c ****     /* If Bank1 state marker is in dirty state */
1397:../Dave/Generated/src/FEE001/FEE001.c ****     else if( StateDataPtr->FeeDirtyCount[1U] )
1398:../Dave/Generated/src/FEE001/FEE001.c ****     {
1399:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState &= 0xF0U;
1400:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState |= 0x0DU;
1401:../Dave/Generated/src/FEE001/FEE001.c **** 
1402:../Dave/Generated/src/FEE001/FEE001.c ****     	Fee_lInitDirtyStateMachine();
1403:../Dave/Generated/src/FEE001/FEE001.c ****     }
1404:../Dave/Generated/src/FEE001/FEE001.c ****     /* If both the banks have valid state markers */
1405:../Dave/Generated/src/FEE001/FEE001.c ****     else
1406:../Dave/Generated/src/FEE001/FEE001.c ****     {
1407:../Dave/Generated/src/FEE001/FEE001.c ****     	Fee_lInitNormalStateMachine();
1408:../Dave/Generated/src/FEE001/FEE001.c ****     }
1409:../Dave/Generated/src/FEE001/FEE001.c **** 
1410:../Dave/Generated/src/FEE001/FEE001.c **** }
1411:../Dave/Generated/src/FEE001/FEE001.c **** 
1412:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
1413:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void Fee_lInitllegalStateMachine(void)                   **
1414:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1415:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      : Synchronous                                              **
1416:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1417:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      : Non reentrant                                            **
1418:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1419:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) : None                                                     **
1420:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1421:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out): None                                                     **
1422:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1423:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
1424:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1425:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall address the illegal state to upper   **
1426:../Dave/Generated/src/FEE001/FEE001.c **** **                   layer or erase all flash and start from fresh depending  **
1427:../Dave/Generated/src/FEE001/FEE001.c **** **                   upon the user configuration                              **
1428:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
1429:../Dave/Generated/src/FEE001/FEE001.c **** 
1430:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lInitllegalStateMachine(void)
1431:../Dave/Generated/src/FEE001/FEE001.c **** {
1432:../Dave/Generated/src/FEE001/FEE001.c ****     FEE001_StateDataType  *StateDataPtr;
1433:../Dave/Generated/src/FEE001/FEE001.c **** 
1434:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
1435:../Dave/Generated/src/FEE001/FEE001.c **** 
1436:../Dave/Generated/src/FEE001/FEE001.c ****     /* Any state apart from the normal states is considered as
1437:../Dave/Generated/src/FEE001/FEE001.c ****        Illegal state
1438:../Dave/Generated/src/FEE001/FEE001.c ****        Next operation = Start Prepare DFlash (Only if the configuration
1439:../Dave/Generated/src/FEE001/FEE001.c ****                    option Erase all is TRUE)
1440:../Dave/Generated/src/FEE001/FEE001.c ****        IF Configuration Option is FALSE
1441:../Dave/Generated/src/FEE001/FEE001.c ****        Next Operation = Report Fail state
1442:../Dave/Generated/src/FEE001/FEE001.c ****     */
1443:../Dave/Generated/src/FEE001/FEE001.c ****     if(FEE001_CfgPtr->FeeEraseAllEnable == 1U)
1444:../Dave/Generated/src/FEE001/FEE001.c ****     {
1445:../Dave/Generated/src/FEE001/FEE001.c ****       /* Change the current Bank to Bank0 */
1446:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
1447:../Dave/Generated/src/FEE001/FEE001.c **** 
1448:../Dave/Generated/src/FEE001/FEE001.c ****       /* Update the Bank related global variables */
1449:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lUpdateCurrBankInfo();
1450:../Dave/Generated/src/FEE001/FEE001.c **** 
1451:../Dave/Generated/src/FEE001/FEE001.c ****       /* Update the GC state as Bank-0 Erase Completed state */
1452:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_FF;
1453:../Dave/Generated/src/FEE001/FEE001.c **** 
1454:../Dave/Generated/src/FEE001/FEE001.c ****       /* Start Prepare DFlash routine to build FEE base  */
1455:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lPrepareDFlash();
1456:../Dave/Generated/src/FEE001/FEE001.c **** 
1457:../Dave/Generated/src/FEE001/FEE001.c ****       /* Update the RAM Cache Table with the written blocks of data
1458:../Dave/Generated/src/FEE001/FEE001.c ****         Update Block Consistency, Physical Start Address and Valid
1459:../Dave/Generated/src/FEE001/FEE001.c ****         information against each of the blocks.
1460:../Dave/Generated/src/FEE001/FEE001.c ****       */
1461:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lUpdateCache();
1462:../Dave/Generated/src/FEE001/FEE001.c **** 
1463:../Dave/Generated/src/FEE001/FEE001.c ****     }
1464:../Dave/Generated/src/FEE001/FEE001.c ****     else
1465:../Dave/Generated/src/FEE001/FEE001.c ****     {
1466:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1467:../Dave/Generated/src/FEE001/FEE001.c ****     }
1468:../Dave/Generated/src/FEE001/FEE001.c **** 
1469:../Dave/Generated/src/FEE001/FEE001.c **** }
1470:../Dave/Generated/src/FEE001/FEE001.c **** 
1471:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
1472:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void Fee_lInitDirtyStateMachine(void)                    **
1473:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1474:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      : Synchronous                                              **
1475:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1476:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      : Non reentrant                                            **
1477:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1478:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) : None                                                     **
1479:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1480:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out): None                                                     **
1481:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1482:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
1483:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1484:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall address the dirty state recovery     **
1485:../Dave/Generated/src/FEE001/FEE001.c **** **                   mechanism by erasing and rewriting states                **
1486:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
1487:../Dave/Generated/src/FEE001/FEE001.c **** 
1488:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lInitDirtyStateMachine(void)
1489:../Dave/Generated/src/FEE001/FEE001.c **** {
1490:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType  *StateDataPtr;
1491:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001Status_Type  Status;
1492:../Dave/Generated/src/FEE001/FEE001.c **** 
1493:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
1494:../Dave/Generated/src/FEE001/FEE001.c **** 
1495:../Dave/Generated/src/FEE001/FEE001.c ****    switch (StateDataPtr->FeeInitGCState)
1496:../Dave/Generated/src/FEE001/FEE001.c ****    {
1497:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_VALID_CORRUPT_2D:
1498:../Dave/Generated/src/FEE001/FEE001.c **** 
1499:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank1 */
1500:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
1501:../Dave/Generated/src/FEE001/FEE001.c **** 
1502:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1503:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1504:../Dave/Generated/src/FEE001/FEE001.c **** 
1505:../Dave/Generated/src/FEE001/FEE001.c ****             /* Erase the previous redundant bank */
1506:../Dave/Generated/src/FEE001/FEE001.c ****             Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
1507:../Dave/Generated/src/FEE001/FEE001.c **** 
1508:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
1509:../Dave/Generated/src/FEE001/FEE001.c ****             {
1510:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lSetMarkerBlockBuffer();
1511:../Dave/Generated/src/FEE001/FEE001.c **** 
1512:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Write formatted state to the erased bank (2E)  */
1513:../Dave/Generated/src/FEE001/FEE001.c ****                  Status = Fee_lGCWrite((uint32_t)
1514:../Dave/Generated/src/FEE001/FEE001.c ****                                          (StateDataPtr->FeeGcDestAddr +
1515:../Dave/Generated/src/FEE001/FEE001.c ****                                               FEE001_MARK_END_ERASE_OFFSET));
1516:../Dave/Generated/src/FEE001/FEE001.c ****                  if(Status == FEE001_COMPLETE)
1517:../Dave/Generated/src/FEE001/FEE001.c ****                  {
1518:../Dave/Generated/src/FEE001/FEE001.c ****                    /* Update the RAM Cache Table with the written blocks of data
1519:../Dave/Generated/src/FEE001/FEE001.c ****                       Update Block Consistency, Physical Start Address and Valid
1520:../Dave/Generated/src/FEE001/FEE001.c ****                       information against each of the blocks.
1521:../Dave/Generated/src/FEE001/FEE001.c ****                    */
1522:../Dave/Generated/src/FEE001/FEE001.c ****                    Fee_lUpdateCache();
1523:../Dave/Generated/src/FEE001/FEE001.c **** 
1524:../Dave/Generated/src/FEE001/FEE001.c ****                    StateDataPtr->FeeGcState = FEE001_GC_IDLE;
1525:../Dave/Generated/src/FEE001/FEE001.c ****                  }
1526:../Dave/Generated/src/FEE001/FEE001.c ****                  else
1527:../Dave/Generated/src/FEE001/FEE001.c ****                  {
1528:../Dave/Generated/src/FEE001/FEE001.c ****                    StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1529:../Dave/Generated/src/FEE001/FEE001.c ****                  }
1530:../Dave/Generated/src/FEE001/FEE001.c ****             }
1531:../Dave/Generated/src/FEE001/FEE001.c ****             else
1532:../Dave/Generated/src/FEE001/FEE001.c ****             {
1533:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1534:../Dave/Generated/src/FEE001/FEE001.c ****             }
1535:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1536:../Dave/Generated/src/FEE001/FEE001.c **** 
1537:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_VALID_CORRUPT_D2:
1538:../Dave/Generated/src/FEE001/FEE001.c **** 
1539:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank1 */
1540:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
1541:../Dave/Generated/src/FEE001/FEE001.c **** 
1542:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1543:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1544:../Dave/Generated/src/FEE001/FEE001.c **** 
1545:../Dave/Generated/src/FEE001/FEE001.c ****             /* Erase the previous redundant bank */
1546:../Dave/Generated/src/FEE001/FEE001.c ****             Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
1547:../Dave/Generated/src/FEE001/FEE001.c **** 
1548:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
1549:../Dave/Generated/src/FEE001/FEE001.c ****             {
1550:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lSetMarkerBlockBuffer();
1551:../Dave/Generated/src/FEE001/FEE001.c **** 
1552:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Write formatted state to the erased bank (E2)  */
1553:../Dave/Generated/src/FEE001/FEE001.c ****                  Status = Fee_lGCWrite((uint32_t)
1554:../Dave/Generated/src/FEE001/FEE001.c ****                                          (StateDataPtr->FeeGcDestAddr +
1555:../Dave/Generated/src/FEE001/FEE001.c ****                                               FEE001_MARK_END_ERASE_OFFSET));
1556:../Dave/Generated/src/FEE001/FEE001.c ****                  if(Status == FEE001_COMPLETE)
1557:../Dave/Generated/src/FEE001/FEE001.c ****                  {
1558:../Dave/Generated/src/FEE001/FEE001.c ****                    /* Update the RAM Cache Table with the written blocks of data
1559:../Dave/Generated/src/FEE001/FEE001.c ****                       Update Block Consistency, Physical Start Address and Valid
1560:../Dave/Generated/src/FEE001/FEE001.c ****                       information against each of the blocks.
1561:../Dave/Generated/src/FEE001/FEE001.c ****                    */
1562:../Dave/Generated/src/FEE001/FEE001.c ****                    Fee_lUpdateCache();
1563:../Dave/Generated/src/FEE001/FEE001.c **** 
1564:../Dave/Generated/src/FEE001/FEE001.c ****                    StateDataPtr->FeeGcState = FEE001_GC_IDLE;
1565:../Dave/Generated/src/FEE001/FEE001.c ****                  }
1566:../Dave/Generated/src/FEE001/FEE001.c ****                  else
1567:../Dave/Generated/src/FEE001/FEE001.c ****                  {
1568:../Dave/Generated/src/FEE001/FEE001.c ****                    StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1569:../Dave/Generated/src/FEE001/FEE001.c ****                  }
1570:../Dave/Generated/src/FEE001/FEE001.c ****             }
1571:../Dave/Generated/src/FEE001/FEE001.c ****             else
1572:../Dave/Generated/src/FEE001/FEE001.c ****             {
1573:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1574:../Dave/Generated/src/FEE001/FEE001.c ****             }
1575:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1576:../Dave/Generated/src/FEE001/FEE001.c **** 
1577:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_COPIED_CORRUPT_AD:
1578:../Dave/Generated/src/FEE001/FEE001.c **** 
1579:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank1 */
1580:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
1581:../Dave/Generated/src/FEE001/FEE001.c **** 
1582:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1583:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1584:../Dave/Generated/src/FEE001/FEE001.c **** 
1585:../Dave/Generated/src/FEE001/FEE001.c ****             /* Set the marker blocks with copy completed state */
1586:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lSetMarkerPageBuffer(FEE001_COPY_COMPLETED_STATE);
1587:../Dave/Generated/src/FEE001/FEE001.c **** 
1588:../Dave/Generated/src/FEE001/FEE001.c ****             /* Clear all error status flags before flash operation*/
1589:../Dave/Generated/src/FEE001/FEE001.c ****             FLASH003_ClearStatus();
1590:../Dave/Generated/src/FEE001/FEE001.c ****             
1591:../Dave/Generated/src/FEE001/FEE001.c ****             /* Erase the Marker Page of Bank1, program the page with the state
1592:../Dave/Generated/src/FEE001/FEE001.c ****              * called '0' and verify the written contents*/
1593:../Dave/Generated/src/FEE001/FEE001.c ****             Status = (FEE001Status_Type)FLASH003_ProgVerifyPage
1594:../Dave/Generated/src/FEE001/FEE001.c ****                           (StateDataPtr->FeeGcDestAddr,
1595:../Dave/Generated/src/FEE001/FEE001.c ****              		        (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
1596:../Dave/Generated/src/FEE001/FEE001.c **** 
1597:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
1598:../Dave/Generated/src/FEE001/FEE001.c ****             {
1599:../Dave/Generated/src/FEE001/FEE001.c ****                 /* Update the GC state as write next bank valid */
1600:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID ;
1601:../Dave/Generated/src/FEE001/FEE001.c **** 
1602:../Dave/Generated/src/FEE001/FEE001.c ****                 /* Update the RAM Cache Table with the written blocks of data
1603:../Dave/Generated/src/FEE001/FEE001.c ****                    Update Block Consistency, Physical Start Address and Valid
1604:../Dave/Generated/src/FEE001/FEE001.c ****                    information against each of the blocks.
1605:../Dave/Generated/src/FEE001/FEE001.c ****                 */
1606:../Dave/Generated/src/FEE001/FEE001.c ****                 Fee_lUpdateCache();
1607:../Dave/Generated/src/FEE001/FEE001.c **** 
1608:../Dave/Generated/src/FEE001/FEE001.c ****                 /* Start Garbage Collection */
1609:../Dave/Generated/src/FEE001/FEE001.c ****                 Fee_lGarbageCollection();
1610:../Dave/Generated/src/FEE001/FEE001.c ****             }
1611:../Dave/Generated/src/FEE001/FEE001.c ****             else
1612:../Dave/Generated/src/FEE001/FEE001.c ****             {
1613:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1614:../Dave/Generated/src/FEE001/FEE001.c ****             }
1615:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1616:../Dave/Generated/src/FEE001/FEE001.c **** 
1617:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_CORRUPT_COPIED_DA:
1618:../Dave/Generated/src/FEE001/FEE001.c **** 
1619:../Dave/Generated/src/FEE001/FEE001.c ****              /* Change the current Bank to Bank1 */
1620:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
1621:../Dave/Generated/src/FEE001/FEE001.c **** 
1622:../Dave/Generated/src/FEE001/FEE001.c ****              /* Update the Bank related global variables */
1623:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
1624:../Dave/Generated/src/FEE001/FEE001.c **** 
1625:../Dave/Generated/src/FEE001/FEE001.c ****              /* Set the marker blocks with copy completed state */
1626:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_COPY_COMPLETED_STATE);
1627:../Dave/Generated/src/FEE001/FEE001.c **** 
1628:../Dave/Generated/src/FEE001/FEE001.c ****              /* Clear all error status flags before flash operation*/
1629:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
1630:../Dave/Generated/src/FEE001/FEE001.c ****              
1631:../Dave/Generated/src/FEE001/FEE001.c ****              /* Erase the Marker Page of Bank0, program the page with the state
1632:../Dave/Generated/src/FEE001/FEE001.c ****               * called '0' and verify the written contents*/
1633:../Dave/Generated/src/FEE001/FEE001.c ****              Status = (FEE001Status_Type)FLASH003_ProgVerifyPage
1634:../Dave/Generated/src/FEE001/FEE001.c ****                            (StateDataPtr->FeeGcDestAddr,
1635:../Dave/Generated/src/FEE001/FEE001.c ****              		        (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
1636:../Dave/Generated/src/FEE001/FEE001.c **** 
1637:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
1638:../Dave/Generated/src/FEE001/FEE001.c ****              {
1639:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the GC state as write next bank valid */
1640:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID ;
1641:../Dave/Generated/src/FEE001/FEE001.c **** 
1642:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the RAM Cache Table with the written blocks of data
1643:../Dave/Generated/src/FEE001/FEE001.c ****                     Update Block Consistency, Physical Start Address and Valid
1644:../Dave/Generated/src/FEE001/FEE001.c ****                     information against each of the blocks.
1645:../Dave/Generated/src/FEE001/FEE001.c ****                  */
1646:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCache();
1647:../Dave/Generated/src/FEE001/FEE001.c **** 
1648:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Start Garbage Collection */
1649:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lGarbageCollection();
1650:../Dave/Generated/src/FEE001/FEE001.c ****              }
1651:../Dave/Generated/src/FEE001/FEE001.c ****              else
1652:../Dave/Generated/src/FEE001/FEE001.c ****              {
1653:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1654:../Dave/Generated/src/FEE001/FEE001.c ****              }
1655:../Dave/Generated/src/FEE001/FEE001.c ****              break;
1656:../Dave/Generated/src/FEE001/FEE001.c **** 
1657:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_COMPLETED_CORRUPT_0D:
1658:../Dave/Generated/src/FEE001/FEE001.c **** 
1659:../Dave/Generated/src/FEE001/FEE001.c ****              /* Change the current Bank to Bank1 */
1660:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
1661:../Dave/Generated/src/FEE001/FEE001.c **** 
1662:../Dave/Generated/src/FEE001/FEE001.c ****              /* Update the Bank related global variables */
1663:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
1664:../Dave/Generated/src/FEE001/FEE001.c **** 
1665:../Dave/Generated/src/FEE001/FEE001.c ****              /* Set the marker blocks with next bank valid state */
1666:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_VALID_STATE);
1667:../Dave/Generated/src/FEE001/FEE001.c **** 
1668:../Dave/Generated/src/FEE001/FEE001.c ****              /* Clear all error status flags before flash operation*/
1669:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
1670:../Dave/Generated/src/FEE001/FEE001.c ****              
1671:../Dave/Generated/src/FEE001/FEE001.c ****              /* Erase the Marker Page of Bank1, program the page with the state
1672:../Dave/Generated/src/FEE001/FEE001.c ****               * called '0' and verify the written contents*/
1673:../Dave/Generated/src/FEE001/FEE001.c ****              Status = (FEE001Status_Type)FLASH003_ProgVerifyPage
1674:../Dave/Generated/src/FEE001/FEE001.c ****                          (StateDataPtr->FeeGcSrcAddr,
1675:../Dave/Generated/src/FEE001/FEE001.c ****               		       (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
1676:../Dave/Generated/src/FEE001/FEE001.c **** 
1677:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
1678:../Dave/Generated/src/FEE001/FEE001.c ****              {
1679:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the GC state as write next bank valid */
1680:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK ;
1681:../Dave/Generated/src/FEE001/FEE001.c **** 
1682:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the RAM Cache Table with the written blocks of data
1683:../Dave/Generated/src/FEE001/FEE001.c ****                     Update Block Consistency, Physical Start Address and Valid
1684:../Dave/Generated/src/FEE001/FEE001.c ****                     information against each of the blocks.
1685:../Dave/Generated/src/FEE001/FEE001.c ****                  */
1686:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCache();
1687:../Dave/Generated/src/FEE001/FEE001.c **** 
1688:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Start Garbage Collection */
1689:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lGarbageCollection();
1690:../Dave/Generated/src/FEE001/FEE001.c ****              }
1691:../Dave/Generated/src/FEE001/FEE001.c ****              else
1692:../Dave/Generated/src/FEE001/FEE001.c ****              {
1693:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1694:../Dave/Generated/src/FEE001/FEE001.c ****              }
1695:../Dave/Generated/src/FEE001/FEE001.c ****              break;
1696:../Dave/Generated/src/FEE001/FEE001.c **** 
1697:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_CORRUPT_COMPLETED_D0:
1698:../Dave/Generated/src/FEE001/FEE001.c **** 
1699:../Dave/Generated/src/FEE001/FEE001.c ****              /* Change the current Bank to Bank0 */
1700:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
1701:../Dave/Generated/src/FEE001/FEE001.c **** 
1702:../Dave/Generated/src/FEE001/FEE001.c ****              /* Update the Bank related global variables */
1703:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
1704:../Dave/Generated/src/FEE001/FEE001.c **** 
1705:../Dave/Generated/src/FEE001/FEE001.c ****              /* Set the marker blocks with next bank valid state */
1706:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_VALID_STATE);
1707:../Dave/Generated/src/FEE001/FEE001.c **** 
1708:../Dave/Generated/src/FEE001/FEE001.c ****              /* Clear all error status flags before flash operation*/
1709:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
1710:../Dave/Generated/src/FEE001/FEE001.c **** 
1711:../Dave/Generated/src/FEE001/FEE001.c ****              /* Erase the Marker Page of Bank1, program the page with the state
1712:../Dave/Generated/src/FEE001/FEE001.c ****               * called '0' and verify the written contents*/
1713:../Dave/Generated/src/FEE001/FEE001.c ****              Status = (FEE001Status_Type)FLASH003_ProgVerifyPage
1714:../Dave/Generated/src/FEE001/FEE001.c ****                            (StateDataPtr->FeeGcSrcAddr,
1715:../Dave/Generated/src/FEE001/FEE001.c ****               		       (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
1716:../Dave/Generated/src/FEE001/FEE001.c **** 
1717:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
1718:../Dave/Generated/src/FEE001/FEE001.c ****              {
1719:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the GC state as write next bank valid */
1720:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK ;
1721:../Dave/Generated/src/FEE001/FEE001.c **** 
1722:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the RAM Cache Table with the written blocks of data
1723:../Dave/Generated/src/FEE001/FEE001.c ****                     Update Block Consistency, Physical Start Address and Valid
1724:../Dave/Generated/src/FEE001/FEE001.c ****                     information against each of the blocks.
1725:../Dave/Generated/src/FEE001/FEE001.c ****                  */
1726:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCache();
1727:../Dave/Generated/src/FEE001/FEE001.c **** 
1728:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Start Garbage Collection */
1729:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lGarbageCollection();
1730:../Dave/Generated/src/FEE001/FEE001.c ****              }
1731:../Dave/Generated/src/FEE001/FEE001.c ****              else
1732:../Dave/Generated/src/FEE001/FEE001.c ****              {
1733:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1734:../Dave/Generated/src/FEE001/FEE001.c ****              }
1735:../Dave/Generated/src/FEE001/FEE001.c ****              break;
1736:../Dave/Generated/src/FEE001/FEE001.c **** 
1737:../Dave/Generated/src/FEE001/FEE001.c ****          default:
1738:../Dave/Generated/src/FEE001/FEE001.c **** 
1739:../Dave/Generated/src/FEE001/FEE001.c ****             /* Any state apart from the normal states is considered as
1740:../Dave/Generated/src/FEE001/FEE001.c ****                Illegal state
1741:../Dave/Generated/src/FEE001/FEE001.c ****             */
1742:../Dave/Generated/src/FEE001/FEE001.c ****     	      Fee_lInitllegalStateMachine();
1743:../Dave/Generated/src/FEE001/FEE001.c ****     	      break;
1744:../Dave/Generated/src/FEE001/FEE001.c ****    }
1745:../Dave/Generated/src/FEE001/FEE001.c **** }
1746:../Dave/Generated/src/FEE001/FEE001.c **** 
1747:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
1748:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void Fee_lInitNormalStateMachine(void)                   **
1749:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1750:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      : Synchronous                                              **
1751:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1752:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      : Non reentrant                                            **
1753:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1754:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) : None                                                     **
1755:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1756:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out): None                                                     **
1757:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1758:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
1759:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
1760:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This function shall detect if there was any interruption **
1761:../Dave/Generated/src/FEE001/FEE001.c **** **                   in the ongoing FEE running state(Read/Write/GC). If yes, **
1762:../Dave/Generated/src/FEE001/FEE001.c **** **                   then this routine shall get the DFLASH contents in the   **
1763:../Dave/Generated/src/FEE001/FEE001.c **** **                   normal state.                                            **
1764:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
1765:../Dave/Generated/src/FEE001/FEE001.c **** 
1766:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lInitNormalStateMachine(void)
1767:../Dave/Generated/src/FEE001/FEE001.c **** {
1768:../Dave/Generated/src/FEE001/FEE001.c ****      FEE001_StateDataType  *StateDataPtr;
1769:../Dave/Generated/src/FEE001/FEE001.c ****      FEE001Status_Type  Status;
1770:../Dave/Generated/src/FEE001/FEE001.c **** 
1771:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
1772:../Dave/Generated/src/FEE001/FEE001.c **** 
1773:../Dave/Generated/src/FEE001/FEE001.c ****      switch (StateDataPtr->FeeInitGCState)
1774:../Dave/Generated/src/FEE001/FEE001.c ****      {
1775:../Dave/Generated/src/FEE001/FEE001.c ****          /*
1776:../Dave/Generated/src/FEE001/FEE001.c ****             Normal Data write in Bank-0 interrupted state (2E)
1777:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation = Cache Update and get ready to accept new request
1778:../Dave/Generated/src/FEE001/FEE001.c ****          */
1779:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_NORMAL1:
1780:../Dave/Generated/src/FEE001/FEE001.c **** 
1781:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank0 */
1782:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
1783:../Dave/Generated/src/FEE001/FEE001.c **** 
1784:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1785:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1786:../Dave/Generated/src/FEE001/FEE001.c **** 
1787:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
1788:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
1789:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
1790:../Dave/Generated/src/FEE001/FEE001.c ****             */
1791:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
1792:../Dave/Generated/src/FEE001/FEE001.c **** 
1793:../Dave/Generated/src/FEE001/FEE001.c ****             /* Mark end of Garbage collection completion during Init
1794:../Dave/Generated/src/FEE001/FEE001.c ****                Set Garbage Collection state to Idle */
1795:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_IDLE;
1796:../Dave/Generated/src/FEE001/FEE001.c **** 
1797:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1798:../Dave/Generated/src/FEE001/FEE001.c **** 
1799:../Dave/Generated/src/FEE001/FEE001.c ****             /*
1800:../Dave/Generated/src/FEE001/FEE001.c ****                Data copy from Bank0 to Bank1 interrupted state (2A)
1801:../Dave/Generated/src/FEE001/FEE001.c ****                Next operation = Erasing Bank-1 and restart copy from Bank-0
1802:../Dave/Generated/src/FEE001/FEE001.c ****             */
1803:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_DATA_COPY1:
1804:../Dave/Generated/src/FEE001/FEE001.c **** 
1805:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank0 */
1806:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
1807:../Dave/Generated/src/FEE001/FEE001.c **** 
1808:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1809:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1810:../Dave/Generated/src/FEE001/FEE001.c **** 
1811:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as restart copy proccess */
1812:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_REQUESTED ;
1813:../Dave/Generated/src/FEE001/FEE001.c **** 
1814:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
1815:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
1816:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
1817:../Dave/Generated/src/FEE001/FEE001.c ****             */
1818:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
1819:../Dave/Generated/src/FEE001/FEE001.c **** 
1820:../Dave/Generated/src/FEE001/FEE001.c ****             /* Erase the previous redundant bank */
1821:../Dave/Generated/src/FEE001/FEE001.c ****             Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
1822:../Dave/Generated/src/FEE001/FEE001.c **** 
1823:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
1824:../Dave/Generated/src/FEE001/FEE001.c ****             {
1825:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lSetMarkerBlockBuffer();
1826:../Dave/Generated/src/FEE001/FEE001.c **** 
1827:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Write formatted state to the erased bank (2E)  */
1828:../Dave/Generated/src/FEE001/FEE001.c ****                  Status = Fee_lGCWrite((uint32_t)
1829:../Dave/Generated/src/FEE001/FEE001.c ****                                          (StateDataPtr->FeeGcDestAddr +
1830:../Dave/Generated/src/FEE001/FEE001.c ****                                               FEE001_MARK_END_ERASE_OFFSET));
1831:../Dave/Generated/src/FEE001/FEE001.c **** 
1832:../Dave/Generated/src/FEE001/FEE001.c ****                  if(Status == FEE001_COMPLETE)
1833:../Dave/Generated/src/FEE001/FEE001.c ****                  {
1834:../Dave/Generated/src/FEE001/FEE001.c ****                     /* Start Garbage Collection */
1835:../Dave/Generated/src/FEE001/FEE001.c ****                     Fee_lGarbageCollection();
1836:../Dave/Generated/src/FEE001/FEE001.c ****                  }
1837:../Dave/Generated/src/FEE001/FEE001.c ****                  else
1838:../Dave/Generated/src/FEE001/FEE001.c ****                  {
1839:../Dave/Generated/src/FEE001/FEE001.c ****                     StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1840:../Dave/Generated/src/FEE001/FEE001.c ****                  }
1841:../Dave/Generated/src/FEE001/FEE001.c **** 
1842:../Dave/Generated/src/FEE001/FEE001.c ****             }
1843:../Dave/Generated/src/FEE001/FEE001.c ****             else
1844:../Dave/Generated/src/FEE001/FEE001.c ****             {
1845:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1846:../Dave/Generated/src/FEE001/FEE001.c ****             }
1847:../Dave/Generated/src/FEE001/FEE001.c **** 
1848:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1849:../Dave/Generated/src/FEE001/FEE001.c **** 
1850:../Dave/Generated/src/FEE001/FEE001.c ****          /* Interrupted state after copy completion from Bank1 to Bank-0 (A0)
1851:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation = Writing Valid state into Bank-0
1852:../Dave/Generated/src/FEE001/FEE001.c ****          */
1853:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_COPY_COMPLETE1:
1854:../Dave/Generated/src/FEE001/FEE001.c **** 
1855:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank0 */
1856:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
1857:../Dave/Generated/src/FEE001/FEE001.c **** 
1858:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1859:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1860:../Dave/Generated/src/FEE001/FEE001.c **** 
1861:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as write next Bank valid */
1862:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID ;
1863:../Dave/Generated/src/FEE001/FEE001.c **** 
1864:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
1865:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
1866:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
1867:../Dave/Generated/src/FEE001/FEE001.c ****             */
1868:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
1869:../Dave/Generated/src/FEE001/FEE001.c **** 
1870:../Dave/Generated/src/FEE001/FEE001.c ****               /* Start Garbage Collection */
1871:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lGarbageCollection();
1872:../Dave/Generated/src/FEE001/FEE001.c **** 
1873:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1874:../Dave/Generated/src/FEE001/FEE001.c **** 
1875:../Dave/Generated/src/FEE001/FEE001.c ****          /* Interrupted state after writing valid state to Bank0 (20)
1876:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation = Erase of old redundant Bank-1 (2F)
1877:../Dave/Generated/src/FEE001/FEE001.c ****          */
1878:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_NEXT_VALID1:
1879:../Dave/Generated/src/FEE001/FEE001.c **** 
1880:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank0 */
1881:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
1882:../Dave/Generated/src/FEE001/FEE001.c **** 
1883:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1884:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1885:../Dave/Generated/src/FEE001/FEE001.c **** 
1886:../Dave/Generated/src/FEE001/FEE001.c ****                 /* Update the GC state as write next bank valid */
1887:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK ;
1888:../Dave/Generated/src/FEE001/FEE001.c **** 
1889:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
1890:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
1891:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
1892:../Dave/Generated/src/FEE001/FEE001.c ****             */
1893:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
1894:../Dave/Generated/src/FEE001/FEE001.c **** 
1895:../Dave/Generated/src/FEE001/FEE001.c ****             /* Start Garbage Collection */
1896:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lGarbageCollection();
1897:../Dave/Generated/src/FEE001/FEE001.c **** 
1898:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1899:../Dave/Generated/src/FEE001/FEE001.c **** 
1900:../Dave/Generated/src/FEE001/FEE001.c ****          /* Interrupted state after erase of old bank completed  (2F)
1901:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation = Mark erased Bank-1 with Formated state(2E)
1902:../Dave/Generated/src/FEE001/FEE001.c ****          */
1903:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_END_ERASE1:
1904:../Dave/Generated/src/FEE001/FEE001.c **** 
1905:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank0 */
1906:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
1907:../Dave/Generated/src/FEE001/FEE001.c **** 
1908:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1909:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1910:../Dave/Generated/src/FEE001/FEE001.c **** 
1911:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as Bank-0 Erase Completed state */
1912:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_MARK_END_ERASE1;
1913:../Dave/Generated/src/FEE001/FEE001.c **** 
1914:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
1915:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
1916:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
1917:../Dave/Generated/src/FEE001/FEE001.c ****             */
1918:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
1919:../Dave/Generated/src/FEE001/FEE001.c **** 
1920:../Dave/Generated/src/FEE001/FEE001.c ****             /* Start Garbage Collection */
1921:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lGarbageCollection();
1922:../Dave/Generated/src/FEE001/FEE001.c **** 
1923:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1924:../Dave/Generated/src/FEE001/FEE001.c **** 
1925:../Dave/Generated/src/FEE001/FEE001.c **** 
1926:../Dave/Generated/src/FEE001/FEE001.c ****          /* Normal Data write in Bank-1 interrupted state (E2)
1927:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation = Cache Update and get ready to accept new request
1928:../Dave/Generated/src/FEE001/FEE001.c ****          */
1929:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_NORMAL2:
1930:../Dave/Generated/src/FEE001/FEE001.c **** 
1931:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank1 */
1932:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
1933:../Dave/Generated/src/FEE001/FEE001.c **** 
1934:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1935:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1936:../Dave/Generated/src/FEE001/FEE001.c **** 
1937:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
1938:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
1939:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
1940:../Dave/Generated/src/FEE001/FEE001.c ****             */
1941:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
1942:../Dave/Generated/src/FEE001/FEE001.c **** 
1943:../Dave/Generated/src/FEE001/FEE001.c ****             /* Mark end of Garbage collection completion during Init */
1944:../Dave/Generated/src/FEE001/FEE001.c ****             /* Set Garbage Collection state to Idle */
1945:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_IDLE;
1946:../Dave/Generated/src/FEE001/FEE001.c **** 
1947:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1948:../Dave/Generated/src/FEE001/FEE001.c **** 
1949:../Dave/Generated/src/FEE001/FEE001.c ****          /* Data copy from Bank1 to Bank0 interrupted state (A2)
1950:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation = Erasing Bank-0 and restart copy from Bank-1
1951:../Dave/Generated/src/FEE001/FEE001.c ****          */
1952:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_DATA_COPY2:
1953:../Dave/Generated/src/FEE001/FEE001.c **** 
1954:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank1 */
1955:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
1956:../Dave/Generated/src/FEE001/FEE001.c **** 
1957:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
1958:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
1959:../Dave/Generated/src/FEE001/FEE001.c **** 
1960:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as restart copy proccess */
1961:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_REQUESTED;
1962:../Dave/Generated/src/FEE001/FEE001.c **** 
1963:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
1964:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
1965:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
1966:../Dave/Generated/src/FEE001/FEE001.c ****             */
1967:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
1968:../Dave/Generated/src/FEE001/FEE001.c **** 
1969:../Dave/Generated/src/FEE001/FEE001.c ****             /* Erase the previous redundant bank */
1970:../Dave/Generated/src/FEE001/FEE001.c ****             Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
1971:../Dave/Generated/src/FEE001/FEE001.c **** 
1972:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
1973:../Dave/Generated/src/FEE001/FEE001.c ****             {
1974:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lSetMarkerBlockBuffer();
1975:../Dave/Generated/src/FEE001/FEE001.c **** 
1976:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Write formatted state to the erased bank (E2)  */
1977:../Dave/Generated/src/FEE001/FEE001.c ****                  Status = Fee_lGCWrite((uint32_t)
1978:../Dave/Generated/src/FEE001/FEE001.c ****                                          (StateDataPtr->FeeGcDestAddr +
1979:../Dave/Generated/src/FEE001/FEE001.c ****                                               FEE001_MARK_END_ERASE_OFFSET));
1980:../Dave/Generated/src/FEE001/FEE001.c ****                  if(Status == FEE001_COMPLETE)
1981:../Dave/Generated/src/FEE001/FEE001.c ****                  {
1982:../Dave/Generated/src/FEE001/FEE001.c ****                       /* Start Garbage Collection */
1983:../Dave/Generated/src/FEE001/FEE001.c ****                       Fee_lGarbageCollection();
1984:../Dave/Generated/src/FEE001/FEE001.c ****                  }
1985:../Dave/Generated/src/FEE001/FEE001.c ****                  else
1986:../Dave/Generated/src/FEE001/FEE001.c ****                  {
1987:../Dave/Generated/src/FEE001/FEE001.c ****                     StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1988:../Dave/Generated/src/FEE001/FEE001.c ****                  }
1989:../Dave/Generated/src/FEE001/FEE001.c ****             }
1990:../Dave/Generated/src/FEE001/FEE001.c ****             else
1991:../Dave/Generated/src/FEE001/FEE001.c ****             {
1992:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
1993:../Dave/Generated/src/FEE001/FEE001.c ****             }
1994:../Dave/Generated/src/FEE001/FEE001.c ****             break;
1995:../Dave/Generated/src/FEE001/FEE001.c **** 
1996:../Dave/Generated/src/FEE001/FEE001.c ****          /* Interrupted state after copy completion from Bank0 to Bank1 (0A)
1997:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation = Writing Valid state into Bank-1
1998:../Dave/Generated/src/FEE001/FEE001.c ****          */
1999:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_COPY_COMPLETE2:
2000:../Dave/Generated/src/FEE001/FEE001.c **** 
2001:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank1 */
2002:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
2003:../Dave/Generated/src/FEE001/FEE001.c **** 
2004:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
2005:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
2006:../Dave/Generated/src/FEE001/FEE001.c **** 
2007:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as write next bank valid */
2008:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID;
2009:../Dave/Generated/src/FEE001/FEE001.c **** 
2010:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
2011:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
2012:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
2013:../Dave/Generated/src/FEE001/FEE001.c ****             */
2014:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
2015:../Dave/Generated/src/FEE001/FEE001.c **** 
2016:../Dave/Generated/src/FEE001/FEE001.c ****             /* Start Garbage Collection */
2017:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lGarbageCollection();
2018:../Dave/Generated/src/FEE001/FEE001.c ****             break;
2019:../Dave/Generated/src/FEE001/FEE001.c **** 
2020:../Dave/Generated/src/FEE001/FEE001.c ****          /* Interrupted state after writing valid state to Bank1 (02)
2021:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation = Erase of old redundant Bank-0 (F2)
2022:../Dave/Generated/src/FEE001/FEE001.c ****          */
2023:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_NEXT_VALID2:
2024:../Dave/Generated/src/FEE001/FEE001.c **** 
2025:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank1 */
2026:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
2027:../Dave/Generated/src/FEE001/FEE001.c **** 
2028:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
2029:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
2030:../Dave/Generated/src/FEE001/FEE001.c **** 
2031:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as write next bank valid */
2032:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK;
2033:../Dave/Generated/src/FEE001/FEE001.c **** 
2034:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
2035:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
2036:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
2037:../Dave/Generated/src/FEE001/FEE001.c ****             */
2038:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
2039:../Dave/Generated/src/FEE001/FEE001.c **** 
2040:../Dave/Generated/src/FEE001/FEE001.c ****             /* Start Garbage Collection */
2041:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lGarbageCollection();
2042:../Dave/Generated/src/FEE001/FEE001.c ****             break;
2043:../Dave/Generated/src/FEE001/FEE001.c **** 
2044:../Dave/Generated/src/FEE001/FEE001.c ****          /* Interrupted state after erase of old bank completed  (F2)
2045:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation = Mark erased Bank-0 with Formated state(E2)
2046:../Dave/Generated/src/FEE001/FEE001.c ****          */
2047:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_END_ERASE2:
2048:../Dave/Generated/src/FEE001/FEE001.c **** 
2049:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank1 */
2050:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
2051:../Dave/Generated/src/FEE001/FEE001.c **** 
2052:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
2053:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
2054:../Dave/Generated/src/FEE001/FEE001.c **** 
2055:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as Bank-0 Erase Completed state */
2056:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_MARK_END_ERASE1;
2057:../Dave/Generated/src/FEE001/FEE001.c **** 
2058:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
2059:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
2060:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
2061:../Dave/Generated/src/FEE001/FEE001.c ****             */
2062:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
2063:../Dave/Generated/src/FEE001/FEE001.c **** 
2064:../Dave/Generated/src/FEE001/FEE001.c ****             /* Start Garbage Collection */
2065:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lGarbageCollection();
2066:../Dave/Generated/src/FEE001/FEE001.c ****             break;
2067:../Dave/Generated/src/FEE001/FEE001.c **** 
2068:../Dave/Generated/src/FEE001/FEE001.c ****          /* Interrupted state after erase of both banks completed (FF)
2069:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation =Start Prepare DFlash (Erase all and start fresh)
2070:../Dave/Generated/src/FEE001/FEE001.c ****          */
2071:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_ALL_ERASED:
2072:../Dave/Generated/src/FEE001/FEE001.c **** 
2073:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank0 */
2074:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
2075:../Dave/Generated/src/FEE001/FEE001.c **** 
2076:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
2077:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
2078:../Dave/Generated/src/FEE001/FEE001.c **** 
2079:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as Bank-0 Erase Completed state */
2080:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_FF;
2081:../Dave/Generated/src/FEE001/FEE001.c **** 
2082:../Dave/Generated/src/FEE001/FEE001.c ****               /* Start Prepare DFlash routine to build FEE base  */
2083:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lPrepareDFlash();
2084:../Dave/Generated/src/FEE001/FEE001.c **** 
2085:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
2086:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
2087:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
2088:../Dave/Generated/src/FEE001/FEE001.c ****             */
2089:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
2090:../Dave/Generated/src/FEE001/FEE001.c **** 
2091:../Dave/Generated/src/FEE001/FEE001.c **** 
2092:../Dave/Generated/src/FEE001/FEE001.c ****             break;
2093:../Dave/Generated/src/FEE001/FEE001.c **** 
2094:../Dave/Generated/src/FEE001/FEE001.c ****          /* Interrupted state after marking of Bank-0 Valid inside
2095:../Dave/Generated/src/FEE001/FEE001.c ****             prepare DFlash state machine (7F)
2096:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation =Start Prepare DFlash (Erase all and start fresh)
2097:../Dave/Generated/src/FEE001/FEE001.c ****          */
2098:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_PREPDFLASH_MARK_7F:
2099:../Dave/Generated/src/FEE001/FEE001.c **** 
2100:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank0 */
2101:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
2102:../Dave/Generated/src/FEE001/FEE001.c **** 
2103:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
2104:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
2105:../Dave/Generated/src/FEE001/FEE001.c **** 
2106:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as Bank-0 Erase Completed state */
2107:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_FF;
2108:../Dave/Generated/src/FEE001/FEE001.c **** 
2109:../Dave/Generated/src/FEE001/FEE001.c ****               /* Start Prepare DFlash routine to build FEE base  */
2110:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lPrepareDFlash();
2111:../Dave/Generated/src/FEE001/FEE001.c **** 
2112:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
2113:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
2114:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
2115:../Dave/Generated/src/FEE001/FEE001.c ****             */
2116:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
2117:../Dave/Generated/src/FEE001/FEE001.c **** 
2118:../Dave/Generated/src/FEE001/FEE001.c ****             break;
2119:../Dave/Generated/src/FEE001/FEE001.c **** 
2120:../Dave/Generated/src/FEE001/FEE001.c ****          /* Interrupted state after marking of Bank-0 "Data available " inside
2121:../Dave/Generated/src/FEE001/FEE001.c ****             prepare DFlash state machine (3F)
2122:../Dave/Generated/src/FEE001/FEE001.c ****             Next operation =Start Prepare DFlash (Erase all and start fresh)
2123:../Dave/Generated/src/FEE001/FEE001.c ****          */
2124:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_PREPDFLASH_MARK_3F:
2125:../Dave/Generated/src/FEE001/FEE001.c **** 
2126:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank0 */
2127:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
2128:../Dave/Generated/src/FEE001/FEE001.c **** 
2129:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
2130:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
2131:../Dave/Generated/src/FEE001/FEE001.c **** 
2132:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the GC state as Bank-0 Erase Completed state */
2133:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_FF;
2134:../Dave/Generated/src/FEE001/FEE001.c **** 
2135:../Dave/Generated/src/FEE001/FEE001.c ****               /* Start Prepare DFlash routine to build FEE base  */
2136:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lPrepareDFlash();
2137:../Dave/Generated/src/FEE001/FEE001.c **** 
2138:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the RAM Cache Table with the written blocks of data
2139:../Dave/Generated/src/FEE001/FEE001.c ****                Update Block Consistency, Physical Start Address and Valid
2140:../Dave/Generated/src/FEE001/FEE001.c ****                information against each of the blocks.
2141:../Dave/Generated/src/FEE001/FEE001.c ****             */
2142:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
2143:../Dave/Generated/src/FEE001/FEE001.c **** 
2144:../Dave/Generated/src/FEE001/FEE001.c ****             break;
2145:../Dave/Generated/src/FEE001/FEE001.c **** 
2146:../Dave/Generated/src/FEE001/FEE001.c ****          /* Any state apart from the normal states is considered as
2147:../Dave/Generated/src/FEE001/FEE001.c ****             Illegal state
2148:../Dave/Generated/src/FEE001/FEE001.c ****          */
2149:../Dave/Generated/src/FEE001/FEE001.c **** 
2150:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_COPIED_INT_AF:
2151:../Dave/Generated/src/FEE001/FEE001.c **** 
2152:../Dave/Generated/src/FEE001/FEE001.c ****             /* Change the current Bank to Bank1 */
2153:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
2154:../Dave/Generated/src/FEE001/FEE001.c **** 
2155:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the Bank related global variables */
2156:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
2157:../Dave/Generated/src/FEE001/FEE001.c **** 
2158:../Dave/Generated/src/FEE001/FEE001.c ****             /* Set the marker blocks with copy completed state */
2159:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lSetMarkerPageBuffer(FEE001_COPY_COMPLETED_STATE);
2160:../Dave/Generated/src/FEE001/FEE001.c **** 
2161:../Dave/Generated/src/FEE001/FEE001.c ****             /* Clear all error status flags before flash operation*/
2162:../Dave/Generated/src/FEE001/FEE001.c ****             FLASH003_ClearStatus();
2163:../Dave/Generated/src/FEE001/FEE001.c **** 
2164:../Dave/Generated/src/FEE001/FEE001.c ****             /* Erase the Marker Page of Bank1, program the page with the state
2165:../Dave/Generated/src/FEE001/FEE001.c ****              * called '0' and verify the written contents*/
2166:../Dave/Generated/src/FEE001/FEE001.c ****             Status = (FEE001Status_Type)FLASH003_ProgVerifyPage
2167:../Dave/Generated/src/FEE001/FEE001.c ****                           (StateDataPtr->FeeGcDestAddr,
2168:../Dave/Generated/src/FEE001/FEE001.c ****              		       (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
2169:../Dave/Generated/src/FEE001/FEE001.c **** 
2170:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
2171:../Dave/Generated/src/FEE001/FEE001.c ****             {
2172:../Dave/Generated/src/FEE001/FEE001.c ****                 /* Update the GC state as write next bank valid */
2173:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID ;
2174:../Dave/Generated/src/FEE001/FEE001.c **** 
2175:../Dave/Generated/src/FEE001/FEE001.c ****                 /* Update the RAM Cache Table with the written blocks of data
2176:../Dave/Generated/src/FEE001/FEE001.c ****                    Update Block Consistency, Physical Start Address and Valid
2177:../Dave/Generated/src/FEE001/FEE001.c ****                    information against each of the blocks.
2178:../Dave/Generated/src/FEE001/FEE001.c ****                 */
2179:../Dave/Generated/src/FEE001/FEE001.c ****                 Fee_lUpdateCache();
2180:../Dave/Generated/src/FEE001/FEE001.c **** 
2181:../Dave/Generated/src/FEE001/FEE001.c ****                 /* Start Garbage Collection */
2182:../Dave/Generated/src/FEE001/FEE001.c ****                 Fee_lGarbageCollection();
2183:../Dave/Generated/src/FEE001/FEE001.c ****             }
2184:../Dave/Generated/src/FEE001/FEE001.c ****             else
2185:../Dave/Generated/src/FEE001/FEE001.c ****             {
2186:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2187:../Dave/Generated/src/FEE001/FEE001.c ****             }
2188:../Dave/Generated/src/FEE001/FEE001.c ****             break;
2189:../Dave/Generated/src/FEE001/FEE001.c **** 
2190:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_INT_COPIED_FA:
2191:../Dave/Generated/src/FEE001/FEE001.c **** 
2192:../Dave/Generated/src/FEE001/FEE001.c ****              /* Change the current Bank to Bank1 */
2193:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
2194:../Dave/Generated/src/FEE001/FEE001.c **** 
2195:../Dave/Generated/src/FEE001/FEE001.c ****              /* Update the Bank related global variables */
2196:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
2197:../Dave/Generated/src/FEE001/FEE001.c **** 
2198:../Dave/Generated/src/FEE001/FEE001.c ****              /* Set the marker blocks with copy completed state */
2199:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_COPY_COMPLETED_STATE);
2200:../Dave/Generated/src/FEE001/FEE001.c **** 
2201:../Dave/Generated/src/FEE001/FEE001.c ****              /* Clear all error status flags before flash operation*/
2202:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
2203:../Dave/Generated/src/FEE001/FEE001.c **** 
2204:../Dave/Generated/src/FEE001/FEE001.c ****              /* Erase the Marker Page of Bank1, program the page with the state
2205:../Dave/Generated/src/FEE001/FEE001.c ****               * called '0' and verify the written contents*/
2206:../Dave/Generated/src/FEE001/FEE001.c ****              Status = (FEE001Status_Type)FLASH003_ProgVerifyPage
2207:../Dave/Generated/src/FEE001/FEE001.c ****                            (StateDataPtr->FeeGcDestAddr,
2208:../Dave/Generated/src/FEE001/FEE001.c ****              		       (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
2209:../Dave/Generated/src/FEE001/FEE001.c **** 
2210:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
2211:../Dave/Generated/src/FEE001/FEE001.c ****              {
2212:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the GC state as write next bank valid */
2213:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID ;
2214:../Dave/Generated/src/FEE001/FEE001.c **** 
2215:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the RAM Cache Table with the written blocks of data
2216:../Dave/Generated/src/FEE001/FEE001.c ****                     Update Block Consistency, Physical Start Address and Valid
2217:../Dave/Generated/src/FEE001/FEE001.c ****                     information against each of the blocks.
2218:../Dave/Generated/src/FEE001/FEE001.c ****                  */
2219:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCache();
2220:../Dave/Generated/src/FEE001/FEE001.c **** 
2221:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Start Garbage Collection */
2222:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lGarbageCollection();
2223:../Dave/Generated/src/FEE001/FEE001.c ****              }
2224:../Dave/Generated/src/FEE001/FEE001.c ****              else
2225:../Dave/Generated/src/FEE001/FEE001.c ****              {
2226:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2227:../Dave/Generated/src/FEE001/FEE001.c ****              }
2228:../Dave/Generated/src/FEE001/FEE001.c ****              break;
2229:../Dave/Generated/src/FEE001/FEE001.c **** 
2230:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_COMPLETED_INT_0F:
2231:../Dave/Generated/src/FEE001/FEE001.c **** 
2232:../Dave/Generated/src/FEE001/FEE001.c ****              /* Change the current Bank to Bank1 */
2233:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
2234:../Dave/Generated/src/FEE001/FEE001.c **** 
2235:../Dave/Generated/src/FEE001/FEE001.c ****              /* Update the Bank related global variables */
2236:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
2237:../Dave/Generated/src/FEE001/FEE001.c **** 
2238:../Dave/Generated/src/FEE001/FEE001.c ****              /* Set the marker blocks with next bank valid state */
2239:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_VALID_STATE);
2240:../Dave/Generated/src/FEE001/FEE001.c **** 
2241:../Dave/Generated/src/FEE001/FEE001.c ****              /* Clear all error status flags before flash operation*/
2242:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
2243:../Dave/Generated/src/FEE001/FEE001.c **** 
2244:../Dave/Generated/src/FEE001/FEE001.c ****              /* Erase the Marker Page of Bank1, program the page with the state
2245:../Dave/Generated/src/FEE001/FEE001.c ****               * called '0' and verify the written contents*/
2246:../Dave/Generated/src/FEE001/FEE001.c ****              Status = (FEE001Status_Type)FLASH003_ProgVerifyPage
2247:../Dave/Generated/src/FEE001/FEE001.c ****                          (StateDataPtr->FeeGcSrcAddr,
2248:../Dave/Generated/src/FEE001/FEE001.c ****               		       (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
2249:../Dave/Generated/src/FEE001/FEE001.c **** 
2250:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
2251:../Dave/Generated/src/FEE001/FEE001.c ****              {
2252:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the GC state as write next bank valid */
2253:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK ;
2254:../Dave/Generated/src/FEE001/FEE001.c **** 
2255:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the RAM Cache Table with the written blocks of data
2256:../Dave/Generated/src/FEE001/FEE001.c ****                     Update Block Consistency, Physical Start Address and Valid
2257:../Dave/Generated/src/FEE001/FEE001.c ****                     information against each of the blocks.
2258:../Dave/Generated/src/FEE001/FEE001.c ****                  */
2259:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCache();
2260:../Dave/Generated/src/FEE001/FEE001.c **** 
2261:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Start Garbage Collection */
2262:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lGarbageCollection();
2263:../Dave/Generated/src/FEE001/FEE001.c ****              }
2264:../Dave/Generated/src/FEE001/FEE001.c ****              else
2265:../Dave/Generated/src/FEE001/FEE001.c ****              {
2266:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2267:../Dave/Generated/src/FEE001/FEE001.c ****              }
2268:../Dave/Generated/src/FEE001/FEE001.c ****              break;
2269:../Dave/Generated/src/FEE001/FEE001.c **** 
2270:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_GC_INIT_INT_COMPLETED_F0:
2271:../Dave/Generated/src/FEE001/FEE001.c **** 
2272:../Dave/Generated/src/FEE001/FEE001.c ****              /* Change the current Bank to Bank0 */
2273:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
2274:../Dave/Generated/src/FEE001/FEE001.c **** 
2275:../Dave/Generated/src/FEE001/FEE001.c ****              /* Update the Bank related global variables */
2276:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
2277:../Dave/Generated/src/FEE001/FEE001.c **** 
2278:../Dave/Generated/src/FEE001/FEE001.c ****              /* Set the marker blocks with next bank valid state */
2279:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_VALID_STATE);
2280:../Dave/Generated/src/FEE001/FEE001.c **** 
2281:../Dave/Generated/src/FEE001/FEE001.c ****              /* Clear all error status flags before flash operation*/
2282:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
2283:../Dave/Generated/src/FEE001/FEE001.c **** 
2284:../Dave/Generated/src/FEE001/FEE001.c ****              /* Erase the Marker Page of Bank1, program the page with the state
2285:../Dave/Generated/src/FEE001/FEE001.c ****               * called '0' and verify the written contents*/
2286:../Dave/Generated/src/FEE001/FEE001.c ****              Status = (FEE001Status_Type)FLASH003_ProgVerifyPage
2287:../Dave/Generated/src/FEE001/FEE001.c ****                            (StateDataPtr->FeeGcSrcAddr,
2288:../Dave/Generated/src/FEE001/FEE001.c ****               		      (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
2289:../Dave/Generated/src/FEE001/FEE001.c **** 
2290:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
2291:../Dave/Generated/src/FEE001/FEE001.c ****              {
2292:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the GC state as write next bank valid */
2293:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK ;
2294:../Dave/Generated/src/FEE001/FEE001.c **** 
2295:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the RAM Cache Table with the written blocks of data
2296:../Dave/Generated/src/FEE001/FEE001.c ****                     Update Block Consistency, Physical Start Address and Valid
2297:../Dave/Generated/src/FEE001/FEE001.c ****                     information against each of the blocks.
2298:../Dave/Generated/src/FEE001/FEE001.c ****                  */
2299:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCache();
2300:../Dave/Generated/src/FEE001/FEE001.c **** 
2301:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Start Garbage Collection */
2302:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lGarbageCollection();
2303:../Dave/Generated/src/FEE001/FEE001.c ****              }
2304:../Dave/Generated/src/FEE001/FEE001.c ****              else
2305:../Dave/Generated/src/FEE001/FEE001.c ****              {
2306:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2307:../Dave/Generated/src/FEE001/FEE001.c ****              }
2308:../Dave/Generated/src/FEE001/FEE001.c ****              break;
2309:../Dave/Generated/src/FEE001/FEE001.c **** 
2310:../Dave/Generated/src/FEE001/FEE001.c ****          default:
2311:../Dave/Generated/src/FEE001/FEE001.c **** 
2312:../Dave/Generated/src/FEE001/FEE001.c ****          	Fee_lInitllegalStateMachine();
2313:../Dave/Generated/src/FEE001/FEE001.c **** 
2314:../Dave/Generated/src/FEE001/FEE001.c ****             break;
2315:../Dave/Generated/src/FEE001/FEE001.c **** 
2316:../Dave/Generated/src/FEE001/FEE001.c ****      }
2317:../Dave/Generated/src/FEE001/FEE001.c **** }
2318:../Dave/Generated/src/FEE001/FEE001.c **** 
2319:../Dave/Generated/src/FEE001/FEE001.c **** 
2320:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
2321:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          :  void Fee_lGarbageCollection(void)                       **
2322:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2323:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
2324:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2325:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
2326:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2327:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  None                                                    **
2328:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2329:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
2330:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2331:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  None                                                    **
2332:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2333:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     :  This routine will execute the garbage collection state  **
2334:../Dave/Generated/src/FEE001/FEE001.c **** **                    machine.                                                **
2335:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
2336:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lGarbageCollection (void)
2337:../Dave/Generated/src/FEE001/FEE001.c **** {
2338:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001Status_Type Status;
2339:../Dave/Generated/src/FEE001/FEE001.c ****   uint32_t BlockCount;
2340:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_CacheType          *CachePtr;
2341:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_StateDataType    *StateDataPtr;
2342:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
2343:../Dave/Generated/src/FEE001/FEE001.c **** 
2344:../Dave/Generated/src/FEE001/FEE001.c ****   do
2345:../Dave/Generated/src/FEE001/FEE001.c ****   {
2346:../Dave/Generated/src/FEE001/FEE001.c ****      switch(StateDataPtr->FeeGcState)
2347:../Dave/Generated/src/FEE001/FEE001.c ****      {
2348:../Dave/Generated/src/FEE001/FEE001.c **** 
2349:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_GC_REQUESTED:
2350:../Dave/Generated/src/FEE001/FEE001.c **** 
2351:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
2352:../Dave/Generated/src/FEE001/FEE001.c **** 
2353:../Dave/Generated/src/FEE001/FEE001.c ****               /* Write Copy start state to new bank  (2A) or (A2) */
2354:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcDestAddr +
2355:../Dave/Generated/src/FEE001/FEE001.c ****                                                  FEE001_MARK_BEGIN_OFFSET));
2356:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
2357:../Dave/Generated/src/FEE001/FEE001.c ****               {
2358:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Initialise the copied status for all the logical blocks */
2359:../Dave/Generated/src/FEE001/FEE001.c ****                  CachePtr = StateDataPtr->FeeBlockInfo;
2360:../Dave/Generated/src/FEE001/FEE001.c ****                  BlockCount = 0U;
2361:../Dave/Generated/src/FEE001/FEE001.c **** 
2362:../Dave/Generated/src/FEE001/FEE001.c ****                  do
2363:../Dave/Generated/src/FEE001/FEE001.c ****                  {
2364:../Dave/Generated/src/FEE001/FEE001.c ****                     CachePtr->Status.Copied = 0U;
2365:../Dave/Generated/src/FEE001/FEE001.c ****                     BlockCount++;
2366:../Dave/Generated/src/FEE001/FEE001.c ****                     CachePtr++;
2367:../Dave/Generated/src/FEE001/FEE001.c ****                  }while(BlockCount != FEE001_CfgPtr->FeeBlkCnt);
2368:../Dave/Generated/src/FEE001/FEE001.c **** 
2369:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGCLogBlkCount = 0U;
2370:../Dave/Generated/src/FEE001/FEE001.c **** 
2371:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_START_COPY;
2372:../Dave/Generated/src/FEE001/FEE001.c **** 
2373:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcDestAddr = StateDataPtr->FeeGcDestAddr +
2374:../Dave/Generated/src/FEE001/FEE001.c ****                                        FEE001_FIRST_DATA_BLOCK_OFFSET;
2375:../Dave/Generated/src/FEE001/FEE001.c ****               }
2376:../Dave/Generated/src/FEE001/FEE001.c ****               else
2377:../Dave/Generated/src/FEE001/FEE001.c ****               {
2378:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2379:../Dave/Generated/src/FEE001/FEE001.c ****               }
2380:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2381:../Dave/Generated/src/FEE001/FEE001.c **** 
2382:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_GC_START_COPY:
2383:../Dave/Generated/src/FEE001/FEE001.c **** 
2384:../Dave/Generated/src/FEE001/FEE001.c ****               /* start copying data from old bank to new bank */
2385:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lHandleGcStartCopy();
2386:../Dave/Generated/src/FEE001/FEE001.c **** 
2387:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2388:../Dave/Generated/src/FEE001/FEE001.c **** 
2389:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_GC_COPY_READ_NXTBLOCK:
2390:../Dave/Generated/src/FEE001/FEE001.c **** 
2391:../Dave/Generated/src/FEE001/FEE001.c ****               /* Clear all error status flags before flash operation*/
2392:../Dave/Generated/src/FEE001/FEE001.c ****               FLASH003_ClearStatus();
2393:../Dave/Generated/src/FEE001/FEE001.c **** 
2394:../Dave/Generated/src/FEE001/FEE001.c ****               /* Read the contents of the old bank */
2395:../Dave/Generated/src/FEE001/FEE001.c ****               (void)FLASH003_ReadBlock((uint32_t)(StateDataPtr->FeeGcSrcAddr),
2396:../Dave/Generated/src/FEE001/FEE001.c ****                            (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer);
2397:../Dave/Generated/src/FEE001/FEE001.c **** 
2398:../Dave/Generated/src/FEE001/FEE001.c ****               /* Return value above is ignored */
2399:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeGcState = FEE001_GC_COPY_WRITE;
2400:../Dave/Generated/src/FEE001/FEE001.c **** 
2401:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2402:../Dave/Generated/src/FEE001/FEE001.c **** 
2403:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_GC_COPY_WRITE:
2404:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lHandleGcStartCopyWrite();
2405:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status != FEE001_COMPLETE)
2406:../Dave/Generated/src/FEE001/FEE001.c ****               {
2407:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2408:../Dave/Generated/src/FEE001/FEE001.c ****               }
2409:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2410:../Dave/Generated/src/FEE001/FEE001.c **** 
2411:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_GC_END_OF_COPY:
2412:../Dave/Generated/src/FEE001/FEE001.c **** 
2413:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
2414:../Dave/Generated/src/FEE001/FEE001.c **** 
2415:../Dave/Generated/src/FEE001/FEE001.c ****               /* Write Copy completed state to old bank (0A) or (A0) */
2416:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
2417:../Dave/Generated/src/FEE001/FEE001.c ****                  		                            FEE001_END_OF_COPY_OFFSET));
2418:../Dave/Generated/src/FEE001/FEE001.c **** 
2419:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
2420:../Dave/Generated/src/FEE001/FEE001.c ****               {
2421:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the current bank to next bank */
2422:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeStatusFlags.FeeCurrBank =
2423:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeStatusFlags.FeeCurrBank ^ 0x01U;
2424:../Dave/Generated/src/FEE001/FEE001.c **** 
2425:../Dave/Generated/src/FEE001/FEE001.c ****                  /* Update the Bank related global variables */
2426:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCurrBankInfo();
2427:../Dave/Generated/src/FEE001/FEE001.c **** 
2428:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID;
2429:../Dave/Generated/src/FEE001/FEE001.c **** 
2430:../Dave/Generated/src/FEE001/FEE001.c ****               }
2431:../Dave/Generated/src/FEE001/FEE001.c ****               else
2432:../Dave/Generated/src/FEE001/FEE001.c ****               {
2433:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2434:../Dave/Generated/src/FEE001/FEE001.c ****               }
2435:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2436:../Dave/Generated/src/FEE001/FEE001.c **** 
2437:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_GC_MARK_NEXT_BANK_VALID:
2438:../Dave/Generated/src/FEE001/FEE001.c **** 
2439:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
2440:../Dave/Generated/src/FEE001/FEE001.c ****               
2441:../Dave/Generated/src/FEE001/FEE001.c ****               /* Write next bank to valid state  (02) or (20) */
2442:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
2443:../Dave/Generated/src/FEE001/FEE001.c ****                                                FEE001_MARK_NEXT_VALID_OFFSET));
2444:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
2445:../Dave/Generated/src/FEE001/FEE001.c ****               {
2446:../Dave/Generated/src/FEE001/FEE001.c **** 
2447:../Dave/Generated/src/FEE001/FEE001.c ****             	  StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK;
2448:../Dave/Generated/src/FEE001/FEE001.c ****               }
2449:../Dave/Generated/src/FEE001/FEE001.c ****               else
2450:../Dave/Generated/src/FEE001/FEE001.c ****               {
2451:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2452:../Dave/Generated/src/FEE001/FEE001.c ****               }
2453:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2454:../Dave/Generated/src/FEE001/FEE001.c **** 
2455:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_GC_ERASE_PREV_BANK:
2456:../Dave/Generated/src/FEE001/FEE001.c **** 
2457:../Dave/Generated/src/FEE001/FEE001.c ****               /* Erase the previous redundant bank (F2) or (2F) */
2458:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
2459:../Dave/Generated/src/FEE001/FEE001.c **** 
2460:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
2461:../Dave/Generated/src/FEE001/FEE001.c ****               {
2462:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_MARK_END_ERASE1;
2463:../Dave/Generated/src/FEE001/FEE001.c ****               }
2464:../Dave/Generated/src/FEE001/FEE001.c ****               else
2465:../Dave/Generated/src/FEE001/FEE001.c ****               {
2466:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2467:../Dave/Generated/src/FEE001/FEE001.c ****               }
2468:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2469:../Dave/Generated/src/FEE001/FEE001.c **** 
2470:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_GC_MARK_END_ERASE1:
2471:../Dave/Generated/src/FEE001/FEE001.c **** 
2472:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
2473:../Dave/Generated/src/FEE001/FEE001.c ****                                  
2474:../Dave/Generated/src/FEE001/FEE001.c ****               /* Write formatted state to the old erased bank (E2) or (2E) */
2475:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcDestAddr +
2476:../Dave/Generated/src/FEE001/FEE001.c ****                                                FEE001_MARK_END_ERASE_OFFSET));
2477:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
2478:../Dave/Generated/src/FEE001/FEE001.c ****               {
2479:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_IDLE;
2480:../Dave/Generated/src/FEE001/FEE001.c ****               }
2481:../Dave/Generated/src/FEE001/FEE001.c ****               else
2482:../Dave/Generated/src/FEE001/FEE001.c ****               {
2483:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2484:../Dave/Generated/src/FEE001/FEE001.c ****               }
2485:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2486:../Dave/Generated/src/FEE001/FEE001.c **** 
2487:../Dave/Generated/src/FEE001/FEE001.c ****          default:
2488:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2489:../Dave/Generated/src/FEE001/FEE001.c **** 
2490:../Dave/Generated/src/FEE001/FEE001.c ****         }
2491:../Dave/Generated/src/FEE001/FEE001.c **** 
2492:../Dave/Generated/src/FEE001/FEE001.c ****   }while((StateDataPtr->FeeGcState != FEE001_GC_IDLE) &&
2493:../Dave/Generated/src/FEE001/FEE001.c ****       (StateDataPtr->FeeGcState != FEE001_GC_FAIL));
2494:../Dave/Generated/src/FEE001/FEE001.c **** }
2495:../Dave/Generated/src/FEE001/FEE001.c **** 
2496:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
2497:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          :  FEE001Status_Type Fee_lHandleGcStartCopy(void)          **
2498:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2499:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  synchronous                                             **
2500:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2501:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
2502:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2503:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  None                                                    **
2504:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2505:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
2506:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2507:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  FEE001Status_Type                                       **
2508:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2509:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     :  This routine is responsible for handling Garbage        **
2510:../Dave/Generated/src/FEE001/FEE001.c **** **                    Collection GC START COPY state                          **
2511:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
2512:../Dave/Generated/src/FEE001/FEE001.c **** 
2513:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type Fee_lHandleGcStartCopy(void)
2514:../Dave/Generated/src/FEE001/FEE001.c **** {
2515:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t BlockCount;
2516:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t StateFlag;
2517:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001Status_Type Status;
2518:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_CacheType          *CachePtr;
2519:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_StateDataType    *StateDataPtr;
2520:../Dave/Generated/src/FEE001/FEE001.c ****   StateFlag = 0U;
2521:../Dave/Generated/src/FEE001/FEE001.c ****   Status = FEE001_COMPLETE;
2522:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
2523:../Dave/Generated/src/FEE001/FEE001.c ****   
2524:../Dave/Generated/src/FEE001/FEE001.c ****   /* initialise the copied status for all the logical blocks */
2525:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = StateDataPtr->FeeGCLogBlkCount;
2526:../Dave/Generated/src/FEE001/FEE001.c ****   CachePtr = StateDataPtr->FeeBlockInfo + BlockCount;
2527:../Dave/Generated/src/FEE001/FEE001.c ****   /* Check all available blocks in cache table for Copy process
2528:../Dave/Generated/src/FEE001/FEE001.c ****    * Condition breaks on either the current block is consistent or
2529:../Dave/Generated/src/FEE001/FEE001.c ****    * all blocks check for consistency is finished
2530:../Dave/Generated/src/FEE001/FEE001.c ****    * */
2531:../Dave/Generated/src/FEE001/FEE001.c ****   while((StateFlag == 0U) && (BlockCount != FEE001_CfgPtr->FeeBlkCnt))
2532:../Dave/Generated/src/FEE001/FEE001.c ****   {
2533:../Dave/Generated/src/FEE001/FEE001.c **** 	 /* If block is consistent set state flag for copy enable*/
2534:../Dave/Generated/src/FEE001/FEE001.c **** 	 if( ( (CachePtr->Address != 0U) &&
2535:../Dave/Generated/src/FEE001/FEE001.c ****            (CachePtr->Status.Consistent == 1U)) &&
2536:../Dave/Generated/src/FEE001/FEE001.c ****            (CachePtr->Status.Copied == 0U)
2537:../Dave/Generated/src/FEE001/FEE001.c ****          )
2538:../Dave/Generated/src/FEE001/FEE001.c ****      {
2539:../Dave/Generated/src/FEE001/FEE001.c ****         StateFlag = 1U;
2540:../Dave/Generated/src/FEE001/FEE001.c ****      }
2541:../Dave/Generated/src/FEE001/FEE001.c **** 	 /* If block is inconsistent ignore the block from copy and try next block*/
2542:../Dave/Generated/src/FEE001/FEE001.c **** 	 else
2543:../Dave/Generated/src/FEE001/FEE001.c ****      {
2544:../Dave/Generated/src/FEE001/FEE001.c ****         BlockCount++;
2545:../Dave/Generated/src/FEE001/FEE001.c ****         CachePtr++;
2546:../Dave/Generated/src/FEE001/FEE001.c ****      }
2547:../Dave/Generated/src/FEE001/FEE001.c ****   } /* end of while */
2548:../Dave/Generated/src/FEE001/FEE001.c **** 
2549:../Dave/Generated/src/FEE001/FEE001.c ****   /* If block is consistent */
2550:../Dave/Generated/src/FEE001/FEE001.c ****   if(StateFlag == 1U)
2551:../Dave/Generated/src/FEE001/FEE001.c ****   {
2552:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcSrcAddr = CachePtr->Address;
2553:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGCDFlashBlocks = 0U;
2554:../Dave/Generated/src/FEE001/FEE001.c **** 
2555:../Dave/Generated/src/FEE001/FEE001.c ****      /* Clear all error status flags before flash operation*/
2556:../Dave/Generated/src/FEE001/FEE001.c ****      FLASH003_ClearStatus();
2557:../Dave/Generated/src/FEE001/FEE001.c ****           
2558:../Dave/Generated/src/FEE001/FEE001.c ****      (void) FLASH003_ReadBlock((uint32_t)(StateDataPtr->FeeGcSrcAddr),
2559:../Dave/Generated/src/FEE001/FEE001.c ****                         (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer);
2560:../Dave/Generated/src/FEE001/FEE001.c **** 
2561:../Dave/Generated/src/FEE001/FEE001.c ****      /* Return value above is ignored as parameters passed from FEE */
2562:../Dave/Generated/src/FEE001/FEE001.c ****      /* are correct */
2563:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcState = FEE001_GC_COPY_WRITE;
2564:../Dave/Generated/src/FEE001/FEE001.c ****   }
2565:../Dave/Generated/src/FEE001/FEE001.c ****   /* Finished copying all the logical blocks */
2566:../Dave/Generated/src/FEE001/FEE001.c ****   else
2567:../Dave/Generated/src/FEE001/FEE001.c ****   {
2568:../Dave/Generated/src/FEE001/FEE001.c ****      /* Update the next free block pointer */
2569:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeNextFreeBlockAddr = StateDataPtr->FeeGcDestAddr;
2570:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcSrcAddr = StateDataPtr->FeeCurrBankSrcAddr;
2571:../Dave/Generated/src/FEE001/FEE001.c ****      Fee_lUpdateCurrBankInfo();
2572:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcState = FEE001_GC_END_OF_COPY;
2573:../Dave/Generated/src/FEE001/FEE001.c ****   }
2574:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr->FeeGCLogBlkCount = BlockCount;
2575:../Dave/Generated/src/FEE001/FEE001.c ****   return (Status);
2576:../Dave/Generated/src/FEE001/FEE001.c **** 
2577:../Dave/Generated/src/FEE001/FEE001.c **** }
2578:../Dave/Generated/src/FEE001/FEE001.c **** 
2579:../Dave/Generated/src/FEE001/FEE001.c **** 
2580:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
2581:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : FEE001Status_Type Fee_lHandleGcStartCopyWrite(void)      **
2582:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2583:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  synchronous                                             **
2584:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2585:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
2586:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2587:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  None                                                    **
2588:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2589:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
2590:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2591:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  FEE001Status_Type                                       **
2592:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2593:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine is responsible for handling Garbage         **
2594:../Dave/Generated/src/FEE001/FEE001.c **** **                   Collection GC START COPY WRITE state                     **
2595:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
2596:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type Fee_lHandleGcStartCopyWrite(void)
2597:../Dave/Generated/src/FEE001/FEE001.c **** {
2598:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t BlockCount;
2599:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001Status_Type Status;
2600:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_CacheType          *CachePtr;
2601:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_StateDataType    *StateDataPtr;
2602:../Dave/Generated/src/FEE001/FEE001.c ****   uint32_t DFLASHPhysicalBlocks;
2603:../Dave/Generated/src/FEE001/FEE001.c ****   uint16_t Size;
2604:../Dave/Generated/src/FEE001/FEE001.c ****   
2605:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
2606:../Dave/Generated/src/FEE001/FEE001.c ****    /* initialise the copied status for all the logical blocks */
2607:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = StateDataPtr->FeeGCLogBlkCount;
2608:../Dave/Generated/src/FEE001/FEE001.c ****   CachePtr = StateDataPtr->FeeBlockInfo + BlockCount;
2609:../Dave/Generated/src/FEE001/FEE001.c **** 
2610:../Dave/Generated/src/FEE001/FEE001.c ****   Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcDestAddr));
2611:../Dave/Generated/src/FEE001/FEE001.c ****   if (Status == FEE001_COMPLETE)
2612:../Dave/Generated/src/FEE001/FEE001.c ****   {         
2613:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGCDFlashBlocks++;
2614:../Dave/Generated/src/FEE001/FEE001.c ****      Size = (uint16_t)FEE001_CfgPtr->FeeBlockConfigPtr[BlockCount].Size;
2615:../Dave/Generated/src/FEE001/FEE001.c ****      DFLASHPhysicalBlocks = (uint16_t)Fee_lGetDFLASHPhysicalBlocks(Size);
2616:../Dave/Generated/src/FEE001/FEE001.c ****      /* If all the blocks of the logical block are copied */
2617:../Dave/Generated/src/FEE001/FEE001.c ****      if((StateDataPtr->FeeGCDFlashBlocks == DFLASHPhysicalBlocks)
2618:../Dave/Generated/src/FEE001/FEE001.c ****          ||(CachePtr->Status.Valid == 0U)
2619:../Dave/Generated/src/FEE001/FEE001.c ****        )
2620:../Dave/Generated/src/FEE001/FEE001.c ****      {
2621:../Dave/Generated/src/FEE001/FEE001.c ****        CachePtr->Status.Copied = 1U;
2622:../Dave/Generated/src/FEE001/FEE001.c ****        BlockCount++;
2623:../Dave/Generated/src/FEE001/FEE001.c **** 
2624:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcState = FEE001_GC_START_COPY;
2625:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcDestAddr += FEE001_DFLASH_BLOCK_SIZE;
2626:../Dave/Generated/src/FEE001/FEE001.c ****        CachePtr->Address = StateDataPtr->FeeGcDestAddr - 
2627:../Dave/Generated/src/FEE001/FEE001.c ****         (FEE001_DFLASH_BLOCK_SIZE * StateDataPtr->FeeGCDFlashBlocks);
2628:../Dave/Generated/src/FEE001/FEE001.c ****      }
2629:../Dave/Generated/src/FEE001/FEE001.c ****      else
2630:../Dave/Generated/src/FEE001/FEE001.c ****      {
2631:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcSrcAddr = StateDataPtr->FeeGcSrcAddr + 
2632:../Dave/Generated/src/FEE001/FEE001.c ****                                 FEE001_DFLASH_BLOCK_SIZE;
2633:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcDestAddr = StateDataPtr->FeeGcDestAddr + 
2634:../Dave/Generated/src/FEE001/FEE001.c ****                                  FEE001_DFLASH_BLOCK_SIZE;
2635:../Dave/Generated/src/FEE001/FEE001.c **** 
2636:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcState = FEE001_GC_COPY_READ_NXTBLOCK;
2637:../Dave/Generated/src/FEE001/FEE001.c ****      }
2638:../Dave/Generated/src/FEE001/FEE001.c ****   }
2639:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr->FeeGCLogBlkCount = BlockCount;
2640:../Dave/Generated/src/FEE001/FEE001.c ****   return (Status);
2641:../Dave/Generated/src/FEE001/FEE001.c **** }
2642:../Dave/Generated/src/FEE001/FEE001.c **** 
2643:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
2644:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void Fee_lPrepareDflash(void)                            **
2645:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2646:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      : Synchronous                                              **
2647:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2648:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      : Non reentrant                                            **
2649:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2650:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) : None                                                     **
2651:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2652:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out): None                                                     **
2653:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2654:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
2655:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2656:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will execute the Prepare DFlash procedure   ** 
2657:../Dave/Generated/src/FEE001/FEE001.c **** **                   This FSM will get the flash ready to write data.         **
2658:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
2659:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lPrepareDFlash (void)
2660:../Dave/Generated/src/FEE001/FEE001.c **** {
2661:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001Status_Type Status;
2662:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_StateDataType    *StateDataPtr;
2663:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
2664:../Dave/Generated/src/FEE001/FEE001.c **** 
2665:../Dave/Generated/src/FEE001/FEE001.c ****   do
2666:../Dave/Generated/src/FEE001/FEE001.c ****   {
2667:../Dave/Generated/src/FEE001/FEE001.c ****      switch(StateDataPtr->FeeGcState)
2668:../Dave/Generated/src/FEE001/FEE001.c ****      {
2669:../Dave/Generated/src/FEE001/FEE001.c **** 
2670:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_PREPDFLASH_MARK_FF:
2671:../Dave/Generated/src/FEE001/FEE001.c **** 
2672:../Dave/Generated/src/FEE001/FEE001.c ****               /* Erase the previous redundant bank */
2673:../Dave/Generated/src/FEE001/FEE001.c ****         	    Status = Fee_lEraseBank(StateDataPtr->FeeCurrBankEndAddr);
2674:../Dave/Generated/src/FEE001/FEE001.c **** 
2675:../Dave/Generated/src/FEE001/FEE001.c ****               /* Erase the previous redundant bank */
2676:../Dave/Generated/src/FEE001/FEE001.c ****               if(Status == FEE001_COMPLETE)
2677:../Dave/Generated/src/FEE001/FEE001.c ****               {
2678:../Dave/Generated/src/FEE001/FEE001.c ****                 Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
2679:../Dave/Generated/src/FEE001/FEE001.c ****                 if (Status == FEE001_COMPLETE)
2680:../Dave/Generated/src/FEE001/FEE001.c ****                 {
2681:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_7F;
2682:../Dave/Generated/src/FEE001/FEE001.c ****                 }
2683:../Dave/Generated/src/FEE001/FEE001.c ****                 else
2684:../Dave/Generated/src/FEE001/FEE001.c ****                 {
2685:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2686:../Dave/Generated/src/FEE001/FEE001.c ****                 }
2687:../Dave/Generated/src/FEE001/FEE001.c ****               }
2688:../Dave/Generated/src/FEE001/FEE001.c ****               else
2689:../Dave/Generated/src/FEE001/FEE001.c ****               {
2690:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2691:../Dave/Generated/src/FEE001/FEE001.c ****               }
2692:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2693:../Dave/Generated/src/FEE001/FEE001.c **** 
2694:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_PREPDFLASH_MARK_7F:
2695:../Dave/Generated/src/FEE001/FEE001.c ****             
2696:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
2697:../Dave/Generated/src/FEE001/FEE001.c **** 
2698:../Dave/Generated/src/FEE001/FEE001.c ****               /*  Write Copy completed state to old bank (7F) */
2699:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
2700:../Dave/Generated/src/FEE001/FEE001.c ****                                               FEE001_MARK_NEXT_VALID_OFFSET));
2701:../Dave/Generated/src/FEE001/FEE001.c **** 
2702:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
2703:../Dave/Generated/src/FEE001/FEE001.c ****               {
2704:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_3F;
2705:../Dave/Generated/src/FEE001/FEE001.c ****               }
2706:../Dave/Generated/src/FEE001/FEE001.c ****               else
2707:../Dave/Generated/src/FEE001/FEE001.c ****               {
2708:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2709:../Dave/Generated/src/FEE001/FEE001.c ****               }
2710:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2711:../Dave/Generated/src/FEE001/FEE001.c **** 
2712:../Dave/Generated/src/FEE001/FEE001.c ****         case FEE001_PREPDFLASH_MARK_3F:
2713:../Dave/Generated/src/FEE001/FEE001.c **** 
2714:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
2715:../Dave/Generated/src/FEE001/FEE001.c **** 
2716:../Dave/Generated/src/FEE001/FEE001.c ****               /* Write current bank to data state  (3F) */
2717:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
2718:../Dave/Generated/src/FEE001/FEE001.c ****                                                  FEE001_MARK_BEGIN_OFFSET));
2719:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
2720:../Dave/Generated/src/FEE001/FEE001.c ****               {
2721:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_2F;
2722:../Dave/Generated/src/FEE001/FEE001.c ****               }
2723:../Dave/Generated/src/FEE001/FEE001.c ****               else
2724:../Dave/Generated/src/FEE001/FEE001.c ****               {
2725:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2726:../Dave/Generated/src/FEE001/FEE001.c ****               }
2727:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2728:../Dave/Generated/src/FEE001/FEE001.c ****               
2729:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_PREPDFLASH_MARK_2F:
2730:../Dave/Generated/src/FEE001/FEE001.c ****             
2731:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
2732:../Dave/Generated/src/FEE001/FEE001.c **** 
2733:../Dave/Generated/src/FEE001/FEE001.c ****               /* Write Bank0 to formatted state  (2F) */
2734:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
2735:../Dave/Generated/src/FEE001/FEE001.c ****                                              FEE001_MARK_END_ERASE_OFFSET));
2736:../Dave/Generated/src/FEE001/FEE001.c **** 
2737:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
2738:../Dave/Generated/src/FEE001/FEE001.c ****               {
2739:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_2E;
2740:../Dave/Generated/src/FEE001/FEE001.c ****               }
2741:../Dave/Generated/src/FEE001/FEE001.c ****               else
2742:../Dave/Generated/src/FEE001/FEE001.c ****               {
2743:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2744:../Dave/Generated/src/FEE001/FEE001.c ****               }
2745:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2746:../Dave/Generated/src/FEE001/FEE001.c **** 
2747:../Dave/Generated/src/FEE001/FEE001.c ****          case FEE001_PREPDFLASH_MARK_2E:
2748:../Dave/Generated/src/FEE001/FEE001.c ****             
2749:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
2750:../Dave/Generated/src/FEE001/FEE001.c **** 
2751:../Dave/Generated/src/FEE001/FEE001.c ****               /* Write Bank1 to formatted state  (2E) */
2752:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcDestAddr +
2753:../Dave/Generated/src/FEE001/FEE001.c ****                                              FEE001_MARK_END_ERASE_OFFSET));
2754:../Dave/Generated/src/FEE001/FEE001.c **** 
2755:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
2756:../Dave/Generated/src/FEE001/FEE001.c ****               {
2757:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_IDLE;
2758:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeIntrJobResult = FEE001_JOB_PASS;
2759:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeUserJobResult = FEE001_JOB_PASS;
2760:../Dave/Generated/src/FEE001/FEE001.c ****               }
2761:../Dave/Generated/src/FEE001/FEE001.c ****               else
2762:../Dave/Generated/src/FEE001/FEE001.c ****               {
2763:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
2764:../Dave/Generated/src/FEE001/FEE001.c ****               }
2765:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2766:../Dave/Generated/src/FEE001/FEE001.c **** 
2767:../Dave/Generated/src/FEE001/FEE001.c ****          default:
2768:../Dave/Generated/src/FEE001/FEE001.c ****               break;
2769:../Dave/Generated/src/FEE001/FEE001.c **** 
2770:../Dave/Generated/src/FEE001/FEE001.c ****      }
2771:../Dave/Generated/src/FEE001/FEE001.c **** 
2772:../Dave/Generated/src/FEE001/FEE001.c ****   }while((StateDataPtr->FeeGcState != FEE001_GC_IDLE) &&
2773:../Dave/Generated/src/FEE001/FEE001.c ****       (StateDataPtr->FeeGcState != FEE001_GC_FAIL));
2774:../Dave/Generated/src/FEE001/FEE001.c **** }
2775:../Dave/Generated/src/FEE001/FEE001.c **** 
2776:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
2777:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax             :  void Fee_lUpdateCache(void)                          **
2778:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2779:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async         :  Synchronous                                          **
2780:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2781:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy         :  Non reentrant                                        **
2782:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2783:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in-out):  None                                                 **
2784:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2785:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out)   :  None                                                 **
2786:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2787:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value       :  None                                                 **
2788:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2789:../Dave/Generated/src/FEE001/FEE001.c **** ** Description        :  This utility function  will update the cache which   **
2790:../Dave/Generated/src/FEE001/FEE001.c **** **                       contains the latest information about the DFLASH     **
2791:../Dave/Generated/src/FEE001/FEE001.c **** **                       contents.                                            **
2792:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
2793:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lUpdateCache(void)
2794:../Dave/Generated/src/FEE001/FEE001.c **** {
2795:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t                  BlockNumber;
2796:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t                  Index;
2797:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t                 EndAddr;
2798:../Dave/Generated/src/FEE001/FEE001.c ****    status_t                 status;
2799:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType        *StateDataPtr;
2800:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_BlockHeaderType      *Ptr;
2801:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_CacheType            *CachePtr;
2802:../Dave/Generated/src/FEE001/FEE001.c **** 
2803:../Dave/Generated/src/FEE001/FEE001.c ****    
2804:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
2805:../Dave/Generated/src/FEE001/FEE001.c **** 
2806:../Dave/Generated/src/FEE001/FEE001.c ****    /* Evaluate the end Address for cache update */
2807:../Dave/Generated/src/FEE001/FEE001.c ****    /* NOTE: The end Address refers to the start Address of the data section of 
2808:../Dave/Generated/src/FEE001/FEE001.c ****             the bank as the cache update algorithm reads from the bottom to
2809:../Dave/Generated/src/FEE001/FEE001.c ****             the top of the bank */
2810:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeCurrBank == 0U)
2811:../Dave/Generated/src/FEE001/FEE001.c ****    {
2812:../Dave/Generated/src/FEE001/FEE001.c ****      EndAddr = FEE001_DFLASH_BANK0_BASE + FEE001_FIRST_DATA_BLOCK_OFFSET;
2813:../Dave/Generated/src/FEE001/FEE001.c ****    }
2814:../Dave/Generated/src/FEE001/FEE001.c ****    else
2815:../Dave/Generated/src/FEE001/FEE001.c ****    {
2816:../Dave/Generated/src/FEE001/FEE001.c ****      EndAddr = FEE001_DFLASH_BANK1_BASE + FEE001_FIRST_DATA_BLOCK_OFFSET;
2817:../Dave/Generated/src/FEE001/FEE001.c ****    }
2818:../Dave/Generated/src/FEE001/FEE001.c **** 
2819:../Dave/Generated/src/FEE001/FEE001.c ****    /* Reset the number of blocks in the block */
2820:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
2821:../Dave/Generated/src/FEE001/FEE001.c **** 
2822:../Dave/Generated/src/FEE001/FEE001.c ****    /* Start the Cache Update state machine */
2823:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCacheState = FEE001_CACHE_EMPTY_BLOCK_EVAL;
2824:../Dave/Generated/src/FEE001/FEE001.c **** 
2825:../Dave/Generated/src/FEE001/FEE001.c ****    /* Point to starting Address of last data block of the bank */
2826:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCurrBankSrcAddr += ( FEE001_DFLASH_BANK_SIZE -
2827:../Dave/Generated/src/FEE001/FEE001.c ****                                     FEE001_DFLASH_BLOCK_SIZE);
2828:../Dave/Generated/src/FEE001/FEE001.c **** 
2829:../Dave/Generated/src/FEE001/FEE001.c ****    /* Initialise the Index to BLOCK NOT FOUND */
2830:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
2831:../Dave/Generated/src/FEE001/FEE001.c ****       
2832:../Dave/Generated/src/FEE001/FEE001.c ****    /* Execute the Cache update state machine until the Start address of
2833:../Dave/Generated/src/FEE001/FEE001.c ****    *  bank is reached traversing from end of bank
2834:../Dave/Generated/src/FEE001/FEE001.c ****    */
2835:../Dave/Generated/src/FEE001/FEE001.c ****    while(StateDataPtr->FeeCacheState != FEE001_CACHE_UPDATE_COMPLETE)
2836:../Dave/Generated/src/FEE001/FEE001.c ****    {
2837:../Dave/Generated/src/FEE001/FEE001.c ****   
2838:../Dave/Generated/src/FEE001/FEE001.c ****      /* Cache Update state machine */
2839:../Dave/Generated/src/FEE001/FEE001.c ****      switch(StateDataPtr->FeeCacheState)
2840:../Dave/Generated/src/FEE001/FEE001.c ****      {
2841:../Dave/Generated/src/FEE001/FEE001.c ****    
2842:../Dave/Generated/src/FEE001/FEE001.c ****       /********** CACHE_EMPTY_BLOCK_EVAL STATE *******************/
2843:../Dave/Generated/src/FEE001/FEE001.c ****       case FEE001_CACHE_EMPTY_BLOCK_EVAL:
2844:../Dave/Generated/src/FEE001/FEE001.c **** 
2845:../Dave/Generated/src/FEE001/FEE001.c ****        do
2846:../Dave/Generated/src/FEE001/FEE001.c ****        {
2847:../Dave/Generated/src/FEE001/FEE001.c ****           Fee_lCacheEmptyBlkEval(EndAddr);
2848:../Dave/Generated/src/FEE001/FEE001.c **** 
2849:../Dave/Generated/src/FEE001/FEE001.c ****        }while(StateDataPtr->FeeCacheState == FEE001_CACHE_EMPTY_BLOCK_EVAL);
2850:../Dave/Generated/src/FEE001/FEE001.c **** 
2851:../Dave/Generated/src/FEE001/FEE001.c ****        break;
2852:../Dave/Generated/src/FEE001/FEE001.c ****       
2853:../Dave/Generated/src/FEE001/FEE001.c ****       /********** CACHE_NEXT_FREE_BLK_UPDATED *******************/
2854:../Dave/Generated/src/FEE001/FEE001.c ****       default:
2855:../Dave/Generated/src/FEE001/FEE001.c ****       {
2856:../Dave/Generated/src/FEE001/FEE001.c ****        /* Evaluate the data block read in previous cycle */
2857:../Dave/Generated/src/FEE001/FEE001.c ****        Ptr = (FEE001_BlockHeaderType *)(void *)StateDataPtr->FeeReadWriteBuffer;
2858:../Dave/Generated/src/FEE001/FEE001.c ****        BlockNumber = Ptr->BlockNumber;
2859:../Dave/Generated/src/FEE001/FEE001.c ****        CachePtr = StateDataPtr->FeeBlockInfo;
2860:../Dave/Generated/src/FEE001/FEE001.c ****          
2861:../Dave/Generated/src/FEE001/FEE001.c ****        /* If previous internal job result is PASS i.e. No DBER found
2862:../Dave/Generated/src/FEE001/FEE001.c ****         * (previous cache update block read)
2863:../Dave/Generated/src/FEE001/FEE001.c ****         */
2864:../Dave/Generated/src/FEE001/FEE001.c ****        if(StateDataPtr->FeeIntrJobResult == FEE001_JOB_PASS)
2865:../Dave/Generated/src/FEE001/FEE001.c ****        {
2866:../Dave/Generated/src/FEE001/FEE001.c ****          /* Evaluate the Block Status */
2867:../Dave/Generated/src/FEE001/FEE001.c ****          Fee_lEvalBlockStatus(BlockNumber);
2868:../Dave/Generated/src/FEE001/FEE001.c **** 
2869:../Dave/Generated/src/FEE001/FEE001.c ****        }
2870:../Dave/Generated/src/FEE001/FEE001.c ****        /* In case of Read Failure : DBER */
2871:../Dave/Generated/src/FEE001/FEE001.c ****        else
2872:../Dave/Generated/src/FEE001/FEE001.c ****        {
2873:../Dave/Generated/src/FEE001/FEE001.c ****          /* Clear all error status flags before flash operation*/
2874:../Dave/Generated/src/FEE001/FEE001.c ****          FLASH003_ClearStatus();
2875:../Dave/Generated/src/FEE001/FEE001.c ****  
2876:../Dave/Generated/src/FEE001/FEE001.c ****        	 /* Read the header (1 complete Word)*/
2877:../Dave/Generated/src/FEE001/FEE001.c ****          status = FLASH003_ReadWord(
2878:../Dave/Generated/src/FEE001/FEE001.c ****                         (uint32_t)StateDataPtr->FeeCurrBankSrcAddr,
2879:../Dave/Generated/src/FEE001/FEE001.c ****                         (uint32_t *)(void *)StateDataPtr->FeeReadWriteBuffer);
2880:../Dave/Generated/src/FEE001/FEE001.c ****                              
2881:../Dave/Generated/src/FEE001/FEE001.c ****          /* If DBER found in DataWord containing block number */
2882:../Dave/Generated/src/FEE001/FEE001.c ****          if(status != 0U)
2883:../Dave/Generated/src/FEE001/FEE001.c ****          {
2884:../Dave/Generated/src/FEE001/FEE001.c ****            /***************** DBER is in header *********************/
2885:../Dave/Generated/src/FEE001/FEE001.c ****            /* If PREVIOUS read block of the block had correct block number */
2886:../Dave/Generated/src/FEE001/FEE001.c ****            /*  then mark the block as inconsistent */
2887:../Dave/Generated/src/FEE001/FEE001.c ****            if( StateDataPtr->FeeCacheUpdateIndex != FEE001_LOG_BLOCK_NOT_FOUND )
2888:../Dave/Generated/src/FEE001/FEE001.c ****            {
2889:../Dave/Generated/src/FEE001/FEE001.c ****               /* Goto the cache table entry for the given block */
2890:../Dave/Generated/src/FEE001/FEE001.c ****               CachePtr = CachePtr + StateDataPtr->FeeCacheUpdateIndex;
2891:../Dave/Generated/src/FEE001/FEE001.c ****               /* Mark the block as inconsistent*/
2892:../Dave/Generated/src/FEE001/FEE001.c ****               /* EVALUATION RESULT : BLOCK INCONSISTENT */
2893:../Dave/Generated/src/FEE001/FEE001.c ****               /* Since FeeCacheUpdateIndex contains valid block => the
2894:../Dave/Generated/src/FEE001/FEE001.c ****                  previous read block must belong to this block */
2895:../Dave/Generated/src/FEE001/FEE001.c ****               CachePtr->Address = 0xFFFFFFFFU;
2896:../Dave/Generated/src/FEE001/FEE001.c ****               /* Prepare for the next block */
2897:../Dave/Generated/src/FEE001/FEE001.c ****            }
2898:../Dave/Generated/src/FEE001/FEE001.c ****            else
2899:../Dave/Generated/src/FEE001/FEE001.c ****            {
2900:../Dave/Generated/src/FEE001/FEE001.c ****               /* ignore the block as the block number is not known */
2901:../Dave/Generated/src/FEE001/FEE001.c ****            }
2902:../Dave/Generated/src/FEE001/FEE001.c ****          }
2903:../Dave/Generated/src/FEE001/FEE001.c ****          else
2904:../Dave/Generated/src/FEE001/FEE001.c ****          {
2905:../Dave/Generated/src/FEE001/FEE001.c ****             /* Status in data part */
2906:../Dave/Generated/src/FEE001/FEE001.c ****             /* Get the Index of the read block from the user configuration */
2907:../Dave/Generated/src/FEE001/FEE001.c ****             Index = Fee_lGetUsrBlockIndex(BlockNumber);
2908:../Dave/Generated/src/FEE001/FEE001.c **** 
2909:../Dave/Generated/src/FEE001/FEE001.c ****             /* If the block is found */
2910:../Dave/Generated/src/FEE001/FEE001.c ****             if(Index != FEE001_LOG_BLOCK_NOT_FOUND)
2911:../Dave/Generated/src/FEE001/FEE001.c ****             {
2912:../Dave/Generated/src/FEE001/FEE001.c ****                /*Point to the cache table entry for block to be evaluated */
2913:../Dave/Generated/src/FEE001/FEE001.c ****                CachePtr = CachePtr + Index;
2914:../Dave/Generated/src/FEE001/FEE001.c ****                /* EVALUATION RESULT : BLOCK INCONSISTENT */
2915:../Dave/Generated/src/FEE001/FEE001.c ****                /* Mark the block as inconsistent*/
2916:../Dave/Generated/src/FEE001/FEE001.c ****                if( CachePtr->Address == 0U )
2917:../Dave/Generated/src/FEE001/FEE001.c ****                {
2918:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Address = 0xFFFFFFFFU;
2919:../Dave/Generated/src/FEE001/FEE001.c ****                }
2920:../Dave/Generated/src/FEE001/FEE001.c ****             }
2921:../Dave/Generated/src/FEE001/FEE001.c ****             else
2922:../Dave/Generated/src/FEE001/FEE001.c ****             {
2923:../Dave/Generated/src/FEE001/FEE001.c ****                /* ignore the block */
2924:../Dave/Generated/src/FEE001/FEE001.c ****             }
2925:../Dave/Generated/src/FEE001/FEE001.c ****          }
2926:../Dave/Generated/src/FEE001/FEE001.c **** 
2927:../Dave/Generated/src/FEE001/FEE001.c ****            /* Prepare for the next block */
2928:../Dave/Generated/src/FEE001/FEE001.c ****            StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
2929:../Dave/Generated/src/FEE001/FEE001.c ****            StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
2930:../Dave/Generated/src/FEE001/FEE001.c ****        }
2931:../Dave/Generated/src/FEE001/FEE001.c **** 
2932:../Dave/Generated/src/FEE001/FEE001.c ****          /* Check if all blocks have been read */
2933:../Dave/Generated/src/FEE001/FEE001.c ****          if( StateDataPtr->FeeCurrBankSrcAddr == EndAddr )
2934:../Dave/Generated/src/FEE001/FEE001.c ****          {
2935:../Dave/Generated/src/FEE001/FEE001.c ****             /* Goto the next state */
2936:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCacheState = FEE001_CACHE_UPDATE_COMPLETE;
2937:../Dave/Generated/src/FEE001/FEE001.c ****          }
2938:../Dave/Generated/src/FEE001/FEE001.c ****          else
2939:../Dave/Generated/src/FEE001/FEE001.c ****          {
2940:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCacheBlockRead();
2941:../Dave/Generated/src/FEE001/FEE001.c ****          }
2942:../Dave/Generated/src/FEE001/FEE001.c ****          break;
2943:../Dave/Generated/src/FEE001/FEE001.c ****       }/* End of Default*/
2944:../Dave/Generated/src/FEE001/FEE001.c ****       
2945:../Dave/Generated/src/FEE001/FEE001.c ****      }/* End of switch*/
2946:../Dave/Generated/src/FEE001/FEE001.c ****     
2947:../Dave/Generated/src/FEE001/FEE001.c ****    }/* End of While*/
2948:../Dave/Generated/src/FEE001/FEE001.c ****   
2949:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lUpdateCache*/
2950:../Dave/Generated/src/FEE001/FEE001.c **** 
2951:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
2952:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax             :  void Fee_lUpdateCacheBlockRead(void)                 **
2953:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2954:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async         :  Synchronous                                          **
2955:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2956:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy         :  Non reentrant                                        **
2957:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2958:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in-out):  None                                                 **
2959:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2960:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out)   :  None                                                 **
2961:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2962:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value       :  None                                                 **
2963:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2964:../Dave/Generated/src/FEE001/FEE001.c **** ** Description        :  This utility function is a part of the Cache Update  **
2965:../Dave/Generated/src/FEE001/FEE001.c **** **                       function and will update the cache which contains    **
2966:../Dave/Generated/src/FEE001/FEE001.c **** **                       the latest information about the DFLASH contents.    **
2967:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
2968:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lUpdateCacheBlockRead(void)
2969:../Dave/Generated/src/FEE001/FEE001.c **** {
2970:../Dave/Generated/src/FEE001/FEE001.c **** 
2971:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType     *StateDataPtr;
2972:../Dave/Generated/src/FEE001/FEE001.c ****    
2973:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
2974:../Dave/Generated/src/FEE001/FEE001.c **** 
2975:../Dave/Generated/src/FEE001/FEE001.c ****    /* Set the Write Source pointer to the next block */
2976:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCurrBankSrcAddr = StateDataPtr->FeeCurrBankSrcAddr -
2977:../Dave/Generated/src/FEE001/FEE001.c ****                                                  FEE001_DFLASH_BLOCK_SIZE;
2978:../Dave/Generated/src/FEE001/FEE001.c **** 
2979:../Dave/Generated/src/FEE001/FEE001.c ****    /* Clear all error status flags before flash operation*/
2980:../Dave/Generated/src/FEE001/FEE001.c ****    FLASH003_ClearStatus();
2981:../Dave/Generated/src/FEE001/FEE001.c ****    
2982:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeIntrJobResult = (FEE001_JobResultType)FLASH003_ReadBlock(
2983:../Dave/Generated/src/FEE001/FEE001.c ****                   (uint32_t)StateDataPtr->FeeCurrBankSrcAddr,
2984:../Dave/Generated/src/FEE001/FEE001.c ****                   (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer);
2985:../Dave/Generated/src/FEE001/FEE001.c **** 
2986:../Dave/Generated/src/FEE001/FEE001.c ****    /* Increment number of read block counter  */
2987:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt = 
2988:../Dave/Generated/src/FEE001/FEE001.c ****                                   StateDataPtr->FeeWrittenDFlashBlocksCnt + 1U;
2989:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lUpdateCacheBlockRead */
2990:../Dave/Generated/src/FEE001/FEE001.c **** 
2991:../Dave/Generated/src/FEE001/FEE001.c **** 
2992:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
2993:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax             :  void Fee_lCacheEmptyBlkEval(uint32_t endAddr)        **
2994:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2995:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async         :  Synchronous                                          **
2996:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2997:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy         :  Non reentrant                                        **
2998:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
2999:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in)    :  None                                                 **
3000:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3001:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out)   :  None                                                 **
3002:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3003:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value       :  None                                                 **
3004:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3005:../Dave/Generated/src/FEE001/FEE001.c **** ** Description        :  This utility function  will search through the       **
3006:../Dave/Generated/src/FEE001/FEE001.c **** **                       DFLASH from the bottom of the bank until a           **
3007:../Dave/Generated/src/FEE001/FEE001.c **** **                       readable data block is found                         **
3008:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3009:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lCacheEmptyBlkEval(uint32_t EndAddr)
3010:../Dave/Generated/src/FEE001/FEE001.c **** {
3011:../Dave/Generated/src/FEE001/FEE001.c **** 
3012:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t               BlockNumber;
3013:../Dave/Generated/src/FEE001/FEE001.c ****    status_t              RetVal;
3014:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_BlockHeaderType   *Ptr;
3015:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType     *StateDataPtr;
3016:../Dave/Generated/src/FEE001/FEE001.c ****    
3017:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
3018:../Dave/Generated/src/FEE001/FEE001.c **** 
3019:../Dave/Generated/src/FEE001/FEE001.c ****    /* Clear all error status flags before flash operation*/
3020:../Dave/Generated/src/FEE001/FEE001.c ****    FLASH003_ClearStatus();
3021:../Dave/Generated/src/FEE001/FEE001.c **** 
3022:../Dave/Generated/src/FEE001/FEE001.c ****    /* Read the header word (32 bit values) */
3023:../Dave/Generated/src/FEE001/FEE001.c ****    RetVal = (status_t)FLASH003_ReadWord(
3024:../Dave/Generated/src/FEE001/FEE001.c ****                           (uint32_t)StateDataPtr->FeeCurrBankSrcAddr,
3025:../Dave/Generated/src/FEE001/FEE001.c ****                           (uint32_t *)(void*)StateDataPtr->FeeReadWriteBuffer);
3026:../Dave/Generated/src/FEE001/FEE001.c **** 
3027:../Dave/Generated/src/FEE001/FEE001.c ****    /* Check if DBER is found in the header*/
3028:../Dave/Generated/src/FEE001/FEE001.c ****    if(RetVal != 0U)
3029:../Dave/Generated/src/FEE001/FEE001.c ****    {
3030:../Dave/Generated/src/FEE001/FEE001.c ****       /* Cache table entries cannot be updated as the 
3031:../Dave/Generated/src/FEE001/FEE001.c ****          header number is unknown */
3032:../Dave/Generated/src/FEE001/FEE001.c ****       /* Check if the Next Free Block is not updated */
3033:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeNextFreeBlockAddr == 0U)
3034:../Dave/Generated/src/FEE001/FEE001.c ****       {
3035:../Dave/Generated/src/FEE001/FEE001.c ****          /* Update the free block location of the valid bank */
3036:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeNextFreeBlockAddr =StateDataPtr->FeeCurrBankSrcAddr +
3037:../Dave/Generated/src/FEE001/FEE001.c ****                                          FEE001_DFLASH_BLOCK_SIZE;
3038:../Dave/Generated/src/FEE001/FEE001.c ****                                    
3039:../Dave/Generated/src/FEE001/FEE001.c ****       }
3040:../Dave/Generated/src/FEE001/FEE001.c **** 
3041:../Dave/Generated/src/FEE001/FEE001.c ****       /* Check if all blocks have been read */
3042:../Dave/Generated/src/FEE001/FEE001.c ****       if( StateDataPtr->FeeCurrBankSrcAddr == EndAddr )
3043:../Dave/Generated/src/FEE001/FEE001.c ****       {
3044:../Dave/Generated/src/FEE001/FEE001.c ****          /* Goto the next state */
3045:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeCacheState = FEE001_CACHE_UPDATE_COMPLETE;
3046:../Dave/Generated/src/FEE001/FEE001.c ****       }
3047:../Dave/Generated/src/FEE001/FEE001.c ****       else
3048:../Dave/Generated/src/FEE001/FEE001.c ****       {
3049:../Dave/Generated/src/FEE001/FEE001.c ****          /* Move to the next block */
3050:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeCurrBankSrcAddr -= FEE001_DFLASH_BLOCK_SIZE;
3051:../Dave/Generated/src/FEE001/FEE001.c **** 
3052:../Dave/Generated/src/FEE001/FEE001.c ****          /* Stay in the same state as non-zero data block has not */
3053:../Dave/Generated/src/FEE001/FEE001.c ****          /*  yet been found */
3054:../Dave/Generated/src/FEE001/FEE001.c ****       }
3055:../Dave/Generated/src/FEE001/FEE001.c ****    }
3056:../Dave/Generated/src/FEE001/FEE001.c ****    /* DBER is NOT found */
3057:../Dave/Generated/src/FEE001/FEE001.c ****    else
3058:../Dave/Generated/src/FEE001/FEE001.c ****    {
3059:../Dave/Generated/src/FEE001/FEE001.c ****       /* Evaluate the header read */
3060:../Dave/Generated/src/FEE001/FEE001.c ****       Ptr = (FEE001_BlockHeaderType *)(void *)StateDataPtr->FeeReadWriteBuffer;
3061:../Dave/Generated/src/FEE001/FEE001.c ****       BlockNumber = Ptr->BlockNumber;
3062:../Dave/Generated/src/FEE001/FEE001.c **** 
3063:../Dave/Generated/src/FEE001/FEE001.c ****       /* Check if the block number is non-empty */
3064:../Dave/Generated/src/FEE001/FEE001.c ****       if( BlockNumber != 0xFFU )
3065:../Dave/Generated/src/FEE001/FEE001.c ****       {
3066:../Dave/Generated/src/FEE001/FEE001.c ****          /* Goto the next state */
3067:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeCacheState = FEE001_CACHE_NEXT_FREE_BLK_UPDATED;
3068:../Dave/Generated/src/FEE001/FEE001.c **** 
3069:../Dave/Generated/src/FEE001/FEE001.c ****          /* Check if the Next Free Block is not updated */
3070:../Dave/Generated/src/FEE001/FEE001.c ****          if(StateDataPtr->FeeNextFreeBlockAddr == 0U)
3071:../Dave/Generated/src/FEE001/FEE001.c ****          {
3072:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the free block location of the valid bank */
3073:../Dave/Generated/src/FEE001/FEE001.c ****            StateDataPtr->FeeNextFreeBlockAddr =
3074:../Dave/Generated/src/FEE001/FEE001.c ****                StateDataPtr->FeeCurrBankSrcAddr + FEE001_DFLASH_BLOCK_SIZE;
3075:../Dave/Generated/src/FEE001/FEE001.c ****          }
3076:../Dave/Generated/src/FEE001/FEE001.c **** 
3077:../Dave/Generated/src/FEE001/FEE001.c ****          /* Clear all error status flags before flash operation*/
3078:../Dave/Generated/src/FEE001/FEE001.c ****          FLASH003_ClearStatus();
3079:../Dave/Generated/src/FEE001/FEE001.c ****          
3080:../Dave/Generated/src/FEE001/FEE001.c ****          /* Read the complete block */   
3081:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeIntrJobResult =
3082:../Dave/Generated/src/FEE001/FEE001.c ****         		          (FEE001_JobResultType)FLASH003_ReadBlock
3083:../Dave/Generated/src/FEE001/FEE001.c ****         		          ((uint32_t)StateDataPtr->FeeCurrBankSrcAddr,
3084:../Dave/Generated/src/FEE001/FEE001.c ****                           (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer);
3085:../Dave/Generated/src/FEE001/FEE001.c **** 
3086:../Dave/Generated/src/FEE001/FEE001.c ****          /* Increment the block count for the block */
3087:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeWrittenDFlashBlocksCnt = 
3088:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeWrittenDFlashBlocksCnt + 1U;
3089:../Dave/Generated/src/FEE001/FEE001.c ****       }
3090:../Dave/Generated/src/FEE001/FEE001.c ****       /* Block number field is empty */
3091:../Dave/Generated/src/FEE001/FEE001.c ****       else
3092:../Dave/Generated/src/FEE001/FEE001.c ****       {
3093:../Dave/Generated/src/FEE001/FEE001.c ****          /* Check if all blocks have been read */
3094:../Dave/Generated/src/FEE001/FEE001.c ****          if( StateDataPtr->FeeCurrBankSrcAddr == EndAddr )
3095:../Dave/Generated/src/FEE001/FEE001.c ****          {
3096:../Dave/Generated/src/FEE001/FEE001.c ****             /* Check if the Next Free Block is not updated */
3097:../Dave/Generated/src/FEE001/FEE001.c ****             if(StateDataPtr->FeeNextFreeBlockAddr == 0U)
3098:../Dave/Generated/src/FEE001/FEE001.c ****             {
3099:../Dave/Generated/src/FEE001/FEE001.c ****                /* Update the free block location of the valid bank */
3100:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeNextFreeBlockAddr = EndAddr;
3101:../Dave/Generated/src/FEE001/FEE001.c ****             }
3102:../Dave/Generated/src/FEE001/FEE001.c ****             /* Goto the next state */               
3103:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCacheState = FEE001_CACHE_UPDATE_COMPLETE;
3104:../Dave/Generated/src/FEE001/FEE001.c ****          }
3105:../Dave/Generated/src/FEE001/FEE001.c ****          else
3106:../Dave/Generated/src/FEE001/FEE001.c ****          {
3107:../Dave/Generated/src/FEE001/FEE001.c ****             /* Move to the next block */
3108:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCurrBankSrcAddr -= FEE001_DFLASH_BLOCK_SIZE;
3109:../Dave/Generated/src/FEE001/FEE001.c **** 
3110:../Dave/Generated/src/FEE001/FEE001.c ****             /* Stay in the same state as non-zero data block has not */
3111:../Dave/Generated/src/FEE001/FEE001.c ****             /*  yet been found */
3112:../Dave/Generated/src/FEE001/FEE001.c ****          }
3113:../Dave/Generated/src/FEE001/FEE001.c ****       }
3114:../Dave/Generated/src/FEE001/FEE001.c ****    }
3115:../Dave/Generated/src/FEE001/FEE001.c **** } /* End of Fee_lCacheZeroBlkEval */
3116:../Dave/Generated/src/FEE001/FEE001.c **** 
3117:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3118:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax             : void Fee_lEvalBlockStatus( uint8_t BlockNumber)       **
3119:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3120:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async         : Synchronous                                           **
3121:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3122:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy         : Non reentrant                                         **
3123:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3124:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in)    : Block Number                                          **
3125:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3126:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out)   : None                                                  **
3127:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3128:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value       : None                                                  **
3129:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3130:../Dave/Generated/src/FEE001/FEE001.c **** ** Description        : This function evaluates the block status and updates  **
3131:../Dave/Generated/src/FEE001/FEE001.c **** **                      the cache (if required).                              **
3132:../Dave/Generated/src/FEE001/FEE001.c **** **                      Entry Criteria:                                       **
3133:../Dave/Generated/src/FEE001/FEE001.c **** **                              1) No DBER                                    **
3134:../Dave/Generated/src/FEE001/FEE001.c **** **                              2) Block number is non zero                   **
3135:../Dave/Generated/src/FEE001/FEE001.c **** **                      Possible results:                                     **
3136:../Dave/Generated/src/FEE001/FEE001.c **** **                              1) cache updated: consistent                  **
3137:../Dave/Generated/src/FEE001/FEE001.c **** **                              2) cache updated: inconsistent                **
3138:../Dave/Generated/src/FEE001/FEE001.c **** **                              3) cache already updated (no actions done)    **
3139:../Dave/Generated/src/FEE001/FEE001.c **** **                              4) cannot evaluate - requires more blocks     **
3140:../Dave/Generated/src/FEE001/FEE001.c **** **                                                   to be read               **
3141:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3142:../Dave/Generated/src/FEE001/FEE001.c **** 
3143:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lEvalBlockStatus( uint8_t BlockNumber)
3144:../Dave/Generated/src/FEE001/FEE001.c **** {
3145:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_BlockHeaderType  *Ptr;
3146:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_CacheType        *CachePtr;
3147:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType    *StateDataPtr;
3148:../Dave/Generated/src/FEE001/FEE001.c ****    uint16_t Size;
3149:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t  Index;
3150:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t  StatusByte;
3151:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t PhysicalBlocks;
3152:../Dave/Generated/src/FEE001/FEE001.c ****    
3153:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
3154:../Dave/Generated/src/FEE001/FEE001.c ****     
3155:../Dave/Generated/src/FEE001/FEE001.c **** 
3156:../Dave/Generated/src/FEE001/FEE001.c ****    Ptr = (FEE001_BlockHeaderType *)(void *)StateDataPtr->FeeReadWriteBuffer;
3157:../Dave/Generated/src/FEE001/FEE001.c ****    StatusByte = Ptr->Status;
3158:../Dave/Generated/src/FEE001/FEE001.c **** 
3159:../Dave/Generated/src/FEE001/FEE001.c ****    CachePtr = StateDataPtr->FeeBlockInfo;
3160:../Dave/Generated/src/FEE001/FEE001.c **** 
3161:../Dave/Generated/src/FEE001/FEE001.c ****    /* Get the Index of the read block from the user configuration */
3162:../Dave/Generated/src/FEE001/FEE001.c ****    Index = Fee_lGetUsrBlockIndex(BlockNumber);
3163:../Dave/Generated/src/FEE001/FEE001.c **** 
3164:../Dave/Generated/src/FEE001/FEE001.c ****    /* If the block is found */
3165:../Dave/Generated/src/FEE001/FEE001.c ****    if( (Index != FEE001_LOG_BLOCK_NOT_FOUND) )
3166:../Dave/Generated/src/FEE001/FEE001.c ****    {
3167:../Dave/Generated/src/FEE001/FEE001.c ****       /* Point to the cache table entry for the block to be evaluated */
3168:../Dave/Generated/src/FEE001/FEE001.c ****       CachePtr = CachePtr + Index;
3169:../Dave/Generated/src/FEE001/FEE001.c **** 
3170:../Dave/Generated/src/FEE001/FEE001.c ****       /* Store Index of current block */
3171:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCacheUpdateIndex = Index;
3172:../Dave/Generated/src/FEE001/FEE001.c **** 
3173:../Dave/Generated/src/FEE001/FEE001.c ****       /* Check if cache table is updated for the given block */
3174:../Dave/Generated/src/FEE001/FEE001.c ****       /* Address = 0U => cache table not yet updated */
3175:../Dave/Generated/src/FEE001/FEE001.c ****       if(CachePtr->Address == 0U)
3176:../Dave/Generated/src/FEE001/FEE001.c ****       {
3177:../Dave/Generated/src/FEE001/FEE001.c ****          /* If the starting block of the block found */
3178:../Dave/Generated/src/FEE001/FEE001.c ****          if((StatusByte & FEE001_START_BIT ) != 0U)
3179:../Dave/Generated/src/FEE001/FEE001.c ****          {
3180:../Dave/Generated/src/FEE001/FEE001.c ****             /* Update the cache with block Address */
3181:../Dave/Generated/src/FEE001/FEE001.c ****             CachePtr->Address = StateDataPtr->FeeCurrBankSrcAddr;
3182:../Dave/Generated/src/FEE001/FEE001.c ****             
3183:../Dave/Generated/src/FEE001/FEE001.c ****             /* if the Valid bit for the logical block is set */
3184:../Dave/Generated/src/FEE001/FEE001.c ****             if((StatusByte & (FEE001_VALID_BIT) ) != 0U)
3185:../Dave/Generated/src/FEE001/FEE001.c ****             {
3186:../Dave/Generated/src/FEE001/FEE001.c ****                CachePtr->Status.Valid = 1U;
3187:../Dave/Generated/src/FEE001/FEE001.c **** 
3188:../Dave/Generated/src/FEE001/FEE001.c ****                /* if the CRC bit for the logical block is set */
3189:../Dave/Generated/src/FEE001/FEE001.c ****                if((StatusByte & (FEE001_CRC_BIT) ) != 0U)
3190:../Dave/Generated/src/FEE001/FEE001.c ****                {
3191:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Status.Crc = 1U;
3192:../Dave/Generated/src/FEE001/FEE001.c ****                }
3193:../Dave/Generated/src/FEE001/FEE001.c ****                else
3194:../Dave/Generated/src/FEE001/FEE001.c ****                {
3195:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Status.Crc = 0U;
3196:../Dave/Generated/src/FEE001/FEE001.c ****                }
3197:../Dave/Generated/src/FEE001/FEE001.c ****             }
3198:../Dave/Generated/src/FEE001/FEE001.c ****             else
3199:../Dave/Generated/src/FEE001/FEE001.c ****             {
3200:../Dave/Generated/src/FEE001/FEE001.c ****                CachePtr->Status.Valid = 0U;
3201:../Dave/Generated/src/FEE001/FEE001.c ****             }
3202:../Dave/Generated/src/FEE001/FEE001.c ****             
3203:../Dave/Generated/src/FEE001/FEE001.c ****             /* if number of blocks stored in DFLASH for this log. block */
3204:../Dave/Generated/src/FEE001/FEE001.c ****             /* is same as mentioned according to size in user config   */
3205:../Dave/Generated/src/FEE001/FEE001.c ****             Size = (uint16_t)(FEE001_CfgPtr->FeeBlockConfigPtr[Index].Size);
3206:../Dave/Generated/src/FEE001/FEE001.c ****             PhysicalBlocks = Fee_lGetDFLASHPhysicalBlocks(Size);
3207:../Dave/Generated/src/FEE001/FEE001.c **** 
3208:../Dave/Generated/src/FEE001/FEE001.c ****             if( StateDataPtr->FeeWrittenDFlashBlocksCnt == PhysicalBlocks)
3209:../Dave/Generated/src/FEE001/FEE001.c ****             {
3210:../Dave/Generated/src/FEE001/FEE001.c ****                /* EVALUATION RESULT : BLOCK CONSISTENT */
3211:../Dave/Generated/src/FEE001/FEE001.c ****                /* mark the log block as consistent  */
3212:../Dave/Generated/src/FEE001/FEE001.c ****                CachePtr->Status.Consistent = 1U;
3213:../Dave/Generated/src/FEE001/FEE001.c **** 
3214:../Dave/Generated/src/FEE001/FEE001.c ****             }
3215:../Dave/Generated/src/FEE001/FEE001.c ****             else
3216:../Dave/Generated/src/FEE001/FEE001.c ****             {
3217:../Dave/Generated/src/FEE001/FEE001.c ****                /* EVALUATION RESULT : BLOCK INCONSISTENT */
3218:../Dave/Generated/src/FEE001/FEE001.c ****                /* mark the log block as consistent  */
3219:../Dave/Generated/src/FEE001/FEE001.c ****                /* Exception: If the block is invalid, then don't mark as
3220:../Dave/Generated/src/FEE001/FEE001.c ****                   INCONSISTENT */
3221:../Dave/Generated/src/FEE001/FEE001.c ****                if(CachePtr->Status.Valid == 0U)
3222:../Dave/Generated/src/FEE001/FEE001.c ****                {
3223:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Status.Consistent = 1U;
3224:../Dave/Generated/src/FEE001/FEE001.c ****                }
3225:../Dave/Generated/src/FEE001/FEE001.c ****                else
3226:../Dave/Generated/src/FEE001/FEE001.c ****                {
3227:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Status.Consistent = 0U;
3228:../Dave/Generated/src/FEE001/FEE001.c ****                }
3229:../Dave/Generated/src/FEE001/FEE001.c ****             }
3230:../Dave/Generated/src/FEE001/FEE001.c **** 
3231:../Dave/Generated/src/FEE001/FEE001.c ****             /* Initialise the Index, block block count for the next read */
3232:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
3233:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
3234:../Dave/Generated/src/FEE001/FEE001.c ****          }
3235:../Dave/Generated/src/FEE001/FEE001.c ****          else
3236:../Dave/Generated/src/FEE001/FEE001.c ****          {
3237:../Dave/Generated/src/FEE001/FEE001.c ****            /* EVALUATION RESULT : Cant evaluate */ 
3238:../Dave/Generated/src/FEE001/FEE001.c ****          }
3239:../Dave/Generated/src/FEE001/FEE001.c ****       }
3240:../Dave/Generated/src/FEE001/FEE001.c ****       else
3241:../Dave/Generated/src/FEE001/FEE001.c ****       {
3242:../Dave/Generated/src/FEE001/FEE001.c ****          /* EVALUATION RESULT : CACHE ALREADY UPDATED */
3243:../Dave/Generated/src/FEE001/FEE001.c ****          /* If cache table is already updated for the block, no need to */
3244:../Dave/Generated/src/FEE001/FEE001.c ****          /* evaluate the block */
3245:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
3246:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
3247:../Dave/Generated/src/FEE001/FEE001.c ****       }
3248:../Dave/Generated/src/FEE001/FEE001.c ****    }
3249:../Dave/Generated/src/FEE001/FEE001.c ****    else
3250:../Dave/Generated/src/FEE001/FEE001.c ****    {      
3251:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
3252:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
3253:../Dave/Generated/src/FEE001/FEE001.c ****    }
3254:../Dave/Generated/src/FEE001/FEE001.c **** }/*End of Fee_lEvalBlockStatus */
3255:../Dave/Generated/src/FEE001/FEE001.c **** 
3256:../Dave/Generated/src/FEE001/FEE001.c **** 
3257:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3258:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          :  uint8_t Fee_lGetUsrBlockIndex(uint8_t BlockNumber)      **
3259:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3260:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3261:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3262:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3263:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3264:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  BlockNumber - Number of logical block                   **
3265:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3266:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3267:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3268:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  uint8_t                                                 **
3269:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3270:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     :  This utility function will return the Index (location)  **
3271:../Dave/Generated/src/FEE001/FEE001.c **** **                    of the block in the user configuration.                 **
3272:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3273:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3274:../Dave/Generated/src/FEE001/FEE001.c **** 
3275:../Dave/Generated/src/FEE001/FEE001.c **** static uint8_t Fee_lGetUsrBlockIndex(uint8_t BlockNumber)
3276:../Dave/Generated/src/FEE001/FEE001.c **** {
  25              		.loc 1 3276 0
  26              		.cfi_startproc
  27              	.LVL0:
  28 0000 30B5     		push	{r4, r5, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 12
  31              		.cfi_offset 4, -12
  32              		.cfi_offset 5, -8
  33              		.cfi_offset 14, -4
3277:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t          Index;
3278:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_BlockType  *BlockPtr;
3279:../Dave/Generated/src/FEE001/FEE001.c **** 
3280:../Dave/Generated/src/FEE001/FEE001.c ****    Index = 0U;
3281:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = &(FEE001_CfgPtr->FeeBlockConfigPtr[Index]);
  34              		.loc 1 3281 0
  35 0002 0B4B     		ldr	r3, .L9
3282:../Dave/Generated/src/FEE001/FEE001.c **** 
3283:../Dave/Generated/src/FEE001/FEE001.c ****    /* check for max configured block count is reached or not and block number
3284:../Dave/Generated/src/FEE001/FEE001.c ****     * is matched against the  configured block numbers */
3285:../Dave/Generated/src/FEE001/FEE001.c ****    while( (Index < FEE001_CfgPtr->FeeBlkCnt) &&
  36              		.loc 1 3285 0
  37 0004 0022     		mov	r2, #0
3281:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = &(FEE001_CfgPtr->FeeBlockConfigPtr[Index]);
  38              		.loc 1 3281 0
  39 0006 1968     		ldr	r1, [r3]
  40 0008 4D68     		ldr	r5, [r1, #4]
  41              	.LVL1:
  42              		.loc 1 3285 0
  43 000a 097A     		ldrb	r1, [r1, #8]
  44              	.LVL2:
  45              	.L4:
  46 000c D3B2     		uxtb	r3, r2
  47              	.LVL3:
  48              		.loc 1 3285 0 is_stmt 0 discriminator 1
  49 000e 8B42     		cmp	r3, r1
  50 0010 03D3     		bcc	.L2
  51              	.LVL4:
  52              	.L5:
3286:../Dave/Generated/src/FEE001/FEE001.c ****           (BlockPtr->BlockNumber != BlockNumber)
3287:../Dave/Generated/src/FEE001/FEE001.c ****         )
3288:../Dave/Generated/src/FEE001/FEE001.c ****    {
3289:../Dave/Generated/src/FEE001/FEE001.c ****       Index++;
3290:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr++;
3291:../Dave/Generated/src/FEE001/FEE001.c ****    }
3292:../Dave/Generated/src/FEE001/FEE001.c **** 
3293:../Dave/Generated/src/FEE001/FEE001.c ****    if( Index == FEE001_CfgPtr->FeeBlkCnt )
  53              		.loc 1 3293 0 is_stmt 1
  54 0012 8B42     		cmp	r3, r1
  55 0014 09D1     		bne	.L3
3294:../Dave/Generated/src/FEE001/FEE001.c ****    {
3295:../Dave/Generated/src/FEE001/FEE001.c ****       Index = FEE001_LOG_BLOCK_NOT_FOUND;
  56              		.loc 1 3295 0
  57 0016 FF23     		mov	r3, #255
  58              	.LVL5:
  59 0018 07E0     		b	.L3
  60              	.LVL6:
  61              	.L2:
  62 001a 0132     		add	r2, r2, #1
  63              	.LVL7:
3275:../Dave/Generated/src/FEE001/FEE001.c **** static uint8_t Fee_lGetUsrBlockIndex(uint8_t BlockNumber)
  64              		.loc 1 3275 0 discriminator 2
  65 001c 9400     		lsl	r4, r2, #2
  66 001e 2C19     		add	r4, r5, r4
  67 0020 043C     		sub	r4, r4, #4
3285:../Dave/Generated/src/FEE001/FEE001.c ****    while( (Index < FEE001_CfgPtr->FeeBlkCnt) &&
  68              		.loc 1 3285 0 discriminator 2
  69 0022 2478     		ldrb	r4, [r4]
  70 0024 8442     		cmp	r4, r0
  71 0026 F1D1     		bne	.L4
  72 0028 F3E7     		b	.L5
  73              	.LVL8:
  74              	.L3:
3296:../Dave/Generated/src/FEE001/FEE001.c ****    }
3297:../Dave/Generated/src/FEE001/FEE001.c ****    return (Index);
3298:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lGetUsrBlockIndex */
  75              		.loc 1 3298 0
  76 002a 181C     		mov	r0, r3
  77              	.LVL9:
  78              		@ sp needed for prologue
  79 002c 30BD     		pop	{r4, r5, pc}
  80              	.L10:
  81 002e C046     		.align	2
  82              	.L9:
  83 0030 00000000 		.word	FEE001_CfgPtr
  84              		.cfi_endproc
  85              	.LFE61:
  87              		.section	.text.Fee_lGetFreeDFLASHBlocks,"ax",%progbits
  88              		.align	1
  89              		.code	16
  90              		.thumb_func
  92              	Fee_lGetFreeDFLASHBlocks:
  93              	.LFB63:
3299:../Dave/Generated/src/FEE001/FEE001.c **** 
3300:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3301:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          :  uint32_t Fee_lGetDFLASHPhysicalBlocks(uint16_t Size)    **
3302:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3303:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3304:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3305:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3306:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3307:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  BlockNumber - size of the user block                    **
3308:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3309:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3310:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3311:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  uint32_t                                                **
3312:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3313:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     :  This routine will calculate and return the number of    **
3314:../Dave/Generated/src/FEE001/FEE001.c **** **                    DFLASH blocks required for a logical block size.        **
3315:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3316:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3317:../Dave/Generated/src/FEE001/FEE001.c **** 
3318:../Dave/Generated/src/FEE001/FEE001.c **** static uint32_t Fee_lGetDFLASHPhysicalBlocks(uint16_t Size)
3319:../Dave/Generated/src/FEE001/FEE001.c **** {
3320:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t  PhysicalBlocks;
3321:../Dave/Generated/src/FEE001/FEE001.c ****    PhysicalBlocks = 1U;
3322:../Dave/Generated/src/FEE001/FEE001.c ****    /* If size is greater than the  */
3323:../Dave/Generated/src/FEE001/FEE001.c ****    if( Size > FEE001_BLOCK1_DATA_SIZE )
3324:../Dave/Generated/src/FEE001/FEE001.c ****    {
3325:../Dave/Generated/src/FEE001/FEE001.c ****       Size = Size - FEE001_BLOCK1_DATA_SIZE;
3326:../Dave/Generated/src/FEE001/FEE001.c ****       PhysicalBlocks++;
3327:../Dave/Generated/src/FEE001/FEE001.c **** 
3328:../Dave/Generated/src/FEE001/FEE001.c ****       while(Size > FEE001_BLOCK2_DATA_SIZE)
3329:../Dave/Generated/src/FEE001/FEE001.c ****       {
3330:../Dave/Generated/src/FEE001/FEE001.c ****        PhysicalBlocks++;
3331:../Dave/Generated/src/FEE001/FEE001.c ****          Size = Size - FEE001_BLOCK2_DATA_SIZE;
3332:../Dave/Generated/src/FEE001/FEE001.c ****       }
3333:../Dave/Generated/src/FEE001/FEE001.c ****    }
3334:../Dave/Generated/src/FEE001/FEE001.c ****    return(PhysicalBlocks);
3335:../Dave/Generated/src/FEE001/FEE001.c **** }/*End of Fee_lGetDFLASHBlocks */
3336:../Dave/Generated/src/FEE001/FEE001.c **** 
3337:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3338:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : uint32_t Fee_lGetFreeDFLASHBLocks(void)                  **
3339:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3340:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3341:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3342:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3343:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3344:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (IN) :  None                                                    **
3345:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3346:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3347:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3348:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  uint32_t                                                **
3349:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3350:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     :  This routine will calculate the number of empty DFLASH  **
3351:../Dave/Generated/src/FEE001/FEE001.c **** **                    blocks remaining in the bank.                           **
3352:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3353:../Dave/Generated/src/FEE001/FEE001.c **** 
3354:../Dave/Generated/src/FEE001/FEE001.c **** static uint32_t Fee_lGetFreeDFLASHBlocks(void)
3355:../Dave/Generated/src/FEE001/FEE001.c **** {
  94              		.loc 1 3355 0
  95              		.cfi_startproc
3356:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t BaseAddr;
3357:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t FreeBlocks;
3358:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType     *StateDataPtr;
3359:../Dave/Generated/src/FEE001/FEE001.c **** 
3360:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
  96              		.loc 1 3360 0
  97 0000 074B     		ldr	r3, .L14
  98 0002 1868     		ldr	r0, [r3]
  99 0004 0268     		ldr	r2, [r0]
 100              	.LVL10:
3361:../Dave/Generated/src/FEE001/FEE001.c **** 
3362:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeCurrBank == 0U)
 101              		.loc 1 3362 0
 102 0006 117E     		ldrb	r1, [r2, #24]
 103 0008 C907     		lsl	r1, r1, #31
 104 000a 01D4     		bmi	.L13
3363:../Dave/Generated/src/FEE001/FEE001.c ****    {
3364:../Dave/Generated/src/FEE001/FEE001.c ****       BaseAddr = FEE001_DFLASH_BANK0_BASE;
 105              		.loc 1 3364 0
 106 000c 054B     		ldr	r3, .L14+4
 107 000e 00E0     		b	.L12
 108              	.L13:
3365:../Dave/Generated/src/FEE001/FEE001.c ****    }
3366:../Dave/Generated/src/FEE001/FEE001.c ****    else
3367:../Dave/Generated/src/FEE001/FEE001.c ****    {
3368:../Dave/Generated/src/FEE001/FEE001.c ****       BaseAddr = FEE001_DFLASH_BANK1_BASE;
 109              		.loc 1 3368 0
 110 0010 054B     		ldr	r3, .L14+8
 111              	.L12:
 112              	.LVL11:
3369:../Dave/Generated/src/FEE001/FEE001.c ****    }
3370:../Dave/Generated/src/FEE001/FEE001.c **** 
3371:../Dave/Generated/src/FEE001/FEE001.c ****    FreeBlocks = (uint32_t)( ( (BaseAddr + FEE001_DFLASH_BANK_SIZE) -
 113              		.loc 1 3371 0
 114 0012 D06A     		ldr	r0, [r2, #44]
 115 0014 8021     		mov	r1, #128
 116 0016 1A1A     		sub	r2, r3, r0
 117              	.LVL12:
 118 0018 0B01     		lsl	r3, r1, #4
 119              	.LVL13:
 120 001a D018     		add	r0, r2, r3
 121 001c 0009     		lsr	r0, r0, #4
3372:../Dave/Generated/src/FEE001/FEE001.c ****                                    (StateDataPtr->FeeNextFreeBlockAddr)
3373:../Dave/Generated/src/FEE001/FEE001.c ****                                  ) / FEE001_DFLASH_BLOCK_SIZE );
3374:../Dave/Generated/src/FEE001/FEE001.c **** 
3375:../Dave/Generated/src/FEE001/FEE001.c ****    return (FreeBlocks);
3376:../Dave/Generated/src/FEE001/FEE001.c **** }/*End of Fee_lGetFreeDFLASHBlocks */
 122              		.loc 1 3376 0
 123              		@ sp needed for prologue
 124 001e 7047     		bx	lr
 125              	.L15:
 126              		.align	2
 127              	.L14:
 128 0020 00000000 		.word	FEE001_CfgPtr
 129 0024 00800010 		.word	268468224
 130 0028 00880010 		.word	268470272
 131              		.cfi_endproc
 132              	.LFE63:
 134              		.section	.text.Fee_lUpdateCurrBankInfo,"ax",%progbits
 135              		.align	1
 136              		.code	16
 137              		.thumb_func
 139              	Fee_lUpdateCurrBankInfo:
 140              	.LFB64:
3377:../Dave/Generated/src/FEE001/FEE001.c **** 
3378:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3379:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void Fee_lUpdateCurrSectInfo(void)                       **
3380:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3381:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3382:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3383:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3384:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3385:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  StateDataPtr :                                          **
3386:../Dave/Generated/src/FEE001/FEE001.c **** **                              Pointer to structure of FEE Global variables  **
3387:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3388:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3389:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3390:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  None                                                    **
3391:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3392:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will update the Fee Global pointers for     **
3393:../Dave/Generated/src/FEE001/FEE001.c **** **                   writing and reading operations according to current      **
3394:../Dave/Generated/src/FEE001/FEE001.c **** **                   bank                                                     **
3395:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3396:../Dave/Generated/src/FEE001/FEE001.c **** 
3397:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lUpdateCurrBankInfo(void)
3398:../Dave/Generated/src/FEE001/FEE001.c **** {
 141              		.loc 1 3398 0
 142              		.cfi_startproc
3399:../Dave/Generated/src/FEE001/FEE001.c **** 
3400:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType     *StateDataPtr;
3401:../Dave/Generated/src/FEE001/FEE001.c ****    
3402:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 143              		.loc 1 3402 0
 144 0000 0B4B     		ldr	r3, .L19
3398:../Dave/Generated/src/FEE001/FEE001.c **** {
 145              		.loc 1 3398 0
 146 0002 70B5     		push	{r4, r5, r6, lr}
 147              	.LCFI1:
 148              		.cfi_def_cfa_offset 16
 149              		.cfi_offset 4, -16
 150              		.cfi_offset 5, -12
 151              		.cfi_offset 6, -8
 152              		.cfi_offset 14, -4
 153              		.loc 1 3402 0
 154 0004 1868     		ldr	r0, [r3]
 155 0006 0B4A     		ldr	r2, .L19+4
 156 0008 0368     		ldr	r3, [r0]
 157              	.LVL14:
 158 000a 0B49     		ldr	r1, .L19+8
3403:../Dave/Generated/src/FEE001/FEE001.c **** 
3404:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeCurrBank == 0U)
 159              		.loc 1 3404 0
 160 000c 1D7E     		ldrb	r5, [r3, #24]
 161 000e 0B48     		ldr	r0, .L19+12
 162 0010 0B4C     		ldr	r4, .L19+16
 163 0012 EE07     		lsl	r6, r5, #31
 164 0014 05D4     		bmi	.L17
3405:../Dave/Generated/src/FEE001/FEE001.c ****    {
3406:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrBankSrcAddr = FEE001_DFLASH_BANK0_BASE;
 165              		.loc 1 3406 0
 166 0016 1A63     		str	r2, [r3, #48]
3407:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeGcSrcAddr = FEE001_DFLASH_BANK0_BASE;
 167              		.loc 1 3407 0
 168 0018 1A62     		str	r2, [r3, #32]
3408:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeGcDestAddr = FEE001_DFLASH_BANK1_BASE;
 169              		.loc 1 3408 0
 170 001a D961     		str	r1, [r3, #28]
3409:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrBankEndAddr = FEE001_DFLASH_BANK0_END;
 171              		.loc 1 3409 0
 172 001c 5862     		str	r0, [r3, #36]
3410:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePrevBankEndAddr = FEE001_DFLASH_BANK1_END;
 173              		.loc 1 3410 0
 174 001e 9C62     		str	r4, [r3, #40]
 175 0020 04E0     		b	.L16
 176              	.L17:
3411:../Dave/Generated/src/FEE001/FEE001.c ****    }
3412:../Dave/Generated/src/FEE001/FEE001.c ****    else
3413:../Dave/Generated/src/FEE001/FEE001.c ****    {
3414:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrBankSrcAddr = FEE001_DFLASH_BANK1_BASE;
 177              		.loc 1 3414 0
 178 0022 1963     		str	r1, [r3, #48]
3415:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeGcSrcAddr = FEE001_DFLASH_BANK1_BASE;
 179              		.loc 1 3415 0
 180 0024 1962     		str	r1, [r3, #32]
3416:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeGcDestAddr = FEE001_DFLASH_BANK0_BASE;
 181              		.loc 1 3416 0
 182 0026 DA61     		str	r2, [r3, #28]
3417:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrBankEndAddr = FEE001_DFLASH_BANK1_END;
 183              		.loc 1 3417 0
 184 0028 5C62     		str	r4, [r3, #36]
3418:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePrevBankEndAddr = FEE001_DFLASH_BANK0_END;
 185              		.loc 1 3418 0
 186 002a 9862     		str	r0, [r3, #40]
 187              	.L16:
3419:../Dave/Generated/src/FEE001/FEE001.c ****    }
3420:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lUpdateCurrBankInfo */
 188              		.loc 1 3420 0
 189              		@ sp needed for prologue
 190 002c 70BD     		pop	{r4, r5, r6, pc}
 191              	.L20:
 192 002e C046     		.align	2
 193              	.L19:
 194 0030 00000000 		.word	FEE001_CfgPtr
 195 0034 00800010 		.word	268468224
 196 0038 00880010 		.word	268470272
 197 003c FF870010 		.word	268470271
 198 0040 FF8F0010 		.word	268472319
 199              		.cfi_endproc
 200              	.LFE64:
 202              		.section	.text.Fee_lSetMarkerBlockBuffer,"ax",%progbits
 203              		.align	1
 204              		.code	16
 205              		.thumb_func
 207              	Fee_lSetMarkerBlockBuffer:
 208              	.LFB67:
3421:../Dave/Generated/src/FEE001/FEE001.c **** 
3422:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3423:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          :  void Fee_lReadMarkerBlocks(void)                        **
3424:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3425:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3426:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3427:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3428:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3429:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  None                                                    **
3430:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **                   
3431:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3432:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3433:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  None                                                    **
3434:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3435:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     :  This routine will read the Block marker contents        **
3436:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3437:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3438:../Dave/Generated/src/FEE001/FEE001.c **** 
3439:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lReadMarkerBlocks(void)
3440:../Dave/Generated/src/FEE001/FEE001.c **** {
3441:../Dave/Generated/src/FEE001/FEE001.c ****      uint8_t TmpStateMarkerVal;
3442:../Dave/Generated/src/FEE001/FEE001.c ****      uint8_t StateMarkerCnt;
3443:../Dave/Generated/src/FEE001/FEE001.c ****      uint8_t TmpBankStateVal;
3444:../Dave/Generated/src/FEE001/FEE001.c ****      uint16_t Index;
3445:../Dave/Generated/src/FEE001/FEE001.c ****      FEE001_StateDataType     *StateDataPtr;
3446:../Dave/Generated/src/FEE001/FEE001.c **** 
3447:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
3448:../Dave/Generated/src/FEE001/FEE001.c ****      /* Initialise Local variables */
3449:../Dave/Generated/src/FEE001/FEE001.c ****      TmpBankStateVal = 0U;
3450:../Dave/Generated/src/FEE001/FEE001.c **** 
3451:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeDirtyCount[0U] = 0U;
3452:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeDirtyCount[1U] = 0U;
3453:../Dave/Generated/src/FEE001/FEE001.c **** 
3454:../Dave/Generated/src/FEE001/FEE001.c ****      StateMarkerCnt = 0U;
3455:../Dave/Generated/src/FEE001/FEE001.c ****      do
3456:../Dave/Generated/src/FEE001/FEE001.c ****      {
3457:../Dave/Generated/src/FEE001/FEE001.c ****         /* Prepare the variables for state block update */
3458:../Dave/Generated/src/FEE001/FEE001.c ****         TmpBankStateVal = (uint8_t)(TmpBankStateVal << 1U);
3459:../Dave/Generated/src/FEE001/FEE001.c **** 
3460:../Dave/Generated/src/FEE001/FEE001.c ****         if(StateMarkerCnt < 4U)
3461:../Dave/Generated/src/FEE001/FEE001.c ****         {
3462:../Dave/Generated/src/FEE001/FEE001.c ****            /* Read the state block of bank 0*/
3463:../Dave/Generated/src/FEE001/FEE001.c ****            TmpStateMarkerVal = Fee_lReadVerifyMarker((uint8_t)0,
3464:../Dave/Generated/src/FEE001/FEE001.c ****                                                       StateMarkerCnt);
3465:../Dave/Generated/src/FEE001/FEE001.c ****         }
3466:../Dave/Generated/src/FEE001/FEE001.c ****         else
3467:../Dave/Generated/src/FEE001/FEE001.c ****         {
3468:../Dave/Generated/src/FEE001/FEE001.c ****            /* Read the state block of bank 1U */
3469:../Dave/Generated/src/FEE001/FEE001.c ****            TmpStateMarkerVal = Fee_lReadVerifyMarker((uint8_t)1,
3470:../Dave/Generated/src/FEE001/FEE001.c ****                                             (uint8_t)(StateMarkerCnt - 4U));
3471:../Dave/Generated/src/FEE001/FEE001.c ****         }
3472:../Dave/Generated/src/FEE001/FEE001.c **** 
3473:../Dave/Generated/src/FEE001/FEE001.c ****         switch(TmpStateMarkerVal)
3474:../Dave/Generated/src/FEE001/FEE001.c ****         {
3475:../Dave/Generated/src/FEE001/FEE001.c ****            case FEE001_MB_0:
3476:../Dave/Generated/src/FEE001/FEE001.c ****               /* Keep the state block as 0 */
3477:../Dave/Generated/src/FEE001/FEE001.c ****               break;
3478:../Dave/Generated/src/FEE001/FEE001.c **** 
3479:../Dave/Generated/src/FEE001/FEE001.c ****           case FEE001_MB_1:
3480:../Dave/Generated/src/FEE001/FEE001.c ****              /* Set the state block to 1 */
3481:../Dave/Generated/src/FEE001/FEE001.c ****              TmpBankStateVal = TmpBankStateVal | (uint8_t)0x1U;
3482:../Dave/Generated/src/FEE001/FEE001.c ****              break;
3483:../Dave/Generated/src/FEE001/FEE001.c **** 
3484:../Dave/Generated/src/FEE001/FEE001.c ****           default:
3485:../Dave/Generated/src/FEE001/FEE001.c ****              /* Update the dCount for the current bank */
3486:../Dave/Generated/src/FEE001/FEE001.c ****              /* i= 0U - 3 => B0 ; i = 4 - 7 => B1 */
3487:../Dave/Generated/src/FEE001/FEE001.c ****              /* Therefore MarkerCnt/4 gives the index 0 or 1 */
3488:../Dave/Generated/src/FEE001/FEE001.c ****              Index = (uint16_t)((uint32_t)StateMarkerCnt >> 2U);
3489:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeDirtyCount[Index]++;
3490:../Dave/Generated/src/FEE001/FEE001.c ****              break;
3491:../Dave/Generated/src/FEE001/FEE001.c ****         }
3492:../Dave/Generated/src/FEE001/FEE001.c **** 
3493:../Dave/Generated/src/FEE001/FEE001.c ****         /* Update the counter "StateBlockCnt" */
3494:../Dave/Generated/src/FEE001/FEE001.c ****         StateMarkerCnt++;
3495:../Dave/Generated/src/FEE001/FEE001.c **** 
3496:../Dave/Generated/src/FEE001/FEE001.c ****      } while(StateMarkerCnt < 8U);
3497:../Dave/Generated/src/FEE001/FEE001.c **** 
3498:../Dave/Generated/src/FEE001/FEE001.c ****      /* Update Global variables */
3499:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeInitGCState = TmpBankStateVal;
3500:../Dave/Generated/src/FEE001/FEE001.c **** 
3501:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lReadMarkerBlocks */
3502:../Dave/Generated/src/FEE001/FEE001.c **** 
3503:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3504:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : static uint8_t Fee_lReadVerifyMarker                     **
3505:../Dave/Generated/src/FEE001/FEE001.c **** **                                             (uint8_t Bank, uint8_t Block)  **
3506:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3507:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3508:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3509:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3510:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3511:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  Bank - Bank Number for read                             **
3512:../Dave/Generated/src/FEE001/FEE001.c **** **                           0 = Bank-0                                       **
3513:../Dave/Generated/src/FEE001/FEE001.c **** **                           1 = Bank-1                                       **
3514:../Dave/Generated/src/FEE001/FEE001.c **** **                    Block - Block Number among 8 blocks                     **
3515:../Dave/Generated/src/FEE001/FEE001.c **** **                           (0 - 4) = Block0 to Block4                       **
3516:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3517:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3518:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  None                                                    **
3519:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3520:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will verify the marker contents read out    **
3521:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3522:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3523:../Dave/Generated/src/FEE001/FEE001.c **** 
3524:../Dave/Generated/src/FEE001/FEE001.c **** static uint8_t Fee_lReadVerifyMarker(uint8_t Bank, uint8_t Block)
3525:../Dave/Generated/src/FEE001/FEE001.c **** {
3526:../Dave/Generated/src/FEE001/FEE001.c ****     uint32_t ArrPtr[4];
3527:../Dave/Generated/src/FEE001/FEE001.c ****     status_t FlashErrorStatus;
3528:../Dave/Generated/src/FEE001/FEE001.c ****     uint8_t ReturnVal;
3529:../Dave/Generated/src/FEE001/FEE001.c ****     uint8_t Index;
3530:../Dave/Generated/src/FEE001/FEE001.c ****     uint32_t PhyAddress;
3531:../Dave/Generated/src/FEE001/FEE001.c ****      
3532:../Dave/Generated/src/FEE001/FEE001.c ****     ReturnVal = 0U;
3533:../Dave/Generated/src/FEE001/FEE001.c **** 
3534:../Dave/Generated/src/FEE001/FEE001.c ****      if (Bank == 0U)
3535:../Dave/Generated/src/FEE001/FEE001.c ****      {
3536:../Dave/Generated/src/FEE001/FEE001.c ****         PhyAddress  = FEE001_DFLASH_BANK0_BASE;
3537:../Dave/Generated/src/FEE001/FEE001.c ****      }
3538:../Dave/Generated/src/FEE001/FEE001.c ****      else
3539:../Dave/Generated/src/FEE001/FEE001.c ****      {
3540:../Dave/Generated/src/FEE001/FEE001.c ****         PhyAddress  = FEE001_DFLASH_BANK1_BASE;
3541:../Dave/Generated/src/FEE001/FEE001.c ****      }
3542:../Dave/Generated/src/FEE001/FEE001.c ****        /* Calculate the Marker Block address from bank and Block Size*/
3543:../Dave/Generated/src/FEE001/FEE001.c ****      PhyAddress = PhyAddress +
3544:../Dave/Generated/src/FEE001/FEE001.c ****     		           ((uint32_t)FEE001_FLASH_BLOCK_SIZE * (uint32_t)Block);
3545:../Dave/Generated/src/FEE001/FEE001.c **** 
3546:../Dave/Generated/src/FEE001/FEE001.c ****      /* Clear all error status flags before flash operation*/
3547:../Dave/Generated/src/FEE001/FEE001.c ****      FLASH003_ClearStatus();
3548:../Dave/Generated/src/FEE001/FEE001.c **** 
3549:../Dave/Generated/src/FEE001/FEE001.c ****        /* Read one complete block of data (4 Words = 128 bit) from 
3550:../Dave/Generated/src/FEE001/FEE001.c ****           the targeted Marker Block */
3551:../Dave/Generated/src/FEE001/FEE001.c ****      FlashErrorStatus =  FLASH003_ReadBlock(PhyAddress, ArrPtr);
3552:../Dave/Generated/src/FEE001/FEE001.c **** 
3553:../Dave/Generated/src/FEE001/FEE001.c ****      /* Check for any flash hardware errors*/
3554:../Dave/Generated/src/FEE001/FEE001.c ****      if(0U != FlashErrorStatus)
3555:../Dave/Generated/src/FEE001/FEE001.c ****      {
3556:../Dave/Generated/src/FEE001/FEE001.c ****        /* Any Hardware errors will result in Very Dirty state*/
3557:../Dave/Generated/src/FEE001/FEE001.c ****        ReturnVal = FEE001_MB_DIRTY;
3558:../Dave/Generated/src/FEE001/FEE001.c ****      }
3559:../Dave/Generated/src/FEE001/FEE001.c ****      else
3560:../Dave/Generated/src/FEE001/FEE001.c ****      {
3561:../Dave/Generated/src/FEE001/FEE001.c ****        /* Check for the Marker field and verify Marker either 0 or 1*/
3562:../Dave/Generated/src/FEE001/FEE001.c ****        if(ArrPtr[3U] == FEE001_ALL_ZEROS)
3563:../Dave/Generated/src/FEE001/FEE001.c ****        {
3564:../Dave/Generated/src/FEE001/FEE001.c ****          ReturnVal = FEE001_MB_0;
3565:../Dave/Generated/src/FEE001/FEE001.c ****        }
3566:../Dave/Generated/src/FEE001/FEE001.c ****        else if(ArrPtr[3U] == FEE001_ALL_ONES)
3567:../Dave/Generated/src/FEE001/FEE001.c ****        {
3568:../Dave/Generated/src/FEE001/FEE001.c ****          ReturnVal = FEE001_MB_1;
3569:../Dave/Generated/src/FEE001/FEE001.c ****        }
3570:../Dave/Generated/src/FEE001/FEE001.c ****        else
3571:../Dave/Generated/src/FEE001/FEE001.c ****        {
3572:../Dave/Generated/src/FEE001/FEE001.c ****          ReturnVal = FEE001_MB_DIRTY;
3573:../Dave/Generated/src/FEE001/FEE001.c ****        }
3574:../Dave/Generated/src/FEE001/FEE001.c ****        /* Check for All ones filed for Erase interruption detection*/
3575:../Dave/Generated/src/FEE001/FEE001.c ****        for(Index = 0U ; Index <3U; Index++)
3576:../Dave/Generated/src/FEE001/FEE001.c ****        {
3577:../Dave/Generated/src/FEE001/FEE001.c ****            if( ArrPtr[Index] != FEE001_ALL_ONES)
3578:../Dave/Generated/src/FEE001/FEE001.c ****            {
3579:../Dave/Generated/src/FEE001/FEE001.c ****             ReturnVal = FEE001_MB_DIRTY;
3580:../Dave/Generated/src/FEE001/FEE001.c ****            }
3581:../Dave/Generated/src/FEE001/FEE001.c ****        }
3582:../Dave/Generated/src/FEE001/FEE001.c ****      }
3583:../Dave/Generated/src/FEE001/FEE001.c ****   return (ReturnVal);
3584:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lReadVerifyMarker */
3585:../Dave/Generated/src/FEE001/FEE001.c **** 
3586:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3587:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void Fee_lSetMarkerBlockBuffer(void)                     **
3588:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3589:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      : Synchronous                                              **
3590:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3591:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      : Non reentrant                                            **
3592:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3593:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) : None                                                     **
3594:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3595:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out): None                                                     **
3596:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3597:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
3598:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3599:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will update the write buffer for a          **
3600:../Dave/Generated/src/FEE001/FEE001.c **** **                   particular bank marker state                             **
3601:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3602:../Dave/Generated/src/FEE001/FEE001.c **** 
3603:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lSetMarkerBlockBuffer(void)
3604:../Dave/Generated/src/FEE001/FEE001.c **** {
 209              		.loc 1 3604 0
 210              		.cfi_startproc
3605:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType  *StateDataPtr;
3606:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t *ArrPtr;
3607:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t Index;
3608:../Dave/Generated/src/FEE001/FEE001.c **** 
3609:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 211              		.loc 1 3609 0
 212 0000 054B     		ldr	r3, .L22
3610:../Dave/Generated/src/FEE001/FEE001.c **** 
3611:../Dave/Generated/src/FEE001/FEE001.c ****    ArrPtr = (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer;
3612:../Dave/Generated/src/FEE001/FEE001.c ****    
3613:../Dave/Generated/src/FEE001/FEE001.c ****    /* Fill complete Marker block as per the below defined format
3614:../Dave/Generated/src/FEE001/FEE001.c ****     *               B0   B1   B2   B3
3615:../Dave/Generated/src/FEE001/FEE001.c ****     *      WORD0 - 0xFF 0xFF 0xFF 0xFF
3616:../Dave/Generated/src/FEE001/FEE001.c ****     *      WORD1 - 0xFF 0xFF 0xFF 0xFF
3617:../Dave/Generated/src/FEE001/FEE001.c ****     *      WORD2 - 0xFF 0xFF 0xFF 0xFF
3618:../Dave/Generated/src/FEE001/FEE001.c ****     *      WORD3 - 0x00 0x00 0x00 0x00
3619:../Dave/Generated/src/FEE001/FEE001.c ****     *  
3620:../Dave/Generated/src/FEE001/FEE001.c ****     */
3621:../Dave/Generated/src/FEE001/FEE001.c ****    for(Index = 0U ; Index <4U; Index++)
3622:../Dave/Generated/src/FEE001/FEE001.c ****    {
3623:../Dave/Generated/src/FEE001/FEE001.c ****        if( 3U == Index)
3624:../Dave/Generated/src/FEE001/FEE001.c ****        {
3625:../Dave/Generated/src/FEE001/FEE001.c ****          ArrPtr[Index] = FEE001_ALL_ZEROS;
3626:../Dave/Generated/src/FEE001/FEE001.c ****        }
3627:../Dave/Generated/src/FEE001/FEE001.c ****        else
3628:../Dave/Generated/src/FEE001/FEE001.c ****        {
3629:../Dave/Generated/src/FEE001/FEE001.c ****          ArrPtr[Index] = FEE001_ALL_ONES;
 213              		.loc 1 3629 0
 214 0002 0122     		mov	r2, #1
3609:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 215              		.loc 1 3609 0
 216 0004 1868     		ldr	r0, [r3]
 217              		.loc 1 3629 0
 218 0006 5342     		neg	r3, r2
3609:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 219              		.loc 1 3609 0
 220 0008 0168     		ldr	r1, [r0]
 221              	.LVL15:
3625:../Dave/Generated/src/FEE001/FEE001.c ****          ArrPtr[Index] = FEE001_ALL_ZEROS;
 222              		.loc 1 3625 0
 223 000a 0020     		mov	r0, #0
 224              		.loc 1 3629 0
 225 000c CB63     		str	r3, [r1, #60]
 226              	.LVL16:
 227 000e 0B64     		str	r3, [r1, #64]
 228              	.LVL17:
 229 0010 4B64     		str	r3, [r1, #68]
 230              	.LVL18:
3625:../Dave/Generated/src/FEE001/FEE001.c ****          ArrPtr[Index] = FEE001_ALL_ZEROS;
 231              		.loc 1 3625 0
 232 0012 8864     		str	r0, [r1, #72]
 233              	.LVL19:
3630:../Dave/Generated/src/FEE001/FEE001.c ****        }
3631:../Dave/Generated/src/FEE001/FEE001.c ****    }
3632:../Dave/Generated/src/FEE001/FEE001.c **** 
3633:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lSetMarkerBlockBuffer */
 234              		.loc 1 3633 0
 235              		@ sp needed for prologue
 236 0014 7047     		bx	lr
 237              	.L23:
 238 0016 C046     		.align	2
 239              	.L22:
 240 0018 00000000 		.word	FEE001_CfgPtr
 241              		.cfi_endproc
 242              	.LFE67:
 244              		.section	.text.Fee_lSetMarkerPageBuffer,"ax",%progbits
 245              		.align	1
 246              		.code	16
 247              		.thumb_func
 249              	Fee_lSetMarkerPageBuffer:
 250              	.LFB68:
3634:../Dave/Generated/src/FEE001/FEE001.c **** 
3635:../Dave/Generated/src/FEE001/FEE001.c **** 
3636:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3637:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void Fee_lSetMarkerPageBuffer(uint8_t State)             **
3638:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3639:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      : Synchronous                                              **
3640:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3641:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      : Non reentrant                                            **
3642:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3643:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) : None                                                     **
3644:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3645:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out): None                                                     **
3646:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3647:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
3648:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3649:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will update the write buffer for a          **
3650:../Dave/Generated/src/FEE001/FEE001.c **** **                   particular bank marker Page                              **
3651:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3652:../Dave/Generated/src/FEE001/FEE001.c **** **     Fill complete Marker PAGE as per the below defined format.             **
3653:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3654:../Dave/Generated/src/FEE001/FEE001.c **** **                 WORD - 0     WORD - 1     WORD - 2     WORD - 3            **
3655:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3656:../Dave/Generated/src/FEE001/FEE001.c **** **     BLOCK0 - (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF/0x00000000)**
3657:../Dave/Generated/src/FEE001/FEE001.c **** **     BLOCK1 - (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF/0x00000000)**
3658:../Dave/Generated/src/FEE001/FEE001.c **** **     BLOCK2 - (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF/0x00000000)**
3659:../Dave/Generated/src/FEE001/FEE001.c **** **     BLOCK3 - (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF/0x00000000)**
3660:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3661:../Dave/Generated/src/FEE001/FEE001.c **** **     BLOCK4 - (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF)           **
3662:../Dave/Generated/src/FEE001/FEE001.c **** **     BLOCK5 - (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF)           **
3663:../Dave/Generated/src/FEE001/FEE001.c **** **     ------------------------------------------------------------           **
3664:../Dave/Generated/src/FEE001/FEE001.c **** **     ------------------------------------------------------------           **
3665:../Dave/Generated/src/FEE001/FEE001.c **** **     BLOCK16- (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF) (0xFFFFFFFF)           **
3666:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3667:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3668:../Dave/Generated/src/FEE001/FEE001.c **** 
3669:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lSetMarkerPageBuffer(uint8_t State)
3670:../Dave/Generated/src/FEE001/FEE001.c **** {
 251              		.loc 1 3670 0
 252              		.cfi_startproc
 253              	.LVL20:
3671:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType  *StateDataPtr;
3672:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t *ArrPtr;
3673:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t Index;
3674:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t Shift_Cnt;
3675:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t State_Bit;
3676:../Dave/Generated/src/FEE001/FEE001.c **** 
3677:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 254              		.loc 1 3677 0
 255 0000 104B     		ldr	r3, .L31
3670:../Dave/Generated/src/FEE001/FEE001.c **** {
 256              		.loc 1 3670 0
 257 0002 70B5     		push	{r4, r5, r6, lr}
 258              	.LCFI2:
 259              		.cfi_def_cfa_offset 16
 260              		.cfi_offset 4, -16
 261              		.cfi_offset 5, -12
 262              		.cfi_offset 6, -8
 263              		.cfi_offset 14, -4
 264              		.loc 1 3677 0
 265 0004 1968     		ldr	r1, [r3]
3678:../Dave/Generated/src/FEE001/FEE001.c ****    ArrPtr = (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer;
3679:../Dave/Generated/src/FEE001/FEE001.c **** 
3680:../Dave/Generated/src/FEE001/FEE001.c ****    /* Depending upon the state received check the bit positions where
3681:../Dave/Generated/src/FEE001/FEE001.c ****     * a state marker has to be updated to get the actual state.
3682:../Dave/Generated/src/FEE001/FEE001.c ****     * Fill the first four blocks of the page with the state marker
3683:../Dave/Generated/src/FEE001/FEE001.c ****     * information.
3684:../Dave/Generated/src/FEE001/FEE001.c ****     */
3685:../Dave/Generated/src/FEE001/FEE001.c ****    for( Shift_Cnt = 0U; Shift_Cnt< FEE001_MARKER_MAX_SHIFT ; Shift_Cnt++ )
 266              		.loc 1 3685 0
 267 0006 0022     		mov	r2, #0
3677:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 268              		.loc 1 3677 0
 269 0008 0C68     		ldr	r4, [r1]
 270              	.LVL21:
3678:../Dave/Generated/src/FEE001/FEE001.c ****    ArrPtr = (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer;
 271              		.loc 1 3678 0
 272 000a 231C     		mov	r3, r4
 273 000c 5033     		add	r3, r3, #80
 274              	.LVL22:
 275              	.L27:
3686:../Dave/Generated/src/FEE001/FEE001.c ****    {
3687:../Dave/Generated/src/FEE001/FEE001.c **** 	   State_Bit = ((uint32_t)State << Shift_Cnt);
3688:../Dave/Generated/src/FEE001/FEE001.c **** 	   State_Bit &= (uint8_t)0x80;
3689:../Dave/Generated/src/FEE001/FEE001.c **** 
3690:../Dave/Generated/src/FEE001/FEE001.c **** 	   for(Index = 0U;Index<3U;Index++)
3691:../Dave/Generated/src/FEE001/FEE001.c **** 	   {
3692:../Dave/Generated/src/FEE001/FEE001.c **** 		    *ArrPtr = FEE001_ALL_ONES;
 276              		.loc 1 3692 0
 277 000e 0125     		mov	r5, #1
3687:../Dave/Generated/src/FEE001/FEE001.c **** 	   State_Bit = ((uint32_t)State << Shift_Cnt);
 278              		.loc 1 3687 0
 279 0010 061C     		mov	r6, r0
 280              		.loc 1 3692 0
 281 0012 6942     		neg	r1, r5
3687:../Dave/Generated/src/FEE001/FEE001.c **** 	   State_Bit = ((uint32_t)State << Shift_Cnt);
 282              		.loc 1 3687 0
 283 0014 9640     		lsl	r6, r6, r2
 284              	.LVL23:
3688:../Dave/Generated/src/FEE001/FEE001.c **** 	   State_Bit &= (uint8_t)0x80;
 285              		.loc 1 3688 0
 286 0016 8025     		mov	r5, #128
 287              		.loc 1 3692 0
 288 0018 1960     		str	r1, [r3]
 289              	.LVL24:
 290 001a 5960     		str	r1, [r3, #4]
 291              	.LVL25:
 292 001c 9960     		str	r1, [r3, #8]
 293              	.LVL26:
3688:../Dave/Generated/src/FEE001/FEE001.c **** 	   State_Bit &= (uint8_t)0x80;
 294              		.loc 1 3688 0
 295 001e 3540     		and	r5, r6
 296              	.LVL27:
3693:../Dave/Generated/src/FEE001/FEE001.c **** 		    ArrPtr++;
3694:../Dave/Generated/src/FEE001/FEE001.c **** 	   }
3695:../Dave/Generated/src/FEE001/FEE001.c **** 	   if( State_Bit == 0U )
 297              		.loc 1 3695 0
 298 0020 01D1     		bne	.L25
3696:../Dave/Generated/src/FEE001/FEE001.c ****      {
3697:../Dave/Generated/src/FEE001/FEE001.c ****         *ArrPtr = FEE001_ALL_ZEROS;
 299              		.loc 1 3697 0
 300 0022 DD60     		str	r5, [r3, #12]
 301 0024 00E0     		b	.L26
 302              	.L25:
3698:../Dave/Generated/src/FEE001/FEE001.c ****      }
3699:../Dave/Generated/src/FEE001/FEE001.c **** 	   else
3700:../Dave/Generated/src/FEE001/FEE001.c **** 	   {
3701:../Dave/Generated/src/FEE001/FEE001.c **** 		    *ArrPtr = FEE001_ALL_ONES;
 303              		.loc 1 3701 0
 304 0026 D960     		str	r1, [r3, #12]
 305              	.L26:
3685:../Dave/Generated/src/FEE001/FEE001.c ****    for( Shift_Cnt = 0U; Shift_Cnt< FEE001_MARKER_MAX_SHIFT ; Shift_Cnt++ )
 306              		.loc 1 3685 0
 307 0028 0132     		add	r2, r2, #1
3669:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lSetMarkerPageBuffer(uint8_t State)
 308              		.loc 1 3669 0
 309 002a 1033     		add	r3, r3, #16
 310              	.LVL28:
3685:../Dave/Generated/src/FEE001/FEE001.c ****    for( Shift_Cnt = 0U; Shift_Cnt< FEE001_MARKER_MAX_SHIFT ; Shift_Cnt++ )
 311              		.loc 1 3685 0
 312 002c 042A     		cmp	r2, #4
 313 002e EED1     		bne	.L27
 314 0030 201C     		mov	r0, r4
 315              	.LVL29:
3669:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lSetMarkerPageBuffer(uint8_t State)
 316              		.loc 1 3669 0
 317 0032 5134     		add	r4, r4, #81
 318              	.LVL30:
 319 0034 9030     		add	r0, r0, #144
 320 0036 FF34     		add	r4, r4, #255
 321              	.LVL31:
 322              	.L28:
3702:../Dave/Generated/src/FEE001/FEE001.c **** 	   }
3703:../Dave/Generated/src/FEE001/FEE001.c **** 	   ArrPtr++;
3704:../Dave/Generated/src/FEE001/FEE001.c ****    }
3705:../Dave/Generated/src/FEE001/FEE001.c **** 
3706:../Dave/Generated/src/FEE001/FEE001.c ****    /* Fill the first rest 12 blocks of the page with all ones  */
3707:../Dave/Generated/src/FEE001/FEE001.c ****    for(Index = 0U;Index < FEE001_NON_MARKER_WORDS_IN_PAGE1;Index++)
3708:../Dave/Generated/src/FEE001/FEE001.c ****    {
3709:../Dave/Generated/src/FEE001/FEE001.c ****    		 *ArrPtr = FEE001_ALL_ONES;
 323              		.loc 1 3709 0 discriminator 2
 324 0038 0123     		mov	r3, #1
 325 003a 5A42     		neg	r2, r3
 326 003c 04C0     		stmia	r0!, {r2}
 327              	.LVL32:
3707:../Dave/Generated/src/FEE001/FEE001.c ****    for(Index = 0U;Index < FEE001_NON_MARKER_WORDS_IN_PAGE1;Index++)
 328              		.loc 1 3707 0 discriminator 2
 329 003e A042     		cmp	r0, r4
 330 0040 FAD1     		bne	.L28
3710:../Dave/Generated/src/FEE001/FEE001.c ****    		 ArrPtr++;
3711:../Dave/Generated/src/FEE001/FEE001.c ****    }
3712:../Dave/Generated/src/FEE001/FEE001.c **** 
3713:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lSetMarkerPageBuffer */
 331              		.loc 1 3713 0
 332              		@ sp needed for prologue
 333              	.LVL33:
 334              	.LVL34:
 335 0042 70BD     		pop	{r4, r5, r6, pc}
 336              	.L32:
 337              		.align	2
 338              	.L31:
 339 0044 00000000 		.word	FEE001_CfgPtr
 340              		.cfi_endproc
 341              	.LFE68:
 343              		.section	.text.Fee_lSrchCopy,"ax",%progbits
 344              		.align	1
 345              		.code	16
 346              		.thumb_func
 348              	Fee_lSrchCopy:
 349              	.LFB47:
1188:../Dave/Generated/src/FEE001/FEE001.c **** {
 350              		.loc 1 1188 0
 351              		.cfi_startproc
 352              	.LVL35:
 353 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 354              	.LCFI3:
 355              		.cfi_def_cfa_offset 32
 356              		.cfi_offset 0, -32
 357              		.cfi_offset 1, -28
 358              		.cfi_offset 2, -24
 359              		.cfi_offset 4, -20
 360              		.cfi_offset 5, -16
 361              		.cfi_offset 6, -12
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
1196:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 364              		.loc 1 1196 0
 365 0002 0F4B     		ldr	r3, .L42
1188:../Dave/Generated/src/FEE001/FEE001.c **** {
 366              		.loc 1 1188 0
 367 0004 0190     		str	r0, [sp, #4]
1196:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 368              		.loc 1 1196 0
 369 0006 1868     		ldr	r0, [r3]
 370              	.LVL36:
1188:../Dave/Generated/src/FEE001/FEE001.c **** {
 371              		.loc 1 1188 0
 372 0008 0D1C     		mov	r5, r1
1196:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 373              		.loc 1 1196 0
 374 000a 0168     		ldr	r1, [r0]
 375              	.LVL37:
1188:../Dave/Generated/src/FEE001/FEE001.c **** {
 376              		.loc 1 1188 0
 377 000c 171C     		mov	r7, r2
1196:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 378              		.loc 1 1196 0
 379 000e 0091     		str	r1, [sp]
 380              	.LVL38:
 381              	.L40:
1202:../Dave/Generated/src/FEE001/FEE001.c ****      TmpReadAddr = *ReadBlockAddrPtr;
 382              		.loc 1 1202 0
 383 0010 2C68     		ldr	r4, [r5]
 384              	.LVL39:
1205:../Dave/Generated/src/FEE001/FEE001.c ****      if( TmpReadAddr < EndAddr)
 385              		.loc 1 1205 0
 386 0012 019A     		ldr	r2, [sp, #4]
 387 0014 9442     		cmp	r4, r2
 388 0016 10D3     		bcc	.L38
1213:../Dave/Generated/src/FEE001/FEE001.c ****        FLASH003_ClearStatus();
 389              		.loc 1 1213 0
 390 0018 FFF7FEFF 		bl	FLASH003_ClearStatus
 391              	.LVL40:
1217:../Dave/Generated/src/FEE001/FEE001.c ****     		                (uint8_t *)(void*)StateDataPtr->FeeReadWriteBuffer,
 392              		.loc 1 1217 0
 393 001c 009E     		ldr	r6, [sp]
1216:../Dave/Generated/src/FEE001/FEE001.c ****        StatVal = FLASH003_ReadBytes((uint32_t)TmpReadAddr,
 394              		.loc 1 1216 0
 395 001e 201C     		mov	r0, r4
1217:../Dave/Generated/src/FEE001/FEE001.c ****     		                (uint8_t *)(void*)StateDataPtr->FeeReadWriteBuffer,
 396              		.loc 1 1217 0
 397 0020 3C36     		add	r6, r6, #60
1216:../Dave/Generated/src/FEE001/FEE001.c ****        StatVal = FLASH003_ReadBytes((uint32_t)TmpReadAddr,
 398              		.loc 1 1216 0
 399 0022 311C     		mov	r1, r6
 400 0024 0222     		mov	r2, #2
 401 0026 FFF7FEFF 		bl	FLASH003_ReadBytes
 402              	.LVL41:
1220:../Dave/Generated/src/FEE001/FEE001.c ****        BlkNumRead = *(uint8_t*)(void*)(StateDataPtr->FeeReadWriteBuffer);
 403              		.loc 1 1220 0
 404 002a 3378     		ldrb	r3, [r6]
 405              	.LVL42:
1223:../Dave/Generated/src/FEE001/FEE001.c ****        if (StatVal != FEE001_SUCCESS)
 406              		.loc 1 1223 0
 407 002c 0028     		cmp	r0, #0
 408 002e 01D1     		bne	.L41
 409              	.L35:
1229:../Dave/Generated/src/FEE001/FEE001.c ****        else if (BlkNumRead != BlkReqd)
 410              		.loc 1 1229 0
 411 0030 BB42     		cmp	r3, r7
 412 0032 03D0     		beq	.L34
 413              	.L41:
 414              	.LVL43:
1232:../Dave/Generated/src/FEE001/FEE001.c ****          *ReadBlockAddrPtr = TmpReadAddr - FEE001_DFLASH_BLOCK_SIZE;
 415              		.loc 1 1232 0
 416 0034 103C     		sub	r4, r4, #16
 417              	.LVL44:
 418 0036 2C60     		str	r4, [r5]
 419 0038 EAE7     		b	.L40
 420              	.LVL45:
 421              	.L38:
1207:../Dave/Generated/src/FEE001/FEE001.c ****        RetVal = FEE001_FAILED;
 422              		.loc 1 1207 0
 423 003a 0120     		mov	r0, #1
 424              	.L34:
 425              	.LVL46:
1243:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lSrchCopy */
 426              		.loc 1 1243 0
 427              		@ sp needed for prologue
 428              	.LVL47:
 429              	.LVL48:
 430 003c FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 431              	.L43:
 432 003e C046     		.align	2
 433              	.L42:
 434 0040 00000000 		.word	FEE001_CfgPtr
 435              		.cfi_endproc
 436              	.LFE47:
 438              		.section	.text.Fee_lTraverseCopy,"ax",%progbits
 439              		.align	1
 440              		.code	16
 441              		.thumb_func
 443              	Fee_lTraverseCopy:
 444              	.LFB48:
1271:../Dave/Generated/src/FEE001/FEE001.c **** {
 445              		.loc 1 1271 0
 446              		.cfi_startproc
 447              	.LVL49:
 448 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 449              	.LCFI4:
 450              		.cfi_def_cfa_offset 20
 451              		.cfi_offset 4, -20
 452              		.cfi_offset 5, -16
 453              		.cfi_offset 6, -12
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 0002 85B0     		sub	sp, sp, #20
 457              	.LCFI5:
 458              		.cfi_def_cfa_offset 40
1271:../Dave/Generated/src/FEE001/FEE001.c **** {
 459              		.loc 1 1271 0
 460 0004 0393     		str	r3, [sp, #12]
1284:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 461              		.loc 1 1284 0
 462 0006 1C4B     		ldr	r3, .L55
 463              	.LVL50:
1271:../Dave/Generated/src/FEE001/FEE001.c **** {
 464              		.loc 1 1271 0
 465 0008 0290     		str	r0, [sp, #8]
1284:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 466              		.loc 1 1284 0
 467 000a 1868     		ldr	r0, [r3]
 468              	.LVL51:
1271:../Dave/Generated/src/FEE001/FEE001.c **** {
 469              		.loc 1 1271 0
 470 000c 0F1C     		mov	r7, r1
1284:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 471              		.loc 1 1284 0
 472 000e 0168     		ldr	r1, [r0]
 473              	.LVL52:
1286:../Dave/Generated/src/FEE001/FEE001.c ****    BlkRslt->Status = 0U;
 474              		.loc 1 1286 0
 475 0010 0025     		mov	r5, #0
1271:../Dave/Generated/src/FEE001/FEE001.c **** {
 476              		.loc 1 1271 0
 477 0012 141C     		mov	r4, r2
1284:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 478              		.loc 1 1284 0
 479 0014 0091     		str	r1, [sp]
 480              	.LVL53:
1286:../Dave/Generated/src/FEE001/FEE001.c ****    BlkRslt->Status = 0U;
 481              		.loc 1 1286 0
 482 0016 1571     		strb	r5, [r2, #4]
1287:../Dave/Generated/src/FEE001/FEE001.c ****    BlkRslt->BlockCnt = 0U;
 483              		.loc 1 1287 0
 484 0018 1560     		str	r5, [r2]
 485              	.LVL54:
 486              	.L54:
1291:../Dave/Generated/src/FEE001/FEE001.c ****      TmpReadAddr = *ReadBlockAddrPtr;
 487              		.loc 1 1291 0
 488 001a 3E68     		ldr	r6, [r7]
 489              	.LVL55:
1295:../Dave/Generated/src/FEE001/FEE001.c ****      if( TmpReadAddr < EndAddr)
 490              		.loc 1 1295 0
 491 001c 029A     		ldr	r2, [sp, #8]
 492 001e 9642     		cmp	r6, r2
 493 0020 27D3     		bcc	.L50
1303:../Dave/Generated/src/FEE001/FEE001.c ****        FLASH003_ClearStatus();
 494              		.loc 1 1303 0
 495 0022 FFF7FEFF 		bl	FLASH003_ClearStatus
 496              	.LVL56:
1307:../Dave/Generated/src/FEE001/FEE001.c ****       		                (uint8_t *)(void*)StateDataPtr->FeeReadWriteBuffer,
 497              		.loc 1 1307 0
 498 0026 009B     		ldr	r3, [sp]
1306:../Dave/Generated/src/FEE001/FEE001.c ****        StatVal = FLASH003_ReadBytes((uint32_t)TmpReadAddr,
 499              		.loc 1 1306 0
 500 0028 301C     		mov	r0, r6
1307:../Dave/Generated/src/FEE001/FEE001.c ****       		                (uint8_t *)(void*)StateDataPtr->FeeReadWriteBuffer,
 501              		.loc 1 1307 0
 502 002a 3C33     		add	r3, r3, #60
1306:../Dave/Generated/src/FEE001/FEE001.c ****        StatVal = FLASH003_ReadBytes((uint32_t)TmpReadAddr,
 503              		.loc 1 1306 0
 504 002c 191C     		mov	r1, r3
 505 002e 0222     		mov	r2, #2
1307:../Dave/Generated/src/FEE001/FEE001.c ****       		                (uint8_t *)(void*)StateDataPtr->FeeReadWriteBuffer,
 506              		.loc 1 1307 0
 507 0030 0193     		str	r3, [sp, #4]
1306:../Dave/Generated/src/FEE001/FEE001.c ****        StatVal = FLASH003_ReadBytes((uint32_t)TmpReadAddr,
 508              		.loc 1 1306 0
 509 0032 FFF7FEFF 		bl	FLASH003_ReadBytes
 510              	.LVL57:
1310:../Dave/Generated/src/FEE001/FEE001.c ****        *ReadBlockAddrPtr = TmpReadAddr - FEE001_DFLASH_BLOCK_SIZE;
 511              		.loc 1 1310 0
 512 0036 103E     		sub	r6, r6, #16
 513              	.LVL58:
 514 0038 3E60     		str	r6, [r7]
1312:../Dave/Generated/src/FEE001/FEE001.c ****        if(StatVal == FEE001_SUCCESS)
 515              		.loc 1 1312 0
 516 003a 0028     		cmp	r0, #0
 517 003c 14D1     		bne	.L46
 518              	.LVL59:
1316:../Dave/Generated/src/FEE001/FEE001.c ****          StatusByte = BlkHeaderPtr->Status;
 519              		.loc 1 1316 0
 520 003e 009E     		ldr	r6, [sp]
 521              	.LVL60:
1322:../Dave/Generated/src/FEE001/FEE001.c ****          if (BlkNumRead != BlkNumExptd )
 522              		.loc 1 1322 0
 523 0040 019A     		ldr	r2, [sp, #4]
1316:../Dave/Generated/src/FEE001/FEE001.c ****          StatusByte = BlkHeaderPtr->Status;
 524              		.loc 1 1316 0
 525 0042 3D36     		add	r6, r6, #61
 526 0044 3378     		ldrb	r3, [r6]
 527              	.LVL61:
1322:../Dave/Generated/src/FEE001/FEE001.c ****          if (BlkNumRead != BlkNumExptd )
 528              		.loc 1 1322 0
 529 0046 0399     		ldr	r1, [sp, #12]
 530 0048 1678     		ldrb	r6, [r2]
 531              	.LVL62:
 532 004a 8E42     		cmp	r6, r1
 533 004c 12D1     		bne	.L45
1328:../Dave/Generated/src/FEE001/FEE001.c ****          else if ((StatusByte & (FEE001_START_BIT)) != 0U)
 534              		.loc 1 1328 0
 535 004e 58B2     		sxtb	r0, r3
 536              	.LVL63:
1317:../Dave/Generated/src/FEE001/FEE001.c ****          BlockCnt++;
 537              		.loc 1 1317 0
 538 0050 0135     		add	r5, r5, #1
 539              	.LVL64:
1328:../Dave/Generated/src/FEE001/FEE001.c ****          else if ((StatusByte & (FEE001_START_BIT)) != 0U)
 540              		.loc 1 1328 0
 541 0052 0028     		cmp	r0, #0
 542 0054 E1DA     		bge	.L54
 543              	.LVL65:
1333:../Dave/Generated/src/FEE001/FEE001.c ****            if ((StatusByte & (FEE001_VALID_BIT)) == 0U)
 544              		.loc 1 1333 0
 545 0056 5A06     		lsl	r2, r3, #25
 546 0058 03D4     		bmi	.L48
1335:../Dave/Generated/src/FEE001/FEE001.c ****              BlkRslt->Status |= FEE001_BLK_INVALID;
 547              		.loc 1 1335 0
 548 005a 2779     		ldrb	r7, [r4, #4]
 549              	.LVL66:
 550 005c 0223     		mov	r3, #2
 551 005e 1F43     		orr	r7, r3
 552 0060 2771     		strb	r7, [r4, #4]
 553              	.L48:
1337:../Dave/Generated/src/FEE001/FEE001.c ****            BlkRslt->BlockCnt = BlockCnt;
 554              		.loc 1 1337 0
 555 0062 2560     		str	r5, [r4]
 556 0064 0020     		mov	r0, #0
 557 0066 05E0     		b	.L45
 558              	.LVL67:
 559              	.L46:
1349:../Dave/Generated/src/FEE001/FEE001.c ****          BlkRslt->Status |= FEE001_BLK_ECC_ERROR;
 560              		.loc 1 1349 0
 561 0068 2079     		ldrb	r0, [r4, #4]
 562              	.LVL68:
 563 006a 0121     		mov	r1, #1
 564 006c 0843     		orr	r0, r1
 565 006e 2071     		strb	r0, [r4, #4]
 566 0070 D3E7     		b	.L54
 567              	.LVL69:
 568              	.L50:
1297:../Dave/Generated/src/FEE001/FEE001.c ****        RetVal = FEE001_FAILED;
 569              		.loc 1 1297 0
 570 0072 0120     		mov	r0, #1
 571              	.LVL70:
 572              	.L45:
1355:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lSrchCopy */
 573              		.loc 1 1355 0
 574 0074 05B0     		add	sp, sp, #20
 575              	.LVL71:
 576              		@ sp needed for prologue
 577              	.LVL72:
 578 0076 F0BD     		pop	{r4, r5, r6, r7, pc}
 579              	.L56:
 580              		.align	2
 581              	.L55:
 582 0078 00000000 		.word	FEE001_CfgPtr
 583              		.cfi_endproc
 584              	.LFE48:
 586              		.section	.text.Fee_lLocalRead,"ax",%progbits
 587              		.align	1
 588              		.code	16
 589              		.thumb_func
 591              	Fee_lLocalRead:
 592              	.LFB75:
3714:../Dave/Generated/src/FEE001/FEE001.c **** 
3715:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3716:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          :  static FEE001Status_Type Fee_lEraseBank                 **
3717:../Dave/Generated/src/FEE001/FEE001.c **** **                                           (uint32_t PageAddress)           **
3718:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3719:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3720:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3721:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3722:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3723:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  PageAddress : Page Address to be erased                 **
3724:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3725:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3726:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3727:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  FEE001Status_Type                                       **
3728:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3729:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     :  This routine will erase the particular bank             **
3730:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3731:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3732:../Dave/Generated/src/FEE001/FEE001.c **** 
3733:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type Fee_lEraseBank(uint32_t PageAddress)
3734:../Dave/Generated/src/FEE001/FEE001.c **** {
3735:../Dave/Generated/src/FEE001/FEE001.c **** 
3736:../Dave/Generated/src/FEE001/FEE001.c ****   uint32_t Index;
3737:../Dave/Generated/src/FEE001/FEE001.c ****   status_t status;
3738:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001Status_Type ReturnVal;
3739:../Dave/Generated/src/FEE001/FEE001.c ****   ReturnVal = FEE001_COMPLETE;
3740:../Dave/Generated/src/FEE001/FEE001.c **** 
3741:../Dave/Generated/src/FEE001/FEE001.c ****   PageAddress = ((PageAddress) - FEE001_FLASH_PAGE_SIZE );
3742:../Dave/Generated/src/FEE001/FEE001.c ****   PageAddress +=1U;
3743:../Dave/Generated/src/FEE001/FEE001.c ****   Index =0U;
3744:../Dave/Generated/src/FEE001/FEE001.c ****   while((Index <FEE001_BANK_PAGES)&&(ReturnVal == FEE001_COMPLETE))
3745:../Dave/Generated/src/FEE001/FEE001.c ****   {
3746:../Dave/Generated/src/FEE001/FEE001.c ****     /* Clear all error status flags before flash operation*/
3747:../Dave/Generated/src/FEE001/FEE001.c ****     FLASH003_ClearStatus();
3748:../Dave/Generated/src/FEE001/FEE001.c **** 
3749:../Dave/Generated/src/FEE001/FEE001.c **** 	  status = FLASH003_ErasePage((uint32_t)PageAddress);
3750:../Dave/Generated/src/FEE001/FEE001.c ****     if(status != 0U )
3751:../Dave/Generated/src/FEE001/FEE001.c ****     {
3752:../Dave/Generated/src/FEE001/FEE001.c ****        ReturnVal = FEE001_ERROR;
3753:../Dave/Generated/src/FEE001/FEE001.c ****     }
3754:../Dave/Generated/src/FEE001/FEE001.c ****     PageAddress = PageAddress - (FEE001_FLASH_PAGE_SIZE );
3755:../Dave/Generated/src/FEE001/FEE001.c ****     Index++;
3756:../Dave/Generated/src/FEE001/FEE001.c ****   }
3757:../Dave/Generated/src/FEE001/FEE001.c ****   return (ReturnVal);
3758:../Dave/Generated/src/FEE001/FEE001.c ****   
3759:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lEraseBank */
3760:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3761:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          :  FEE001Status_Type Fee_lGCWrite(uint32_t BlockAddress)   **
3762:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3763:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3764:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3765:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3766:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3767:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  None                                                    **
3768:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3769:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3770:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3771:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  None                                                    **
3772:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3773:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     :  This func will write a particular block into specified  **
3774:../Dave/Generated/src/FEE001/FEE001.c **** **                    location during GC operation                            **
3775:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3776:../Dave/Generated/src/FEE001/FEE001.c **** 
3777:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type Fee_lGCWrite(uint32_t BlockAddress)
3778:../Dave/Generated/src/FEE001/FEE001.c **** {
3779:../Dave/Generated/src/FEE001/FEE001.c ****   status_t          status;
3780:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001Status_Type ReturnVal;
3781:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_StateDataType *StateDataPtr;
3782:../Dave/Generated/src/FEE001/FEE001.c **** 
3783:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
3784:../Dave/Generated/src/FEE001/FEE001.c ****   ReturnVal = FEE001_ERROR;
3785:../Dave/Generated/src/FEE001/FEE001.c ****   
3786:../Dave/Generated/src/FEE001/FEE001.c ****   /* Clear all error status flags before flash operation*/
3787:../Dave/Generated/src/FEE001/FEE001.c ****   FLASH003_ClearStatus();
3788:../Dave/Generated/src/FEE001/FEE001.c ****   
3789:../Dave/Generated/src/FEE001/FEE001.c ****   /* Write a single block into flash*/
3790:../Dave/Generated/src/FEE001/FEE001.c ****   status = (status_t)FLASH003_WriteBlock(BlockAddress,
3791:../Dave/Generated/src/FEE001/FEE001.c ****       (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer);
3792:../Dave/Generated/src/FEE001/FEE001.c ****   /* if the Fls routine did not accept the request         */
3793:../Dave/Generated/src/FEE001/FEE001.c ****   /* then report error and Set GC state to FEE001_GC_IDLE */
3794:../Dave/Generated/src/FEE001/FEE001.c ****   if(status != 0U)
3795:../Dave/Generated/src/FEE001/FEE001.c ****   {
3796:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcState = FEE001_GC_FAIL;
3797:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeIntrJobResult = FEE001_JOB_FAIL;
3798:../Dave/Generated/src/FEE001/FEE001.c ****   }
3799:../Dave/Generated/src/FEE001/FEE001.c ****   else
3800:../Dave/Generated/src/FEE001/FEE001.c ****   {
3801:../Dave/Generated/src/FEE001/FEE001.c ****     ReturnVal = FEE001_COMPLETE;
3802:../Dave/Generated/src/FEE001/FEE001.c ****   }
3803:../Dave/Generated/src/FEE001/FEE001.c ****   return(ReturnVal);
3804:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lGCWrite */
3805:../Dave/Generated/src/FEE001/FEE001.c **** 
3806:../Dave/Generated/src/FEE001/FEE001.c **** 
3807:../Dave/Generated/src/FEE001/FEE001.c **** #if( FEE001_COMPARE_ON_WRITE_ENABLE == 1U)
3808:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3809:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          :  void Fee_lWriteBlock(void)                              **
3810:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3811:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3812:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3813:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3814:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3815:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  None                                                    **
3816:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3817:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3818:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3819:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  None                                                    **
3820:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3821:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     :  This func will write a particular block into specified  **
3822:../Dave/Generated/src/FEE001/FEE001.c **** **                    location , then read back and compare the written       **
3823:../Dave/Generated/src/FEE001/FEE001.c **** **                    contents with the data indented to write                **
3824:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3825:../Dave/Generated/src/FEE001/FEE001.c **** 
3826:../Dave/Generated/src/FEE001/FEE001.c **** static status_t Fee_lWriteBlock(uint32_t BlockAddress,
3827:../Dave/Generated/src/FEE001/FEE001.c **** 		                                 const uint32_t* DataBufferPtr)
3828:../Dave/Generated/src/FEE001/FEE001.c **** {
3829:../Dave/Generated/src/FEE001/FEE001.c ****   status_t          status;
3830:../Dave/Generated/src/FEE001/FEE001.c ****   status_t          ReturnVal;
3831:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t           FeeReadBuffer[FEE001_DFLASH_BLOCK_SIZE];
3832:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t*          FeeReadPtr;
3833:../Dave/Generated/src/FEE001/FEE001.c ****   uint32_t          Index;
3834:../Dave/Generated/src/FEE001/FEE001.c ****   uint32_t           temp1;
3835:../Dave/Generated/src/FEE001/FEE001.c ****   uint32_t           temp2;
3836:../Dave/Generated/src/FEE001/FEE001.c **** 
3837:../Dave/Generated/src/FEE001/FEE001.c ****   FeeReadPtr = &FeeReadBuffer[0];
3838:../Dave/Generated/src/FEE001/FEE001.c ****   ReturnVal = 0U;
3839:../Dave/Generated/src/FEE001/FEE001.c ****   /* Clear all error status flags before flash operation*/
3840:../Dave/Generated/src/FEE001/FEE001.c ****   FLASH003_ClearStatus();
3841:../Dave/Generated/src/FEE001/FEE001.c **** 
3842:../Dave/Generated/src/FEE001/FEE001.c ****   /* Write a single block into flash*/
3843:../Dave/Generated/src/FEE001/FEE001.c ****   status = (status_t)FLASH003_WriteBlock(BlockAddress,DataBufferPtr);
3844:../Dave/Generated/src/FEE001/FEE001.c **** 
3845:../Dave/Generated/src/FEE001/FEE001.c ****   if(status == (status_t)DAVEApp_SUCCESS)
3846:../Dave/Generated/src/FEE001/FEE001.c ****   {
3847:../Dave/Generated/src/FEE001/FEE001.c **** 	 /* Clear all error status flags before flash operation*/
3848:../Dave/Generated/src/FEE001/FEE001.c **** 	 FLASH003_ClearStatus();
3849:../Dave/Generated/src/FEE001/FEE001.c **** 
3850:../Dave/Generated/src/FEE001/FEE001.c **** 	 /* Read the CRC 16 bit data from flash for the particular block */
3851:../Dave/Generated/src/FEE001/FEE001.c **** 	 status = FLASH003_ReadBytes(BlockAddress,FeeReadPtr,
3852:../Dave/Generated/src/FEE001/FEE001.c **** 	 		                          (uint32_t)FEE001_FLASH_BLOCK_SIZE);
3853:../Dave/Generated/src/FEE001/FEE001.c **** 	  if(status == (status_t)DAVEApp_SUCCESS)
3854:../Dave/Generated/src/FEE001/FEE001.c **** 	  {
3855:../Dave/Generated/src/FEE001/FEE001.c **** 	 	 Index =0U;
3856:../Dave/Generated/src/FEE001/FEE001.c **** 	 	 while( (Index<FEE001_MAX_WORDS_IN_BLOCK) && (ReturnVal == 0U))
3857:../Dave/Generated/src/FEE001/FEE001.c **** 	 	 {
3858:../Dave/Generated/src/FEE001/FEE001.c **** 		  /* compare the written contents with the read contents and check for
3859:../Dave/Generated/src/FEE001/FEE001.c **** 		  * data integrity
3860:../Dave/Generated/src/FEE001/FEE001.c **** 		  */
3861:../Dave/Generated/src/FEE001/FEE001.c **** 		  temp1 =   *((uint32_t *)(void*)FeeReadPtr + Index);
3862:../Dave/Generated/src/FEE001/FEE001.c **** 		  temp2 =   *(DataBufferPtr + Index);
3863:../Dave/Generated/src/FEE001/FEE001.c **** 
3864:../Dave/Generated/src/FEE001/FEE001.c **** 		  if(temp1 != temp2)
3865:../Dave/Generated/src/FEE001/FEE001.c **** 		  {
3866:../Dave/Generated/src/FEE001/FEE001.c **** 			  ReturnVal = 1U;
3867:../Dave/Generated/src/FEE001/FEE001.c **** 		  }
3868:../Dave/Generated/src/FEE001/FEE001.c **** 		  Index++;
3869:../Dave/Generated/src/FEE001/FEE001.c **** 	   }
3870:../Dave/Generated/src/FEE001/FEE001.c **** 	  }
3871:../Dave/Generated/src/FEE001/FEE001.c **** 	  else
3872:../Dave/Generated/src/FEE001/FEE001.c **** 	  {
3873:../Dave/Generated/src/FEE001/FEE001.c **** 	   ReturnVal = 1U;
3874:../Dave/Generated/src/FEE001/FEE001.c **** 	  }
3875:../Dave/Generated/src/FEE001/FEE001.c ****   }
3876:../Dave/Generated/src/FEE001/FEE001.c ****   else
3877:../Dave/Generated/src/FEE001/FEE001.c ****   {
3878:../Dave/Generated/src/FEE001/FEE001.c ****     ReturnVal = 1U;
3879:../Dave/Generated/src/FEE001/FEE001.c ****   }
3880:../Dave/Generated/src/FEE001/FEE001.c ****   return(ReturnVal);
3881:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lWriteBlock */
3882:../Dave/Generated/src/FEE001/FEE001.c **** #endif
3883:../Dave/Generated/src/FEE001/FEE001.c **** 
3884:../Dave/Generated/src/FEE001/FEE001.c **** 
3885:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3886:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : void  Fee_lLocalWrite(void)                              **
3887:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3888:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync/Async      :  Synchronous                                             **
3889:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3890:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrancy      :  Non reentrant                                           **
3891:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3892:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (in) :  None                                                    **
3893:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3894:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (out):  None                                                    **
3895:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3896:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    :  None                                                    **
3897:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3898:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will perform the write operation on DFLASH  **
3899:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
3900:../Dave/Generated/src/FEE001/FEE001.c **** 
3901:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lLocalWrite(void)
3902:../Dave/Generated/src/FEE001/FEE001.c **** {
3903:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType     *StateDataPtr;
3904:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_BlockType       *BlockPtr;
3905:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t               RemainingBlocks;
3906:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t               FlashBlocks;
3907:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t                BlockNumber;
3908:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t                PerformWrite;
3909:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t                UserBlockIndex;
3910:../Dave/Generated/src/FEE001/FEE001.c **** 
3911:../Dave/Generated/src/FEE001/FEE001.c ****    PerformWrite = 0U;
3912:../Dave/Generated/src/FEE001/FEE001.c ****    
3913:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
3914:../Dave/Generated/src/FEE001/FEE001.c **** 
3915:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeUserJobResult = FEE001_JOB_OK;
3916:../Dave/Generated/src/FEE001/FEE001.c **** 
3917:../Dave/Generated/src/FEE001/FEE001.c ****    BlockNumber = StateDataPtr->FeePendReqInfo.BlockNumber;
3918:../Dave/Generated/src/FEE001/FEE001.c ****    UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
3919:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
3920:../Dave/Generated/src/FEE001/FEE001.c ****  
3921:../Dave/Generated/src/FEE001/FEE001.c ****    FlashBlocks = Fee_lGetDFLASHPhysicalBlocks((uint16_t)BlockPtr->Size);
3922:../Dave/Generated/src/FEE001/FEE001.c ****    RemainingBlocks = Fee_lGetFreeDFLASHBlocks();
3923:../Dave/Generated/src/FEE001/FEE001.c ****       
3924:../Dave/Generated/src/FEE001/FEE001.c ****    if(RemainingBlocks < FlashBlocks)
3925:../Dave/Generated/src/FEE001/FEE001.c ****    {
3926:../Dave/Generated/src/FEE001/FEE001.c ****        /* GC should not be triggered if DisableGCStart is set by user
3927:../Dave/Generated/src/FEE001/FEE001.c ****         * else trigger GC */
3928:../Dave/Generated/src/FEE001/FEE001.c ****        if(FEE001_CfgPtr->FeeDisableGCStart == 0U)
3929:../Dave/Generated/src/FEE001/FEE001.c ****        {
3930:../Dave/Generated/src/FEE001/FEE001.c ****           /* Request for Garbage Collection and continue */
3931:../Dave/Generated/src/FEE001/FEE001.c ****           StateDataPtr->FeeGcState = FEE001_GC_REQUESTED;
3932:../Dave/Generated/src/FEE001/FEE001.c ****           /* Call Garbage collection local function to execute
3933:../Dave/Generated/src/FEE001/FEE001.c ****            * GC process
3934:../Dave/Generated/src/FEE001/FEE001.c ****            */
3935:../Dave/Generated/src/FEE001/FEE001.c ****           Fee_lGarbageCollection();
3936:../Dave/Generated/src/FEE001/FEE001.c **** 
3937:../Dave/Generated/src/FEE001/FEE001.c ****           /* Check the size of the GC requested block to check if space is
3938:../Dave/Generated/src/FEE001/FEE001.c ****            * available in the new bank or not to continue.
3939:../Dave/Generated/src/FEE001/FEE001.c ****            */
3940:../Dave/Generated/src/FEE001/FEE001.c ****           FlashBlocks = Fee_lGetDFLASHPhysicalBlocks
3941:../Dave/Generated/src/FEE001/FEE001.c ****           		                        ((uint16_t)BlockPtr->Size);
3942:../Dave/Generated/src/FEE001/FEE001.c ****           /* Check the free space availability in the new bank.
3943:../Dave/Generated/src/FEE001/FEE001.c ****            */
3944:../Dave/Generated/src/FEE001/FEE001.c ****           RemainingBlocks = Fee_lGetFreeDFLASHBlocks();
3945:../Dave/Generated/src/FEE001/FEE001.c **** 
3946:../Dave/Generated/src/FEE001/FEE001.c ****           /* Check for GC errors as well as GC overflows the complete space
3947:../Dave/Generated/src/FEE001/FEE001.c ****            * in the new bank, so that there is no room for writing the GC
3948:../Dave/Generated/src/FEE001/FEE001.c ****            * triggered block*/
3949:../Dave/Generated/src/FEE001/FEE001.c ****           if((RemainingBlocks >= FlashBlocks)&&(StateDataPtr->FeeGcState ==
3950:../Dave/Generated/src/FEE001/FEE001.c ****         		                                                FEE001_GC_IDLE))
3951:../Dave/Generated/src/FEE001/FEE001.c ****           {
3952:../Dave/Generated/src/FEE001/FEE001.c ****         	  PerformWrite = 1U;
3953:../Dave/Generated/src/FEE001/FEE001.c ****           }
3954:../Dave/Generated/src/FEE001/FEE001.c ****        }
3955:../Dave/Generated/src/FEE001/FEE001.c ****    }
3956:../Dave/Generated/src/FEE001/FEE001.c ****    else
3957:../Dave/Generated/src/FEE001/FEE001.c ****    {
3958:../Dave/Generated/src/FEE001/FEE001.c ****  	  PerformWrite = 1U;
3959:../Dave/Generated/src/FEE001/FEE001.c ****    }
3960:../Dave/Generated/src/FEE001/FEE001.c **** 
3961:../Dave/Generated/src/FEE001/FEE001.c ****    /* Write operation Starts */
3962:../Dave/Generated/src/FEE001/FEE001.c ****    if(PerformWrite == 1U)
3963:../Dave/Generated/src/FEE001/FEE001.c ****    {
3964:../Dave/Generated/src/FEE001/FEE001.c **** 	  /* Initialise variables */
3965:../Dave/Generated/src/FEE001/FEE001.c **** 	  StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
3966:../Dave/Generated/src/FEE001/FEE001.c **** 	  StateDataPtr->FeeUserWriteBytesCount = 0U;
3967:../Dave/Generated/src/FEE001/FEE001.c **** 
3968:../Dave/Generated/src/FEE001/FEE001.c ****       /* User Invalidate operation local function call */
3969:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus == 1U)
3970:../Dave/Generated/src/FEE001/FEE001.c ****       {
3971:../Dave/Generated/src/FEE001/FEE001.c ****          Fee_lHandleInvldReq(UserBlockIndex);         
3972:../Dave/Generated/src/FEE001/FEE001.c ****       }
3973:../Dave/Generated/src/FEE001/FEE001.c ****       /* User normal Write operation local function call */
3974:../Dave/Generated/src/FEE001/FEE001.c ****       else
3975:../Dave/Generated/src/FEE001/FEE001.c ****       {         
3976:../Dave/Generated/src/FEE001/FEE001.c ****          Fee_lHandleWriteReq((uint16_t)BlockPtr->Size,UserBlockIndex);
3977:../Dave/Generated/src/FEE001/FEE001.c ****       }
3978:../Dave/Generated/src/FEE001/FEE001.c ****       /* Global variable and next free address are updated in the below
3979:../Dave/Generated/src/FEE001/FEE001.c ****       * local function */
3980:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lLastBlkHandler();
3981:../Dave/Generated/src/FEE001/FEE001.c ****    }
3982:../Dave/Generated/src/FEE001/FEE001.c ****    else
3983:../Dave/Generated/src/FEE001/FEE001.c ****    {
3984:../Dave/Generated/src/FEE001/FEE001.c **** 	   StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
3985:../Dave/Generated/src/FEE001/FEE001.c ****        /* Set StateDataPtr->FeeJobResult as Failed */
3986:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
3987:../Dave/Generated/src/FEE001/FEE001.c ****    }
3988:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lLocalWrite */
3989:../Dave/Generated/src/FEE001/FEE001.c **** 
3990:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
3991:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : static void Fee_lHandleWriteReq                          **
3992:../Dave/Generated/src/FEE001/FEE001.c **** **                                         (  uint16_t  BlkSize,              **
3993:../Dave/Generated/src/FEE001/FEE001.c **** **                                            uint8_t  UserBlockIndex         **
3994:../Dave/Generated/src/FEE001/FEE001.c **** **                                         )                                  **
3995:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3996:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
3997:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
3998:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
3999:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4000:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters (IN) :  BlkSize        : Size of the block to be written        **
4001:../Dave/Generated/src/FEE001/FEE001.c **** **                    UserBlockIndex : Index at which block details are       **
4002:../Dave/Generated/src/FEE001/FEE001.c **** **                                     stored in the Configuration Block      **
4003:../Dave/Generated/src/FEE001/FEE001.c **** **                                     Array                                  **
4004:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4005:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
4006:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4007:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : status_t                                                 **
4008:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4009:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will handle the execution of the write      **
4010:../Dave/Generated/src/FEE001/FEE001.c **** **                   request. This function is exclusively called by          **
4011:../Dave/Generated/src/FEE001/FEE001.c **** **                   Fee_lLocalWrite                                          **
4012:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
4013:../Dave/Generated/src/FEE001/FEE001.c **** 
4014:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lHandleWriteReq( uint16_t  BlkSize,
4015:../Dave/Generated/src/FEE001/FEE001.c ****                                  uint8_t  UserBlockIndex
4016:../Dave/Generated/src/FEE001/FEE001.c ****                                )
4017:../Dave/Generated/src/FEE001/FEE001.c **** {
4018:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType   *StateDataPtr;
4019:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t*             ReadWriteBuffPtr;
4020:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t*             PendingRequestPtr;
4021:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t*             DataBufferPtr;
4022:../Dave/Generated/src/FEE001/FEE001.c ****    uint16_t             DataByteCnt;
4023:../Dave/Generated/src/FEE001/FEE001.c ****    status_t             ReturnValue;
4024:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t              BlockNumber;
4025:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t             SrcAddr;
4026:../Dave/Generated/src/FEE001/FEE001.c ****    #if( FEE001_CRC_ENABLE == 1U)
4027:../Dave/Generated/src/FEE001/FEE001.c ****    CRC001_EngineContextType CRCContext = {0U};
4028:../Dave/Generated/src/FEE001/FEE001.c ****    const CRC001_InitEngineType * CRCEnginePtr;
4029:../Dave/Generated/src/FEE001/FEE001.c ****    CRCEnginePtr= &CRC001EnginePtr0;
4030:../Dave/Generated/src/FEE001/FEE001.c ****    #endif
4031:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
4032:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCRCBuffer = FEE001_DUMMY_CRC;
4033:../Dave/Generated/src/FEE001/FEE001.c **** 
4034:../Dave/Generated/src/FEE001/FEE001.c ****  do
4035:../Dave/Generated/src/FEE001/FEE001.c ****  {
4036:../Dave/Generated/src/FEE001/FEE001.c ****    ReadWriteBuffPtr = StateDataPtr->FeeReadWriteBuffer;
4037:../Dave/Generated/src/FEE001/FEE001.c ****    PendingRequestPtr = &(StateDataPtr->FeePendReqStatus);
4038:../Dave/Generated/src/FEE001/FEE001.c ****    BlockNumber = StateDataPtr->FeePendReqInfo.BlockNumber;
4039:../Dave/Generated/src/FEE001/FEE001.c ****    DataBufferPtr = StateDataPtr->FeePendReqInfo.DataBufferPtr;
4040:../Dave/Generated/src/FEE001/FEE001.c **** 
4041:../Dave/Generated/src/FEE001/FEE001.c ****    /* Compose the write buffer with block number, Marker bits & counter */
4042:../Dave/Generated/src/FEE001/FEE001.c ****    *(uint8_t *)(void *)(ReadWriteBuffPtr) = BlockNumber;
4043:../Dave/Generated/src/FEE001/FEE001.c **** 
4044:../Dave/Generated/src/FEE001/FEE001.c ****    if(*PendingRequestPtr == FEE001_WRITE_REQ_PENDING)
4045:../Dave/Generated/src/FEE001/FEE001.c ****    {
4046:../Dave/Generated/src/FEE001/FEE001.c ****       *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = FEE001_VALID_BIT;
4047:../Dave/Generated/src/FEE001/FEE001.c ****       DataByteCnt = 2U;
4048:../Dave/Generated/src/FEE001/FEE001.c ****    }
4049:../Dave/Generated/src/FEE001/FEE001.c ****    else
4050:../Dave/Generated/src/FEE001/FEE001.c ****    {
4051:../Dave/Generated/src/FEE001/FEE001.c ****       #if( FEE001_CRC_ENABLE == 1U)
4052:../Dave/Generated/src/FEE001/FEE001.c **** 	    /* IF Block CRC is enabled then update the block Header with 16 bit CRC
4053:../Dave/Generated/src/FEE001/FEE001.c ****        * calculated from the data buffer*/
4054:../Dave/Generated/src/FEE001/FEE001.c ****       if(FEE001_CfgPtr->FeeDataBlockCRCEnable ==1U)
4055:../Dave/Generated/src/FEE001/FEE001.c ****       {
4056:../Dave/Generated/src/FEE001/FEE001.c ****     	(void)CRC001_CalculateCRC( CRCEnginePtr,DataBufferPtr,(uint32_t)BlkSize,
4057:../Dave/Generated/src/FEE001/FEE001.c ****     			                                               &CRCContext);
4058:../Dave/Generated/src/FEE001/FEE001.c ****         (void)CRC001_GetCRC( CRCEnginePtr, &CRCContext,
4059:../Dave/Generated/src/FEE001/FEE001.c ****         		                               &StateDataPtr->FeeCRCBuffer);
4060:../Dave/Generated/src/FEE001/FEE001.c **** 
4061:../Dave/Generated/src/FEE001/FEE001.c ****     	*(uint16_t *)(void *)((ReadWriteBuffPtr) + FEE001_CRC_OFFSET) =
4062:../Dave/Generated/src/FEE001/FEE001.c ****     		                           (uint16_t)StateDataPtr->FeeCRCBuffer;
4063:../Dave/Generated/src/FEE001/FEE001.c ****     	*(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = (FEE001_START_BIT |
4064:../Dave/Generated/src/FEE001/FEE001.c ****     			                                    FEE001_VALID_BIT |
4065:../Dave/Generated/src/FEE001/FEE001.c ****     			                                    FEE001_CRC_BIT );
4066:../Dave/Generated/src/FEE001/FEE001.c ****       }
4067:../Dave/Generated/src/FEE001/FEE001.c ****       else
4068:../Dave/Generated/src/FEE001/FEE001.c ****       #endif
4069:../Dave/Generated/src/FEE001/FEE001.c ****       {
4070:../Dave/Generated/src/FEE001/FEE001.c ****       	*(uint16_t *)(void *)((ReadWriteBuffPtr) + FEE001_CRC_OFFSET) =
4071:../Dave/Generated/src/FEE001/FEE001.c ****       	                              (uint16_t)StateDataPtr->FeeCRCBuffer;
4072:../Dave/Generated/src/FEE001/FEE001.c ****         *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = (FEE001_START_BIT |
4073:../Dave/Generated/src/FEE001/FEE001.c ****         		                                    FEE001_VALID_BIT);
4074:../Dave/Generated/src/FEE001/FEE001.c ****       }
4075:../Dave/Generated/src/FEE001/FEE001.c ****       DataByteCnt = 4U;
4076:../Dave/Generated/src/FEE001/FEE001.c ****    }
4077:../Dave/Generated/src/FEE001/FEE001.c **** 
4078:../Dave/Generated/src/FEE001/FEE001.c ****    /* Add data to the write buffer from the user specified pointer */
4079:../Dave/Generated/src/FEE001/FEE001.c ****    do
4080:../Dave/Generated/src/FEE001/FEE001.c ****    {
4081:../Dave/Generated/src/FEE001/FEE001.c ****        *(ReadWriteBuffPtr + DataByteCnt) = *(DataBufferPtr);
4082:../Dave/Generated/src/FEE001/FEE001.c ****        DataByteCnt++;
4083:../Dave/Generated/src/FEE001/FEE001.c ****        (DataBufferPtr)++;
4084:../Dave/Generated/src/FEE001/FEE001.c ****        (StateDataPtr->FeeUserWriteBytesCount)++;
4085:../Dave/Generated/src/FEE001/FEE001.c **** 
4086:../Dave/Generated/src/FEE001/FEE001.c ****    }while(( DataByteCnt != FEE001_DFLASH_BLOCK_SIZE) &&
4087:../Dave/Generated/src/FEE001/FEE001.c ****             ( StateDataPtr->FeeUserWriteBytesCount != BlkSize ));
4088:../Dave/Generated/src/FEE001/FEE001.c **** 
4089:../Dave/Generated/src/FEE001/FEE001.c ****    /* If this is the last block being written for the write request */
4090:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeUserWriteBytesCount == BlkSize)
4091:../Dave/Generated/src/FEE001/FEE001.c ****    {
4092:../Dave/Generated/src/FEE001/FEE001.c ****       /* Set the pending request type Waiting for End of Notification */
4093:../Dave/Generated/src/FEE001/FEE001.c ****       *PendingRequestPtr = FEE001_WRITE_LAST_BLOCK_COMPLETED;
4094:../Dave/Generated/src/FEE001/FEE001.c **** 
4095:../Dave/Generated/src/FEE001/FEE001.c ****       /* If there is a scope for stuff bits(all-one) */
4096:../Dave/Generated/src/FEE001/FEE001.c ****       if ( DataByteCnt != FEE001_DFLASH_BLOCK_SIZE)
4097:../Dave/Generated/src/FEE001/FEE001.c ****       {
4098:../Dave/Generated/src/FEE001/FEE001.c ****          do
4099:../Dave/Generated/src/FEE001/FEE001.c ****          {
4100:../Dave/Generated/src/FEE001/FEE001.c ****             /*Stuff all-one for remaining bits of FeeReadWriteBuffer*/
4101:../Dave/Generated/src/FEE001/FEE001.c ****             *(ReadWriteBuffPtr + DataByteCnt) = FEE001_8BIT_ALL_ONE;
4102:../Dave/Generated/src/FEE001/FEE001.c ****             DataByteCnt++;
4103:../Dave/Generated/src/FEE001/FEE001.c ****          }while(DataByteCnt != FEE001_DFLASH_BLOCK_SIZE);
4104:../Dave/Generated/src/FEE001/FEE001.c ****       }
4105:../Dave/Generated/src/FEE001/FEE001.c ****    }
4106:../Dave/Generated/src/FEE001/FEE001.c ****    else
4107:../Dave/Generated/src/FEE001/FEE001.c ****    {
4108:../Dave/Generated/src/FEE001/FEE001.c ****       /* Set the pending request to Previous pending write request */
4109:../Dave/Generated/src/FEE001/FEE001.c ****       *PendingRequestPtr = FEE001_WRITE_REQ_PENDING;
4110:../Dave/Generated/src/FEE001/FEE001.c ****    }
4111:../Dave/Generated/src/FEE001/FEE001.c **** 
4112:../Dave/Generated/src/FEE001/FEE001.c ****    /* Mark the block as inconsistent */
4113:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeBlockInfo[UserBlockIndex].Status.Consistent = 0U;
4114:../Dave/Generated/src/FEE001/FEE001.c **** 
4115:../Dave/Generated/src/FEE001/FEE001.c ****    SrcAddr = (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
4116:../Dave/Generated/src/FEE001/FEE001.c ****           (StateDataPtr->FeeWrittenDFlashBlocksCnt * FEE001_DFLASH_BLOCK_SIZE));
4117:../Dave/Generated/src/FEE001/FEE001.c **** 
4118:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt =
4119:../Dave/Generated/src/FEE001/FEE001.c ****                              StateDataPtr->FeeWrittenDFlashBlocksCnt + 1U;
4120:../Dave/Generated/src/FEE001/FEE001.c **** 
4121:../Dave/Generated/src/FEE001/FEE001.c ****    #if( FEE001_COMPARE_ON_WRITE_ENABLE == 1U)
4122:../Dave/Generated/src/FEE001/FEE001.c ****    /* Call Fee_lWriteBlock with compare to write data in the DFLASH */
4123:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = (status_t)Fee_lWriteBlock((uint32_t)SrcAddr,
4124:../Dave/Generated/src/FEE001/FEE001.c ****                                           (uint32_t*)(void*)ReadWriteBuffPtr);
4125:../Dave/Generated/src/FEE001/FEE001.c **** 
4126:../Dave/Generated/src/FEE001/FEE001.c ****    #else
4127:../Dave/Generated/src/FEE001/FEE001.c **** 
4128:../Dave/Generated/src/FEE001/FEE001.c ****    /* Clear all error status flags before flash operation*/
4129:../Dave/Generated/src/FEE001/FEE001.c ****    FLASH003_ClearStatus();
4130:../Dave/Generated/src/FEE001/FEE001.c **** 
4131:../Dave/Generated/src/FEE001/FEE001.c ****    /* Call Fls_Write to write data in the DFLASH */
4132:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = (status_t)FLASH003_WriteBlock((uint32_t)SrcAddr,
4133:../Dave/Generated/src/FEE001/FEE001.c ****                                           (uint32_t*)(void*)ReadWriteBuffPtr);
4134:../Dave/Generated/src/FEE001/FEE001.c ****    #endif
4135:../Dave/Generated/src/FEE001/FEE001.c ****    /* If FLASH003_WriteBlock accept the write request */
4136:../Dave/Generated/src/FEE001/FEE001.c ****    if(ReturnValue == 0U)
4137:../Dave/Generated/src/FEE001/FEE001.c ****    {
4138:../Dave/Generated/src/FEE001/FEE001.c ****       /* Store the request parameters in last request buffer */
4139:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.DataBufferPtr = DataBufferPtr;
4140:../Dave/Generated/src/FEE001/FEE001.c **** 
4141:../Dave/Generated/src/FEE001/FEE001.c ****       /* Set current request block number inFeeCurrReqBlockNum */
4142:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
4143:../Dave/Generated/src/FEE001/FEE001.c ****    }
4144:../Dave/Generated/src/FEE001/FEE001.c ****    /* If FLASH003_WriteBlock did not accept the write request */
4145:../Dave/Generated/src/FEE001/FEE001.c ****    else
4146:../Dave/Generated/src/FEE001/FEE001.c ****    {
4147:../Dave/Generated/src/FEE001/FEE001.c ****     /* Set the pending request type Waiting for End of Notification */
4148:../Dave/Generated/src/FEE001/FEE001.c ****     *PendingRequestPtr = FEE001_WRITE_LAST_BLOCK_COMPLETED;
4149:../Dave/Generated/src/FEE001/FEE001.c **** 
4150:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
4151:../Dave/Generated/src/FEE001/FEE001.c ****    }
4152:../Dave/Generated/src/FEE001/FEE001.c **** 
4153:../Dave/Generated/src/FEE001/FEE001.c ****  }while (*PendingRequestPtr != FEE001_WRITE_LAST_BLOCK_COMPLETED);
4154:../Dave/Generated/src/FEE001/FEE001.c **** 
4155:../Dave/Generated/src/FEE001/FEE001.c **** } /* End of Fee_lHandleWriteReq */
4156:../Dave/Generated/src/FEE001/FEE001.c **** 
4157:../Dave/Generated/src/FEE001/FEE001.c **** 
4158:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
4159:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : static void Fee_lHandleInvldReq(                         **
4160:../Dave/Generated/src/FEE001/FEE001.c **** **                                                   uint8_t  UserBlockIndex  **
4161:../Dave/Generated/src/FEE001/FEE001.c **** **                                                  )                         **
4162:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4163:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
4164:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4165:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
4166:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4167:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : None                                                     **
4168:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4169:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
4170:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4171:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : status_t                                                 **
4172:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4173:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will handle the execution of the            **
4174:../Dave/Generated/src/FEE001/FEE001.c **** **                   invalidate request. This function is exclusively called  **
4175:../Dave/Generated/src/FEE001/FEE001.c **** **                   by Fee_lLocalWrite                                       **
4176:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
4177:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lHandleInvldReq( uint8_t  UserBlockIndex
4178:../Dave/Generated/src/FEE001/FEE001.c ****                                )
4179:../Dave/Generated/src/FEE001/FEE001.c **** {
4180:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType     *StateDataPtr;
4181:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t*              ReadWriteBuffPtr;
4182:../Dave/Generated/src/FEE001/FEE001.c ****    uint16_t              DataByteCnt;
4183:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t               BlockNumber;
4184:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t              SrcAddr;
4185:../Dave/Generated/src/FEE001/FEE001.c ****    uint32_t              ReturnValue;
4186:../Dave/Generated/src/FEE001/FEE001.c **** 
4187:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
4188:../Dave/Generated/src/FEE001/FEE001.c **** 
4189:../Dave/Generated/src/FEE001/FEE001.c ****    ReadWriteBuffPtr = StateDataPtr->FeeReadWriteBuffer;
4190:../Dave/Generated/src/FEE001/FEE001.c ****    BlockNumber = StateDataPtr->FeePendReqInfo.BlockNumber;
4191:../Dave/Generated/src/FEE001/FEE001.c **** 
4192:../Dave/Generated/src/FEE001/FEE001.c **** 
4193:../Dave/Generated/src/FEE001/FEE001.c ****    /* Compose the write buffer with block number, Marker bits and counter */
4194:../Dave/Generated/src/FEE001/FEE001.c ****    /* info. If it was an invalidate request then reset status */
4195:../Dave/Generated/src/FEE001/FEE001.c ****    *(uint8_t *)(void *)(ReadWriteBuffPtr) = BlockNumber;
4196:../Dave/Generated/src/FEE001/FEE001.c ****    *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = FEE001_START_BIT;
4197:../Dave/Generated/src/FEE001/FEE001.c **** 
4198:../Dave/Generated/src/FEE001/FEE001.c **** 
4199:../Dave/Generated/src/FEE001/FEE001.c ****    for(DataByteCnt = 2U;DataByteCnt < FEE001_DFLASH_BLOCK_SIZE;
4200:../Dave/Generated/src/FEE001/FEE001.c ****        DataByteCnt++)
4201:../Dave/Generated/src/FEE001/FEE001.c ****    {
4202:../Dave/Generated/src/FEE001/FEE001.c ****      *(uint8_t *)(void *)(ReadWriteBuffPtr + DataByteCnt) = FEE001_8BIT_ALL_ONE;
4203:../Dave/Generated/src/FEE001/FEE001.c ****    }
4204:../Dave/Generated/src/FEE001/FEE001.c **** 
4205:../Dave/Generated/src/FEE001/FEE001.c ****    /* Mark the block as inconsistent */
4206:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeBlockInfo[UserBlockIndex].Status.Consistent = 0U;
4207:../Dave/Generated/src/FEE001/FEE001.c **** 
4208:../Dave/Generated/src/FEE001/FEE001.c ****    /* Set the pending request type to Waiting for End of Notification*/
4209:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeePendReqStatus = FEE001_WRITE_LAST_BLOCK_COMPLETED;
4210:../Dave/Generated/src/FEE001/FEE001.c **** 
4211:../Dave/Generated/src/FEE001/FEE001.c ****    SrcAddr = (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
4212:../Dave/Generated/src/FEE001/FEE001.c ****               (StateDataPtr->FeeWrittenDFlashBlocksCnt *
4213:../Dave/Generated/src/FEE001/FEE001.c ****                   (uint32_t)FEE001_DFLASH_BLOCK_SIZE));
4214:../Dave/Generated/src/FEE001/FEE001.c **** 
4215:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt = 1U;
4216:../Dave/Generated/src/FEE001/FEE001.c **** 
4217:../Dave/Generated/src/FEE001/FEE001.c ****    /* Clear all error status flags before flash operation*/
4218:../Dave/Generated/src/FEE001/FEE001.c ****    FLASH003_ClearStatus();
4219:../Dave/Generated/src/FEE001/FEE001.c **** 
4220:../Dave/Generated/src/FEE001/FEE001.c ****    /* Call Flash003_Write to write data in the DFLASH */
4221:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = (uint32_t)FLASH003_WriteBlock((uint32_t)SrcAddr,
4222:../Dave/Generated/src/FEE001/FEE001.c ****                               (uint32_t*)(void*)ReadWriteBuffPtr);
4223:../Dave/Generated/src/FEE001/FEE001.c **** 
4224:../Dave/Generated/src/FEE001/FEE001.c ****    /* If Fls_Write did not accept the write request */
4225:../Dave/Generated/src/FEE001/FEE001.c ****    if(ReturnValue == 0U)
4226:../Dave/Generated/src/FEE001/FEE001.c ****    {
4227:../Dave/Generated/src/FEE001/FEE001.c ****       /* Set current request block number inFeeCurrReqBlockNum */
4228:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
4229:../Dave/Generated/src/FEE001/FEE001.c ****    }
4230:../Dave/Generated/src/FEE001/FEE001.c ****    else
4231:../Dave/Generated/src/FEE001/FEE001.c ****    {
4232:../Dave/Generated/src/FEE001/FEE001.c **** 	   StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
4233:../Dave/Generated/src/FEE001/FEE001.c ****    }
4234:../Dave/Generated/src/FEE001/FEE001.c **** 
4235:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lHandleInvldReq */
4236:../Dave/Generated/src/FEE001/FEE001.c **** 
4237:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
4238:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : static void Fee_lLastBlkHandler(void)                    **
4239:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4240:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
4241:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4242:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
4243:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4244:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : None                                                     **
4245:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4246:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
4247:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4248:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
4249:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4250:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will end of job handling activities for     **
4251:../Dave/Generated/src/FEE001/FEE001.c **** **                   Write,Invalidate requests                                **
4252:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
4253:../Dave/Generated/src/FEE001/FEE001.c **** 
4254:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lLastBlkHandler(void)
4255:../Dave/Generated/src/FEE001/FEE001.c **** {
4256:../Dave/Generated/src/FEE001/FEE001.c ****    FEE001_StateDataType  *StateDataPtr;
4257:../Dave/Generated/src/FEE001/FEE001.c ****    uint8_t            BlockIndex;
4258:../Dave/Generated/src/FEE001/FEE001.c **** 
4259:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
4260:../Dave/Generated/src/FEE001/FEE001.c **** 
4261:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeUserJobResult == FEE001_JOB_FAIL)
4262:../Dave/Generated/src/FEE001/FEE001.c ****    {
4263:../Dave/Generated/src/FEE001/FEE001.c **** 
4264:../Dave/Generated/src/FEE001/FEE001.c ****        if(StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus == 1U)
4265:../Dave/Generated/src/FEE001/FEE001.c ****        {
4266:../Dave/Generated/src/FEE001/FEE001.c ****           StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 0U; /*FALSE*/
4267:../Dave/Generated/src/FEE001/FEE001.c ****        }
4268:../Dave/Generated/src/FEE001/FEE001.c ****        /* Set StateDataPtr->FeeJobResult as Failed */
4269:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
4270:../Dave/Generated/src/FEE001/FEE001.c **** 
4271:../Dave/Generated/src/FEE001/FEE001.c ****        /************* RESET/UPDATE GLOBAL VARIABLES USED *******************/
4272:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeNextFreeBlockAddr =
4273:../Dave/Generated/src/FEE001/FEE001.c ****                              (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
4274:../Dave/Generated/src/FEE001/FEE001.c ****                               (StateDataPtr->FeeWrittenDFlashBlocksCnt
4275:../Dave/Generated/src/FEE001/FEE001.c ****                                   * FEE001_DFLASH_BLOCK_SIZE));
4276:../Dave/Generated/src/FEE001/FEE001.c ****    }
4277:../Dave/Generated/src/FEE001/FEE001.c ****    else
4278:../Dave/Generated/src/FEE001/FEE001.c ****    {
4279:../Dave/Generated/src/FEE001/FEE001.c **** 
4280:../Dave/Generated/src/FEE001/FEE001.c ****     BlockIndex = Fee_lGetUsrBlockIndex(StateDataPtr->FeeCurrReqBlockNum);
4281:../Dave/Generated/src/FEE001/FEE001.c ****     /****************   UPDATE THE CACHE TABLE *********************/
4282:../Dave/Generated/src/FEE001/FEE001.c **** 
4283:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeBlockInfo[BlockIndex].Status.Consistent = 1U;
4284:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeBlockInfo[BlockIndex].Address =
4285:../Dave/Generated/src/FEE001/FEE001.c ****                                             StateDataPtr->FeeNextFreeBlockAddr;
4286:../Dave/Generated/src/FEE001/FEE001.c **** 
4287:../Dave/Generated/src/FEE001/FEE001.c ****     /* If Invalidate request was ongoing then reset the flag */
4288:../Dave/Generated/src/FEE001/FEE001.c ****     if(StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus == 1U)
4289:../Dave/Generated/src/FEE001/FEE001.c ****     {
4290:../Dave/Generated/src/FEE001/FEE001.c ****       /* Updated for Mark Blk as INVALID*/
4291:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeBlockInfo[BlockIndex].Status.Valid = 0U;
4292:../Dave/Generated/src/FEE001/FEE001.c ****     }
4293:../Dave/Generated/src/FEE001/FEE001.c ****     else
4294:../Dave/Generated/src/FEE001/FEE001.c ****     {
4295:../Dave/Generated/src/FEE001/FEE001.c ****     	/* Updated for Mark Blk as VALID*/
4296:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeBlockInfo[BlockIndex].Status.Valid = 1U;
4297:../Dave/Generated/src/FEE001/FEE001.c ****         #if( FEE001_CRC_ENABLE == 1U)
4298:../Dave/Generated/src/FEE001/FEE001.c ****         if(FEE001_CfgPtr->FeeDataBlockCRCEnable ==1U)
4299:../Dave/Generated/src/FEE001/FEE001.c ****         {
4300:../Dave/Generated/src/FEE001/FEE001.c ****         	/* Updated for Mark Blk as CRC enabled block*/
4301:../Dave/Generated/src/FEE001/FEE001.c ****         	StateDataPtr->FeeBlockInfo[BlockIndex].Status.Crc = 1U;
4302:../Dave/Generated/src/FEE001/FEE001.c ****         }
4303:../Dave/Generated/src/FEE001/FEE001.c ****         else
4304:../Dave/Generated/src/FEE001/FEE001.c ****         #endif
4305:../Dave/Generated/src/FEE001/FEE001.c ****         {
4306:../Dave/Generated/src/FEE001/FEE001.c ****             /* Updated for Mark Blk as CRC disabled block*/
4307:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeBlockInfo[BlockIndex].Status.Crc = 0U;
4308:../Dave/Generated/src/FEE001/FEE001.c ****         }
4309:../Dave/Generated/src/FEE001/FEE001.c ****     }
4310:../Dave/Generated/src/FEE001/FEE001.c **** 
4311:../Dave/Generated/src/FEE001/FEE001.c ****     /************* RESET/UPDATE GLOBAL VARIABLES USED *******************/
4312:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeNextFreeBlockAddr =
4313:../Dave/Generated/src/FEE001/FEE001.c ****           (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
4314:../Dave/Generated/src/FEE001/FEE001.c ****           (StateDataPtr->FeeWrittenDFlashBlocksCnt * FEE001_DFLASH_BLOCK_SIZE));
4315:../Dave/Generated/src/FEE001/FEE001.c **** 
4316:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 0U;
4317:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeJobResult = FEE001_JOB_OK;
4318:../Dave/Generated/src/FEE001/FEE001.c ****    }
4319:../Dave/Generated/src/FEE001/FEE001.c **** 
4320:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lLastBlkHandler */
4321:../Dave/Generated/src/FEE001/FEE001.c **** 
4322:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
4323:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : static void Fee_lLocalRead(uint32_t ReadMode)            **
4324:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4325:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
4326:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4327:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
4328:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4329:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : None                                                     **
4330:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4331:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
4332:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4333:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
4334:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4335:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will perform the read operation on DFLASH   **
4336:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
4337:../Dave/Generated/src/FEE001/FEE001.c **** 
4338:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lLocalRead(uint32_t ReadMode)
4339:../Dave/Generated/src/FEE001/FEE001.c **** {
 593              		.loc 1 4339 0
 594              		.cfi_startproc
 595              	.LVL73:
 596 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 597              	.LCFI6:
 598              		.cfi_def_cfa_offset 20
 599              		.cfi_offset 4, -20
 600              		.cfi_offset 5, -16
 601              		.cfi_offset 6, -12
 602              		.cfi_offset 7, -8
 603              		.cfi_offset 14, -4
4340:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t            UserBlockIndex;
4341:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t            ReadLimit;
4342:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t            BlockCount;
4343:../Dave/Generated/src/FEE001/FEE001.c ****   uint16_t           ReadLength;
4344:../Dave/Generated/src/FEE001/FEE001.c ****   uint16_t           TmpBlockOffset;
4345:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t            BlockNumber;
4346:../Dave/Generated/src/FEE001/FEE001.c ****   uint16_t           BlockOffset;
4347:../Dave/Generated/src/FEE001/FEE001.c ****   uint16_t           Length;
4348:../Dave/Generated/src/FEE001/FEE001.c ****   uint32_t           ActualAddr;
4349:../Dave/Generated/src/FEE001/FEE001.c ****   uint32_t           ReturnVal;
4350:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t            BlockIndex;
4351:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_PendReqBufType *PendReqPtr;
4352:../Dave/Generated/src/FEE001/FEE001.c ****   FEE001_StateDataType  *StateDataPtr;
4353:../Dave/Generated/src/FEE001/FEE001.c ****   uint8_t            *DataBufferPtr;
4354:../Dave/Generated/src/FEE001/FEE001.c **** 
4355:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 604              		.loc 1 4355 0
 605 0002 604B     		ldr	r3, .L77
4339:../Dave/Generated/src/FEE001/FEE001.c **** {
 606              		.loc 1 4339 0
 607 0004 89B0     		sub	sp, sp, #36
 608              	.LCFI7:
 609              		.cfi_def_cfa_offset 56
4339:../Dave/Generated/src/FEE001/FEE001.c **** {
 610              		.loc 1 4339 0
 611 0006 0590     		str	r0, [sp, #20]
 612              		.loc 1 4355 0
 613 0008 1868     		ldr	r0, [r3]
 614              	.LVL74:
4356:../Dave/Generated/src/FEE001/FEE001.c ****   BlockNumber = StateDataPtr->FeePendReqInfo.BlockNumber;
4357:../Dave/Generated/src/FEE001/FEE001.c ****   BlockOffset = StateDataPtr->FeePendReqInfo.BlockOffset;
4358:../Dave/Generated/src/FEE001/FEE001.c ****   DataBufferPtr = StateDataPtr->FeePendReqInfo.DataBufferPtr;
4359:../Dave/Generated/src/FEE001/FEE001.c ****   Length = StateDataPtr->FeePendReqInfo.Length;
4360:../Dave/Generated/src/FEE001/FEE001.c **** 
4361:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = 0U;
4362:../Dave/Generated/src/FEE001/FEE001.c ****   TmpBlockOffset = BlockOffset;
4363:../Dave/Generated/src/FEE001/FEE001.c ****   PendReqPtr = &StateDataPtr->FeePendReqInfo;
4364:../Dave/Generated/src/FEE001/FEE001.c ****   UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
4365:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr->FeeUserJobResult = FEE001_JOB_OK;
 615              		.loc 1 4365 0
 616 000a 5F4F     		ldr	r7, .L77+4
4355:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 617              		.loc 1 4355 0
 618 000c 0468     		ldr	r4, [r0]
 619              	.LVL75:
 620              		.loc 1 4365 0
 621 000e 0026     		mov	r6, #0
4356:../Dave/Generated/src/FEE001/FEE001.c ****   BlockNumber = StateDataPtr->FeePendReqInfo.BlockNumber;
 622              		.loc 1 4356 0
 623 0010 207D     		ldrb	r0, [r4, #20]
4358:../Dave/Generated/src/FEE001/FEE001.c ****   DataBufferPtr = StateDataPtr->FeePendReqInfo.DataBufferPtr;
 624              		.loc 1 4358 0
 625 0012 2269     		ldr	r2, [r4, #16]
4356:../Dave/Generated/src/FEE001/FEE001.c ****   BlockNumber = StateDataPtr->FeePendReqInfo.BlockNumber;
 626              		.loc 1 4356 0
 627 0014 0490     		str	r0, [sp, #16]
 628              	.LVL76:
4357:../Dave/Generated/src/FEE001/FEE001.c ****   BlockOffset = StateDataPtr->FeePendReqInfo.BlockOffset;
 629              		.loc 1 4357 0
 630 0016 A189     		ldrh	r1, [r4, #12]
4358:../Dave/Generated/src/FEE001/FEE001.c ****   DataBufferPtr = StateDataPtr->FeePendReqInfo.DataBufferPtr;
 631              		.loc 1 4358 0
 632 0018 0392     		str	r2, [sp, #12]
4357:../Dave/Generated/src/FEE001/FEE001.c ****   BlockOffset = StateDataPtr->FeePendReqInfo.BlockOffset;
 633              		.loc 1 4357 0
 634 001a 0191     		str	r1, [sp, #4]
 635              	.LVL77:
4359:../Dave/Generated/src/FEE001/FEE001.c ****   Length = StateDataPtr->FeePendReqInfo.Length;
 636              		.loc 1 4359 0
 637 001c E589     		ldrh	r5, [r4, #14]
 638 001e 0295     		str	r5, [sp, #8]
 639              	.LVL78:
4364:../Dave/Generated/src/FEE001/FEE001.c ****   UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
 640              		.loc 1 4364 0
 641 0020 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 642              	.LVL79:
4366:../Dave/Generated/src/FEE001/FEE001.c **** 
4367:../Dave/Generated/src/FEE001/FEE001.c ****   /*********************** PERFORM CHECKS START *****************************/
4368:../Dave/Generated/src/FEE001/FEE001.c **** 
4369:../Dave/Generated/src/FEE001/FEE001.c ****   /* If the logical block is inconsistent */
4370:../Dave/Generated/src/FEE001/FEE001.c ****   if((StateDataPtr->FeeBlockInfo[UserBlockIndex].Status.Consistent == 0U)&&
 643              		.loc 1 4370 0
 644 0024 C300     		lsl	r3, r0, #3
4364:../Dave/Generated/src/FEE001/FEE001.c ****   UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
 645              		.loc 1 4364 0
 646 0026 0690     		str	r0, [sp, #24]
 647              	.LVL80:
4365:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr->FeeUserJobResult = FEE001_JOB_OK;
 648              		.loc 1 4365 0
 649 0028 E655     		strb	r6, [r4, r7]
 650              		.loc 1 4370 0
 651 002a E018     		add	r0, r4, r3
 652 002c 0179     		ldrb	r1, [r0, #4]
 653 002e 8807     		lsl	r0, r1, #30
 654 0030 14D4     		bmi	.L58
 655              		.loc 1 4370 0 is_stmt 0 discriminator 1
 656 0032 059A     		ldr	r2, [sp, #20]
 657 0034 002A     		cmp	r2, #0
 658 0036 11D1     		bne	.L58
4371:../Dave/Generated/src/FEE001/FEE001.c ****      (ReadMode == FEE001_NORM_READ))
4372:../Dave/Generated/src/FEE001/FEE001.c ****   {
4373:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeJobResult = FEE001_JOB_INCONSISTENT;
4374:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 659              		.loc 1 4374 0 is_stmt 1
 660 0038 544A     		ldr	r2, .L77+8
 661 003a 0125     		mov	r5, #1
4373:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeJobResult = FEE001_JOB_INCONSISTENT;
 662              		.loc 1 4373 0
 663 003c 0326     		mov	r6, #3
4375:../Dave/Generated/src/FEE001/FEE001.c **** 
4376:../Dave/Generated/src/FEE001/FEE001.c ****       /* Update block state as Inconsistent in Cache */
4377:../Dave/Generated/src/FEE001/FEE001.c ****      BlockIndex = Fee_lGetUsrBlockIndex(StateDataPtr->FeeCurrReqBlockNum);
 664              		.loc 1 4377 0
 665 003e AC23     		mov	r3, #172
4373:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeJobResult = FEE001_JOB_INCONSISTENT;
 666              		.loc 1 4373 0
 667 0040 A676     		strb	r6, [r4, #26]
4374:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 668              		.loc 1 4374 0
 669 0042 A554     		strb	r5, [r4, r2]
 670              		.loc 1 4377 0
 671 0044 AB40     		lsl	r3, r3, r5
 672 0046 E05C     		ldrb	r0, [r4, r3]
 673 0048 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 674              	.LVL81:
4378:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeBlockInfo[BlockIndex].Status.Consistent = 0U;
 675              		.loc 1 4378 0
 676 004c C100     		lsl	r1, r0, #3
 677 004e 6018     		add	r0, r4, r1
 678              	.LVL82:
 679 0050 0679     		ldrb	r6, [r0, #4]
 680 0052 0222     		mov	r2, #2
 681 0054 9643     		bic	r6, r2
 682 0056 0671     		strb	r6, [r0, #4]
4379:../Dave/Generated/src/FEE001/FEE001.c **** 
4380:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
 683              		.loc 1 4380 0
 684 0058 E555     		strb	r5, [r4, r7]
 685 005a 90E0     		b	.L57
 686              	.L58:
4381:../Dave/Generated/src/FEE001/FEE001.c ****   }
4382:../Dave/Generated/src/FEE001/FEE001.c ****   /* If the logical block is invalid */
4383:../Dave/Generated/src/FEE001/FEE001.c ****   else if((StateDataPtr->FeeBlockInfo[UserBlockIndex].Status.Valid == 0U)&&
 687              		.loc 1 4383 0
 688 005c E518     		add	r5, r4, r3
 689 005e 2F79     		ldrb	r7, [r5, #4]
 690 0060 F807     		lsl	r0, r7, #31
 691 0062 0AD4     		bmi	.L60
 692              		.loc 1 4383 0 is_stmt 0 discriminator 1
 693 0064 059E     		ldr	r6, [sp, #20]
 694 0066 002E     		cmp	r6, #0
 695 0068 07D1     		bne	.L60
4384:../Dave/Generated/src/FEE001/FEE001.c **** 	     (ReadMode == FEE001_NORM_READ))
4385:../Dave/Generated/src/FEE001/FEE001.c ****   {
4386:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeJobResult = FEE001_JOB_INVALID;
4387:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 696              		.loc 1 4387 0 is_stmt 1
 697 006a 4848     		ldr	r0, .L77+8
4388:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
 698              		.loc 1 4388 0
 699 006c 464F     		ldr	r7, .L77+4
4387:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 700              		.loc 1 4387 0
 701 006e 0121     		mov	r1, #1
4386:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeJobResult = FEE001_JOB_INVALID;
 702              		.loc 1 4386 0
 703 0070 0425     		mov	r5, #4
 704 0072 A576     		strb	r5, [r4, #26]
4387:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 705              		.loc 1 4387 0
 706 0074 2154     		strb	r1, [r4, r0]
 707              		.loc 1 4388 0
 708 0076 E155     		strb	r1, [r4, r7]
 709 0078 81E0     		b	.L57
 710              	.L60:
4389:../Dave/Generated/src/FEE001/FEE001.c ****   }
4390:../Dave/Generated/src/FEE001/FEE001.c ****   else
4391:../Dave/Generated/src/FEE001/FEE001.c ****   {
4392:../Dave/Generated/src/FEE001/FEE001.c **** 	  StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_PENDING;
 711              		.loc 1 4392 0
 712 007a 4448     		ldr	r0, .L77+8
 713 007c 0323     		mov	r3, #3
4361:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = 0U;
 714              		.loc 1 4361 0
 715 007e 0021     		mov	r1, #0
4362:../Dave/Generated/src/FEE001/FEE001.c ****   TmpBlockOffset = BlockOffset;
 716              		.loc 1 4362 0
 717 0080 019D     		ldr	r5, [sp, #4]
 718              		.loc 1 4392 0
 719 0082 2354     		strb	r3, [r4, r0]
4361:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = 0U;
 720              		.loc 1 4361 0
 721 0084 0091     		str	r1, [sp]
 722              	.LVL83:
 723              	.L75:
4393:../Dave/Generated/src/FEE001/FEE001.c **** 	   /********** CASE 2: READ REQSTD STATE *******************/
4394:../Dave/Generated/src/FEE001/FEE001.c ****     /* PERFORM READ START */
4395:../Dave/Generated/src/FEE001/FEE001.c ****     while( StateDataPtr->FeePendReqStatus == FEE001_READ_REQ_PENDING)
 724              		.loc 1 4395 0 discriminator 1
 725 0086 414A     		ldr	r2, .L77+8
 726 0088 A75C     		ldrb	r7, [r4, r2]
 727 008a 032F     		cmp	r7, #3
 728 008c 77D1     		bne	.L57
 729              	.L74:
4396:../Dave/Generated/src/FEE001/FEE001.c ****     {
4397:../Dave/Generated/src/FEE001/FEE001.c ****       /* Switch to the block which is required to be read according to read */
4398:../Dave/Generated/src/FEE001/FEE001.c ****       /* offset provided by the user                                       */
4399:../Dave/Generated/src/FEE001/FEE001.c ****       if(TmpBlockOffset >= FEE001_BLOCK1_DATA_SIZE)
 730              		.loc 1 4399 0
 731 008e 0B2D     		cmp	r5, #11
 732 0090 0DD9     		bls	.L62
4400:../Dave/Generated/src/FEE001/FEE001.c ****       {
4401:../Dave/Generated/src/FEE001/FEE001.c ****          BlockCount =  BlockCount + 1U;
 733              		.loc 1 4401 0
 734 0092 009E     		ldr	r6, [sp]
4402:../Dave/Generated/src/FEE001/FEE001.c ****          TmpBlockOffset = TmpBlockOffset - FEE001_BLOCK1_DATA_SIZE;
 735              		.loc 1 4402 0
 736 0094 0C3D     		sub	r5, r5, #12
 737              	.LVL84:
4401:../Dave/Generated/src/FEE001/FEE001.c ****          BlockCount =  BlockCount + 1U;
 738              		.loc 1 4401 0
 739 0096 0136     		add	r6, r6, #1
 740 0098 F3B2     		uxtb	r3, r6
 741 009a 0093     		str	r3, [sp]
 742              	.LVL85:
 743              	.L76:
4403:../Dave/Generated/src/FEE001/FEE001.c ****          while(TmpBlockOffset >= FEE001_BLOCK2_DATA_SIZE)
4404:../Dave/Generated/src/FEE001/FEE001.c ****          {
4405:../Dave/Generated/src/FEE001/FEE001.c ****             BlockCount =  BlockCount + 1U;
4406:../Dave/Generated/src/FEE001/FEE001.c ****             TmpBlockOffset = TmpBlockOffset - FEE001_BLOCK2_DATA_SIZE;
 744              		.loc 1 4406 0
 745 009c ADB2     		uxth	r5, r5
 746              	.LVL86:
4403:../Dave/Generated/src/FEE001/FEE001.c ****          while(TmpBlockOffset >= FEE001_BLOCK2_DATA_SIZE)
 747              		.loc 1 4403 0
 748 009e 0D2D     		cmp	r5, #13
 749 00a0 05D9     		bls	.L62
 750              	.L64:
4405:../Dave/Generated/src/FEE001/FEE001.c ****             BlockCount =  BlockCount + 1U;
 751              		.loc 1 4405 0
 752 00a2 009A     		ldr	r2, [sp]
 753              		.loc 1 4406 0
 754 00a4 0E3D     		sub	r5, r5, #14
 755              	.LVL87:
4405:../Dave/Generated/src/FEE001/FEE001.c ****             BlockCount =  BlockCount + 1U;
 756              		.loc 1 4405 0
 757 00a6 0132     		add	r2, r2, #1
 758 00a8 D3B2     		uxtb	r3, r2
 759 00aa 0093     		str	r3, [sp]
 760 00ac F6E7     		b	.L76
 761              	.LVL88:
 762              	.L62:
4407:../Dave/Generated/src/FEE001/FEE001.c ****          }
4408:../Dave/Generated/src/FEE001/FEE001.c ****       }
4409:../Dave/Generated/src/FEE001/FEE001.c **** 
4410:../Dave/Generated/src/FEE001/FEE001.c ****       if(ReadMode == FEE001_PREV_READ)
 763              		.loc 1 4410 0
 764 00ae 0598     		ldr	r0, [sp, #20]
 765 00b0 0128     		cmp	r0, #1
 766 00b2 01D1     		bne	.L65
4411:../Dave/Generated/src/FEE001/FEE001.c ****       {
4412:../Dave/Generated/src/FEE001/FEE001.c ****     	  /* Take the address from previous existing block address */
4413:../Dave/Generated/src/FEE001/FEE001.c ****         ActualAddr = PendReqPtr->BlkStartAddr;
 767              		.loc 1 4413 0
 768 00b4 A768     		ldr	r7, [r4, #8]
 769              	.LVL89:
 770 00b6 02E0     		b	.L66
 771              	.LVL90:
 772              	.L65:
4414:../Dave/Generated/src/FEE001/FEE001.c ****       }
4415:../Dave/Generated/src/FEE001/FEE001.c ****       else
4416:../Dave/Generated/src/FEE001/FEE001.c ****       {
4417:../Dave/Generated/src/FEE001/FEE001.c ****     	   /* Take the address from latest block address */
4418:../Dave/Generated/src/FEE001/FEE001.c ****     	   ActualAddr = StateDataPtr->FeeBlockInfo[UserBlockIndex].Address;
 773              		.loc 1 4418 0
 774 00b8 0699     		ldr	r1, [sp, #24]
 775 00ba CA00     		lsl	r2, r1, #3
 776 00bc 1759     		ldr	r7, [r2, r4]
 777              	.LVL91:
 778              	.L66:
4419:../Dave/Generated/src/FEE001/FEE001.c ****       }
4420:../Dave/Generated/src/FEE001/FEE001.c ****       /* calculate actual address where data is needed to be read */
4421:../Dave/Generated/src/FEE001/FEE001.c ****       if( BlockCount > 0U )
 779              		.loc 1 4421 0
 780 00be 009E     		ldr	r6, [sp]
 781 00c0 002E     		cmp	r6, #0
 782 00c2 07D0     		beq	.L67
 783              	.LVL92:
4422:../Dave/Generated/src/FEE001/FEE001.c ****       {
4423:../Dave/Generated/src/FEE001/FEE001.c ****          ReadLimit = FEE001_BLOCK2_DATA_SIZE;
4424:../Dave/Generated/src/FEE001/FEE001.c ****          ActualAddr = (uint32_t)(ActualAddr +
4425:../Dave/Generated/src/FEE001/FEE001.c ****                             ((uint32_t)BlockCount * FEE001_DFLASH_BLOCK_SIZE) +
 784              		.loc 1 4425 0
 785 00c4 009E     		ldr	r6, [sp]
4424:../Dave/Generated/src/FEE001/FEE001.c ****          ActualAddr = (uint32_t)(ActualAddr +
 786              		.loc 1 4424 0
 787 00c6 A91C     		add	r1, r5, #2
 788              		.loc 1 4425 0
 789 00c8 3301     		lsl	r3, r6, #4
4424:../Dave/Generated/src/FEE001/FEE001.c ****          ActualAddr = (uint32_t)(ActualAddr +
 790              		.loc 1 4424 0
 791 00ca C818     		add	r0, r1, r3
 792 00cc C719     		add	r7, r0, r7
 793              	.LVL93:
 794 00ce 0797     		str	r7, [sp, #28]
 795              	.LVL94:
4423:../Dave/Generated/src/FEE001/FEE001.c ****          ReadLimit = FEE001_BLOCK2_DATA_SIZE;
 796              		.loc 1 4423 0
 797 00d0 0E22     		mov	r2, #14
 798 00d2 03E0     		b	.L68
 799              	.LVL95:
 800              	.L67:
4426:../Dave/Generated/src/FEE001/FEE001.c ****                             (uint32_t)FEE001_BLOCK2_DATA_OFFSET +
4427:../Dave/Generated/src/FEE001/FEE001.c ****                             (uint32_t)TmpBlockOffset);
4428:../Dave/Generated/src/FEE001/FEE001.c ****       }
4429:../Dave/Generated/src/FEE001/FEE001.c ****       else
4430:../Dave/Generated/src/FEE001/FEE001.c ****       {
4431:../Dave/Generated/src/FEE001/FEE001.c ****          ReadLimit = FEE001_BLOCK1_DATA_SIZE;
4432:../Dave/Generated/src/FEE001/FEE001.c ****          ActualAddr = (uint32_t) ( ActualAddr +
 801              		.loc 1 4432 0
 802 00d4 2B1D     		add	r3, r5, #4
 803 00d6 D819     		add	r0, r3, r7
 804 00d8 0790     		str	r0, [sp, #28]
 805              	.LVL96:
4431:../Dave/Generated/src/FEE001/FEE001.c ****          ReadLimit = FEE001_BLOCK1_DATA_SIZE;
 806              		.loc 1 4431 0
 807 00da 0C22     		mov	r2, #12
 808              	.LVL97:
 809              	.L68:
4433:../Dave/Generated/src/FEE001/FEE001.c ****                                  (uint32_t)FEE001_BLOCK1_DATA_OFFSET +
4434:../Dave/Generated/src/FEE001/FEE001.c ****                                  (uint32_t)TmpBlockOffset);
4435:../Dave/Generated/src/FEE001/FEE001.c ****       }
4436:../Dave/Generated/src/FEE001/FEE001.c **** 
4437:../Dave/Generated/src/FEE001/FEE001.c ****       /* if length of data is greater than Block 2 data size */
4438:../Dave/Generated/src/FEE001/FEE001.c ****       if((TmpBlockOffset + Length) > ReadLimit)
 810              		.loc 1 4438 0
 811 00dc 0299     		ldr	r1, [sp, #8]
 812 00de 6E18     		add	r6, r5, r1
 813 00e0 9642     		cmp	r6, r2
 814 00e2 05DD     		ble	.L69
4439:../Dave/Generated/src/FEE001/FEE001.c ****       {
4440:../Dave/Generated/src/FEE001/FEE001.c ****          ReadLength = (uint16_t)ReadLimit - TmpBlockOffset;
4441:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_PENDING;
 815              		.loc 1 4441 0
 816 00e4 2949     		ldr	r1, .L77+8
4440:../Dave/Generated/src/FEE001/FEE001.c ****          ReadLength = (uint16_t)ReadLimit - TmpBlockOffset;
 817              		.loc 1 4440 0
 818 00e6 501B     		sub	r0, r2, r5
 819              		.loc 1 4441 0
 820 00e8 0327     		mov	r7, #3
4440:../Dave/Generated/src/FEE001/FEE001.c ****          ReadLength = (uint16_t)ReadLimit - TmpBlockOffset;
 821              		.loc 1 4440 0
 822 00ea 86B2     		uxth	r6, r0
 823              	.LVL98:
 824              		.loc 1 4441 0
 825 00ec 6754     		strb	r7, [r4, r1]
 826 00ee 03E0     		b	.L70
 827              	.LVL99:
 828              	.L69:
4442:../Dave/Generated/src/FEE001/FEE001.c ****       }
4443:../Dave/Generated/src/FEE001/FEE001.c ****       else
4444:../Dave/Generated/src/FEE001/FEE001.c ****       {
4445:../Dave/Generated/src/FEE001/FEE001.c ****          ReadLength = Length;
4446:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeePendReqStatus = FEE001_READ_LAST_BLOCK_COMPLETED;
 829              		.loc 1 4446 0
 830 00f0 264B     		ldr	r3, .L77+8
 831 00f2 0522     		mov	r2, #5
 832              	.LVL100:
4445:../Dave/Generated/src/FEE001/FEE001.c ****          ReadLength = Length;
 833              		.loc 1 4445 0
 834 00f4 029E     		ldr	r6, [sp, #8]
 835              		.loc 1 4446 0
 836 00f6 E254     		strb	r2, [r4, r3]
 837              	.LVL101:
 838              	.L70:
4447:../Dave/Generated/src/FEE001/FEE001.c ****       }
4448:../Dave/Generated/src/FEE001/FEE001.c **** 
4449:../Dave/Generated/src/FEE001/FEE001.c ****       /* Call Fls_Read to read the data from DFLASH */
4450:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeUserReadDestPtr = DataBufferPtr;
 839              		.loc 1 4450 0
 840 00f8 039A     		ldr	r2, [sp, #12]
 841 00fa 271C     		mov	r7, r4
 842 00fc FC37     		add	r7, r7, #252
 843 00fe BA65     		str	r2, [r7, #88]
4451:../Dave/Generated/src/FEE001/FEE001.c **** 
4452:../Dave/Generated/src/FEE001/FEE001.c ****       /* Clear all error status flags before flash operation*/
4453:../Dave/Generated/src/FEE001/FEE001.c ****       FLASH003_ClearStatus();
 844              		.loc 1 4453 0
 845 0100 FFF7FEFF 		bl	FLASH003_ClearStatus
 846              	.LVL102:
4454:../Dave/Generated/src/FEE001/FEE001.c **** 
4455:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnVal = (uint32_t)FLASH003_ReadBytes((uint32_t)ActualAddr,
 847              		.loc 1 4455 0
 848 0104 0798     		ldr	r0, [sp, #28]
 849 0106 B96D     		ldr	r1, [r7, #88]
 850 0108 321C     		mov	r2, r6
 851 010a FFF7FEFF 		bl	FLASH003_ReadBytes
 852              	.LVL103:
4456:../Dave/Generated/src/FEE001/FEE001.c ****     		       StateDataPtr->FeeUserReadDestPtr,(uint32_t)ReadLength);
4457:../Dave/Generated/src/FEE001/FEE001.c **** 
4458:../Dave/Generated/src/FEE001/FEE001.c ****       if(ReturnVal != 0U)
 853              		.loc 1 4458 0
 854 010e 0028     		cmp	r0, #0
 855 0110 0ED0     		beq	.L71
4459:../Dave/Generated/src/FEE001/FEE001.c ****       {
4460:../Dave/Generated/src/FEE001/FEE001.c ****     	BlockIndex = Fee_lGetUsrBlockIndex(StateDataPtr->FeeCurrReqBlockNum);
4461:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeBlockInfo[UserBlockIndex].Status.Consistent = 0U;
 856              		.loc 1 4461 0
 857 0112 0698     		ldr	r0, [sp, #24]
 858              	.LVL104:
 859 0114 0223     		mov	r3, #2
 860 0116 C700     		lsl	r7, r0, #3
 861 0118 E619     		add	r6, r4, r7
 862              	.LVL105:
 863 011a 3279     		ldrb	r2, [r6, #4]
4462:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeePendReqStatus = FEE001_READ_LAST_BLOCK_COMPLETED;
 864              		.loc 1 4462 0
 865 011c 1B48     		ldr	r0, .L77+8
4461:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeBlockInfo[UserBlockIndex].Status.Consistent = 0U;
 866              		.loc 1 4461 0
 867 011e 9A43     		bic	r2, r3
 868 0120 3271     		strb	r2, [r6, #4]
4463:../Dave/Generated/src/FEE001/FEE001.c ****         StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
4464:../Dave/Generated/src/FEE001/FEE001.c ****         StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
 869              		.loc 1 4464 0
 870 0122 194E     		ldr	r6, .L77+4
4463:../Dave/Generated/src/FEE001/FEE001.c ****         StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
 871              		.loc 1 4463 0
 872 0124 0127     		mov	r7, #1
4462:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeePendReqStatus = FEE001_READ_LAST_BLOCK_COMPLETED;
 873              		.loc 1 4462 0
 874 0126 0521     		mov	r1, #5
 875 0128 2154     		strb	r1, [r4, r0]
4463:../Dave/Generated/src/FEE001/FEE001.c ****         StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
 876              		.loc 1 4463 0
 877 012a A776     		strb	r7, [r4, #26]
 878              		.loc 1 4464 0
 879 012c A755     		strb	r7, [r4, r6]
 880 012e AAE7     		b	.L75
 881              	.LVL106:
 882              	.L71:
4465:../Dave/Generated/src/FEE001/FEE001.c ****       }
4466:../Dave/Generated/src/FEE001/FEE001.c ****       else
4467:../Dave/Generated/src/FEE001/FEE001.c ****       {
4468:../Dave/Generated/src/FEE001/FEE001.c ****     	/* Return value above is ignored */
4469:../Dave/Generated/src/FEE001/FEE001.c ****         StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 883              		.loc 1 4469 0
 884 0130 1021     		mov	r1, #16
 885 0132 6A46     		mov	r2, sp
 886 0134 8A5C     		ldrb	r2, [r1, r2]
 887 0136 AC23     		mov	r3, #172
 888 0138 5B00     		lsl	r3, r3, #1
 889 013a E254     		strb	r2, [r4, r3]
4470:../Dave/Generated/src/FEE001/FEE001.c **** 
4471:../Dave/Generated/src/FEE001/FEE001.c ****         /* If the current request is set to previous pending */
4472:../Dave/Generated/src/FEE001/FEE001.c ****         if(StateDataPtr->FeePendReqStatus == FEE001_READ_REQ_PENDING)
 890              		.loc 1 4472 0
 891 013c 134B     		ldr	r3, .L77+8
 892 013e E15C     		ldrb	r1, [r4, r3]
 893 0140 0329     		cmp	r1, #3
 894 0142 1AD1     		bne	.L73
4473:../Dave/Generated/src/FEE001/FEE001.c ****         {
4474:../Dave/Generated/src/FEE001/FEE001.c ****           StateDataPtr->FeeUserReadDestPtr = StateDataPtr->FeeUserReadDestPtr
4475:../Dave/Generated/src/FEE001/FEE001.c ****                                             + ReadLength;
 895              		.loc 1 4475 0
 896 0144 BD6D     		ldr	r5, [r7, #88]
 897              	.LVL107:
4476:../Dave/Generated/src/FEE001/FEE001.c ****           Length = Length - ReadLength;
4477:../Dave/Generated/src/FEE001/FEE001.c ****           BlockOffset = BlockOffset + ReadLength;
4478:../Dave/Generated/src/FEE001/FEE001.c ****           BlockCount = 0U;
 898              		.loc 1 4478 0
 899 0146 0090     		str	r0, [sp]
4475:../Dave/Generated/src/FEE001/FEE001.c ****                                             + ReadLength;
 900              		.loc 1 4475 0
 901 0148 AA19     		add	r2, r5, r6
4474:../Dave/Generated/src/FEE001/FEE001.c ****           StateDataPtr->FeeUserReadDestPtr = StateDataPtr->FeeUserReadDestPtr
 902              		.loc 1 4474 0
 903 014a BA65     		str	r2, [r7, #88]
4476:../Dave/Generated/src/FEE001/FEE001.c ****           Length = Length - ReadLength;
 904              		.loc 1 4476 0
 905 014c 029F     		ldr	r7, [sp, #8]
4477:../Dave/Generated/src/FEE001/FEE001.c ****           BlockOffset = BlockOffset + ReadLength;
 906              		.loc 1 4477 0
 907 014e 019D     		ldr	r5, [sp, #4]
4476:../Dave/Generated/src/FEE001/FEE001.c ****           Length = Length - ReadLength;
 908              		.loc 1 4476 0
 909 0150 BB1B     		sub	r3, r7, r6
 910 0152 99B2     		uxth	r1, r3
4475:../Dave/Generated/src/FEE001/FEE001.c ****                                             + ReadLength;
 911              		.loc 1 4475 0
 912 0154 0392     		str	r2, [sp, #12]
4479:../Dave/Generated/src/FEE001/FEE001.c ****           TmpBlockOffset = BlockOffset;
4480:../Dave/Generated/src/FEE001/FEE001.c ****           /*Store the read request parameters in the Pending buffer structure*/
4481:../Dave/Generated/src/FEE001/FEE001.c ****           PendReqPtr->BlockNumber = BlockNumber;
 913              		.loc 1 4481 0
 914 0156 1023     		mov	r3, #16
 915 0158 6A46     		mov	r2, sp
4477:../Dave/Generated/src/FEE001/FEE001.c ****           BlockOffset = BlockOffset + ReadLength;
 916              		.loc 1 4477 0
 917 015a 7619     		add	r6, r6, r5
 918              	.LVL108:
4476:../Dave/Generated/src/FEE001/FEE001.c ****           Length = Length - ReadLength;
 919              		.loc 1 4476 0
 920 015c 0291     		str	r1, [sp, #8]
 921              		.loc 1 4481 0
 922 015e 995C     		ldrb	r1, [r3, r2]
4477:../Dave/Generated/src/FEE001/FEE001.c ****           BlockOffset = BlockOffset + ReadLength;
 923              		.loc 1 4477 0
 924 0160 B7B2     		uxth	r7, r6
 925 0162 0197     		str	r7, [sp, #4]
 926              	.LVL109:
 927              		.loc 1 4481 0
 928 0164 2175     		strb	r1, [r4, #20]
4482:../Dave/Generated/src/FEE001/FEE001.c ****           PendReqPtr->BlockOffset = BlockOffset;
 929              		.loc 1 4482 0
 930 0166 6D46     		mov	r5, sp
4483:../Dave/Generated/src/FEE001/FEE001.c ****           PendReqPtr->DataBufferPtr = StateDataPtr->FeeUserReadDestPtr;
4484:../Dave/Generated/src/FEE001/FEE001.c ****           PendReqPtr->Length = Length;
 931              		.loc 1 4484 0
 932 0168 0821     		mov	r1, #8
4482:../Dave/Generated/src/FEE001/FEE001.c ****           PendReqPtr->BlockOffset = BlockOffset;
 933              		.loc 1 4482 0
 934 016a 9688     		ldrh	r6, [r2, #4]
 935              		.loc 1 4484 0
 936 016c 4D5B     		ldrh	r5, [r1, r5]
4483:../Dave/Generated/src/FEE001/FEE001.c ****           PendReqPtr->DataBufferPtr = StateDataPtr->FeeUserReadDestPtr;
 937              		.loc 1 4483 0
 938 016e 039A     		ldr	r2, [sp, #12]
 939              		.loc 1 4484 0
 940 0170 E581     		strh	r5, [r4, #14]
 941              	.LVL110:
4482:../Dave/Generated/src/FEE001/FEE001.c ****           PendReqPtr->BlockOffset = BlockOffset;
 942              		.loc 1 4482 0
 943 0172 A681     		strh	r6, [r4, #12]
4483:../Dave/Generated/src/FEE001/FEE001.c ****           PendReqPtr->DataBufferPtr = StateDataPtr->FeeUserReadDestPtr;
 944              		.loc 1 4483 0
 945 0174 2261     		str	r2, [r4, #16]
4479:../Dave/Generated/src/FEE001/FEE001.c ****           TmpBlockOffset = BlockOffset;
 946              		.loc 1 4479 0
 947 0176 3D1C     		mov	r5, r7
 948 0178 85E7     		b	.L75
 949              	.LVL111:
 950              	.L73:
4485:../Dave/Generated/src/FEE001/FEE001.c ****           DataBufferPtr = StateDataPtr->FeePendReqInfo.DataBufferPtr;
4486:../Dave/Generated/src/FEE001/FEE001.c ****         }
4487:../Dave/Generated/src/FEE001/FEE001.c ****         else
4488:../Dave/Generated/src/FEE001/FEE001.c ****         {
4489:../Dave/Generated/src/FEE001/FEE001.c ****       	  StateDataPtr->FeeJobResult = FEE001_JOB_OK;
 951              		.loc 1 4489 0
 952 017a A076     		strb	r0, [r4, #26]
 953 017c 83E7     		b	.L75
 954              	.LVL112:
 955              	.L57:
4490:../Dave/Generated/src/FEE001/FEE001.c ****         }
4491:../Dave/Generated/src/FEE001/FEE001.c ****       }
4492:../Dave/Generated/src/FEE001/FEE001.c ****     } /* End of while(StateDataPtr->FeePendReqStatus==FEE001_READ_REQ_PENDING)*/
4493:../Dave/Generated/src/FEE001/FEE001.c ****   } /* End of nested if Else */
4494:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lLocalRead */
 956              		.loc 1 4494 0
 957 017e 09B0     		add	sp, sp, #36
 958              		@ sp needed for prologue
 959              	.LVL113:
 960 0180 F0BD     		pop	{r4, r5, r6, r7, pc}
 961              	.L78:
 962 0182 C046     		.align	2
 963              	.L77:
 964 0184 00000000 		.word	FEE001_CfgPtr
 965 0188 63010000 		.word	355
 966 018c 59010000 		.word	345
 967              		.cfi_endproc
 968              	.LFE75:
 970              		.section	.text.Fee_lReadVerifyMarker,"ax",%progbits
 971              		.align	1
 972              		.code	16
 973              		.thumb_func
 975              	Fee_lReadVerifyMarker:
 976              	.LFB66:
3525:../Dave/Generated/src/FEE001/FEE001.c **** {
 977              		.loc 1 3525 0
 978              		.cfi_startproc
 979              	.LVL114:
 980 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 981              	.LCFI8:
 982              		.cfi_def_cfa_offset 24
 983              		.cfi_offset 0, -24
 984              		.cfi_offset 1, -20
 985              		.cfi_offset 2, -16
 986              		.cfi_offset 3, -12
 987              		.cfi_offset 4, -8
 988              		.cfi_offset 14, -4
3534:../Dave/Generated/src/FEE001/FEE001.c ****      if (Bank == 0U)
 989              		.loc 1 3534 0
 990 0002 0028     		cmp	r0, #0
 991 0004 01D1     		bne	.L85
3536:../Dave/Generated/src/FEE001/FEE001.c ****         PhyAddress  = FEE001_DFLASH_BANK0_BASE;
 992              		.loc 1 3536 0
 993 0006 124B     		ldr	r3, .L93
 994 0008 00E0     		b	.L80
 995              	.L85:
3540:../Dave/Generated/src/FEE001/FEE001.c ****         PhyAddress  = FEE001_DFLASH_BANK1_BASE;
 996              		.loc 1 3540 0
 997 000a 124B     		ldr	r3, .L93+4
 998              	.L80:
 999              	.LVL115:
3544:../Dave/Generated/src/FEE001/FEE001.c ****     		           ((uint32_t)FEE001_FLASH_BLOCK_SIZE * (uint32_t)Block);
 1000              		.loc 1 3544 0
 1001 000c 0C01     		lsl	r4, r1, #4
3543:../Dave/Generated/src/FEE001/FEE001.c ****      PhyAddress = PhyAddress +
 1002              		.loc 1 3543 0
 1003 000e 1C19     		add	r4, r3, r4
 1004              	.LVL116:
3547:../Dave/Generated/src/FEE001/FEE001.c ****      FLASH003_ClearStatus();
 1005              		.loc 1 3547 0
 1006 0010 FFF7FEFF 		bl	FLASH003_ClearStatus
 1007              	.LVL117:
3551:../Dave/Generated/src/FEE001/FEE001.c ****      FlashErrorStatus =  FLASH003_ReadBlock(PhyAddress, ArrPtr);
 1008              		.loc 1 3551 0
 1009 0014 201C     		mov	r0, r4
 1010 0016 6946     		mov	r1, sp
 1011 0018 FFF7FEFF 		bl	FLASH003_ReadBlock
 1012              	.LVL118:
 1013 001c 021C     		mov	r2, r0
 1014              	.LVL119:
3557:../Dave/Generated/src/FEE001/FEE001.c ****        ReturnVal = FEE001_MB_DIRTY;
 1015              		.loc 1 3557 0
 1016 001e 0220     		mov	r0, #2
 1017              	.LVL120:
3554:../Dave/Generated/src/FEE001/FEE001.c ****      if(0U != FlashErrorStatus)
 1018              		.loc 1 3554 0
 1019 0020 002A     		cmp	r2, #0
 1020 0022 13D1     		bne	.L81
3562:../Dave/Generated/src/FEE001/FEE001.c ****        if(ArrPtr[3U] == FEE001_ALL_ZEROS)
 1021              		.loc 1 3562 0
 1022 0024 0399     		ldr	r1, [sp, #12]
3564:../Dave/Generated/src/FEE001/FEE001.c ****          ReturnVal = FEE001_MB_0;
 1023              		.loc 1 3564 0
 1024 0026 101C     		mov	r0, r2
3562:../Dave/Generated/src/FEE001/FEE001.c ****        if(ArrPtr[3U] == FEE001_ALL_ZEROS)
 1025              		.loc 1 3562 0
 1026 0028 0029     		cmp	r1, #0
 1027 002a 03D0     		beq	.L82
3568:../Dave/Generated/src/FEE001/FEE001.c ****          ReturnVal = FEE001_MB_1;
 1028              		.loc 1 3568 0
 1029 002c 0131     		add	r1, r1, #1
 1030 002e 481E     		sub	r0, r1, #1
 1031 0030 8141     		sbc	r1, r1, r0
 1032 0032 481C     		add	r0, r1, #1
 1033              	.L82:
 1034              	.LVL121:
3577:../Dave/Generated/src/FEE001/FEE001.c ****            if( ArrPtr[Index] != FEE001_ALL_ONES)
 1035              		.loc 1 3577 0 discriminator 1
 1036 0034 009B     		ldr	r3, [sp]
 1037 0036 0133     		add	r3, r3, #1
 1038 0038 00D0     		beq	.L83
3579:../Dave/Generated/src/FEE001/FEE001.c ****             ReturnVal = FEE001_MB_DIRTY;
 1039              		.loc 1 3579 0
 1040 003a 0220     		mov	r0, #2
 1041              	.LVL122:
 1042              	.L83:
3577:../Dave/Generated/src/FEE001/FEE001.c ****            if( ArrPtr[Index] != FEE001_ALL_ONES)
 1043              		.loc 1 3577 0
 1044 003c 019C     		ldr	r4, [sp, #4]
 1045              	.LVL123:
 1046 003e 631C     		add	r3, r4, #1
 1047 0040 00D0     		beq	.L84
3579:../Dave/Generated/src/FEE001/FEE001.c ****             ReturnVal = FEE001_MB_DIRTY;
 1048              		.loc 1 3579 0
 1049 0042 0220     		mov	r0, #2
 1050              	.LVL124:
 1051              	.L84:
3577:../Dave/Generated/src/FEE001/FEE001.c ****            if( ArrPtr[Index] != FEE001_ALL_ONES)
 1052              		.loc 1 3577 0
 1053 0044 029A     		ldr	r2, [sp, #8]
 1054              	.LVL125:
 1055 0046 531C     		add	r3, r2, #1
 1056 0048 00D0     		beq	.L81
3579:../Dave/Generated/src/FEE001/FEE001.c ****             ReturnVal = FEE001_MB_DIRTY;
 1057              		.loc 1 3579 0
 1058 004a 0220     		mov	r0, #2
 1059              	.LVL126:
 1060              	.L81:
3584:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lReadVerifyMarker */
 1061              		.loc 1 3584 0
 1062 004c 04B0     		add	sp, sp, #16
 1063              		@ sp needed for prologue
 1064 004e 10BD     		pop	{r4, pc}
 1065              	.L94:
 1066              		.align	2
 1067              	.L93:
 1068 0050 00800010 		.word	268468224
 1069 0054 00880010 		.word	268470272
 1070              		.cfi_endproc
 1071              	.LFE66:
 1073              		.section	.text.Fee_lEraseBank,"ax",%progbits
 1074              		.align	1
 1075              		.code	16
 1076              		.thumb_func
 1078              	Fee_lEraseBank:
 1079              	.LFB69:
3734:../Dave/Generated/src/FEE001/FEE001.c **** {
 1080              		.loc 1 3734 0
 1081              		.cfi_startproc
 1082              	.LVL127:
 1083 0000 38B5     		push	{r3, r4, r5, lr}
 1084              	.LCFI9:
 1085              		.cfi_def_cfa_offset 16
 1086              		.cfi_offset 3, -16
 1087              		.cfi_offset 4, -12
 1088              		.cfi_offset 5, -8
 1089              		.cfi_offset 14, -4
3733:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type Fee_lEraseBank(uint32_t PageAddress)
 1090              		.loc 1 3733 0
 1091 0002 0A4B     		ldr	r3, .L106
3742:../Dave/Generated/src/FEE001/FEE001.c ****   PageAddress +=1U;
 1092              		.loc 1 3742 0
 1093 0004 041C     		mov	r4, r0
 1094 0006 FF3C     		sub	r4, r4, #255
 1095              	.LVL128:
3733:../Dave/Generated/src/FEE001/FEE001.c **** static FEE001Status_Type Fee_lEraseBank(uint32_t PageAddress)
 1096              		.loc 1 3733 0
 1097 0008 C518     		add	r5, r0, r3
 1098              	.LVL129:
 1099              	.L98:
3747:../Dave/Generated/src/FEE001/FEE001.c ****     FLASH003_ClearStatus();
 1100              		.loc 1 3747 0
 1101 000a FFF7FEFF 		bl	FLASH003_ClearStatus
 1102              	.LVL130:
3749:../Dave/Generated/src/FEE001/FEE001.c **** 	  status = FLASH003_ErasePage((uint32_t)PageAddress);
 1103              		.loc 1 3749 0
 1104 000e 201C     		mov	r0, r4
 1105 0010 FFF7FEFF 		bl	FLASH003_ErasePage
 1106              	.LVL131:
3754:../Dave/Generated/src/FEE001/FEE001.c ****     PageAddress = PageAddress - (FEE001_FLASH_PAGE_SIZE );
 1107              		.loc 1 3754 0
 1108 0014 013C     		sub	r4, r4, #1
 1109              	.LVL132:
3750:../Dave/Generated/src/FEE001/FEE001.c ****     if(status != 0U )
 1110              		.loc 1 3750 0
 1111 0016 431E     		sub	r3, r0, #1
 1112 0018 9841     		sbc	r0, r0, r3
 1113              	.LVL133:
 1114 001a 4042     		neg	r0, r0
 1115 001c 0521     		mov	r1, #5
3754:../Dave/Generated/src/FEE001/FEE001.c ****     PageAddress = PageAddress - (FEE001_FLASH_PAGE_SIZE );
 1116              		.loc 1 3754 0
 1117 001e FF3C     		sub	r4, r4, #255
 1118              	.LVL134:
3750:../Dave/Generated/src/FEE001/FEE001.c ****     if(status != 0U )
 1119              		.loc 1 3750 0
 1120 0020 0840     		and	r0, r1
 1121              	.LVL135:
3744:../Dave/Generated/src/FEE001/FEE001.c ****   while((Index <FEE001_BANK_PAGES)&&(ReturnVal == FEE001_COMPLETE))
 1122              		.loc 1 3744 0
 1123 0022 AC42     		cmp	r4, r5
 1124 0024 01D0     		beq	.L105
3744:../Dave/Generated/src/FEE001/FEE001.c ****   while((Index <FEE001_BANK_PAGES)&&(ReturnVal == FEE001_COMPLETE))
 1125              		.loc 1 3744 0 is_stmt 0 discriminator 2
 1126 0026 0028     		cmp	r0, #0
 1127 0028 EFD0     		beq	.L98
 1128              	.L105:
3759:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lEraseBank */
 1129              		.loc 1 3759 0 is_stmt 1
 1130              		@ sp needed for prologue
 1131              	.LVL136:
 1132 002a 38BD     		pop	{r3, r4, r5, pc}
 1133              	.L107:
 1134              		.align	2
 1135              	.L106:
 1136 002c 01F7FFFF 		.word	-2303
 1137              		.cfi_endproc
 1138              	.LFE69:
 1140              		.section	.text.Fee_lGCWrite,"ax",%progbits
 1141              		.align	1
 1142              		.code	16
 1143              		.thumb_func
 1145              	Fee_lGCWrite:
 1146              	.LFB70:
3778:../Dave/Generated/src/FEE001/FEE001.c **** {
 1147              		.loc 1 3778 0
 1148              		.cfi_startproc
 1149              	.LVL137:
 1150 0000 38B5     		push	{r3, r4, r5, lr}
 1151              	.LCFI10:
 1152              		.cfi_def_cfa_offset 16
 1153              		.cfi_offset 3, -16
 1154              		.cfi_offset 4, -12
 1155              		.cfi_offset 5, -8
 1156              		.cfi_offset 14, -4
3783:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1157              		.loc 1 3783 0
 1158 0002 0B4B     		ldr	r3, .L111
3778:../Dave/Generated/src/FEE001/FEE001.c **** {
 1159              		.loc 1 3778 0
 1160 0004 051C     		mov	r5, r0
3783:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1161              		.loc 1 3783 0
 1162 0006 1868     		ldr	r0, [r3]
 1163              	.LVL138:
 1164 0008 0468     		ldr	r4, [r0]
 1165              	.LVL139:
3787:../Dave/Generated/src/FEE001/FEE001.c ****   FLASH003_ClearStatus();
 1166              		.loc 1 3787 0
 1167 000a FFF7FEFF 		bl	FLASH003_ClearStatus
 1168              	.LVL140:
3791:../Dave/Generated/src/FEE001/FEE001.c ****       (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer);
 1169              		.loc 1 3791 0
 1170 000e 211C     		mov	r1, r4
 1171 0010 3C31     		add	r1, r1, #60
3790:../Dave/Generated/src/FEE001/FEE001.c ****   status = (status_t)FLASH003_WriteBlock(BlockAddress,
 1172              		.loc 1 3790 0
 1173 0012 281C     		mov	r0, r5
 1174 0014 FFF7FEFF 		bl	FLASH003_WriteBlock
 1175              	.LVL141:
3794:../Dave/Generated/src/FEE001/FEE001.c ****   if(status != 0U)
 1176              		.loc 1 3794 0
 1177 0018 0028     		cmp	r0, #0
 1178 001a 08D0     		beq	.L109
3797:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeIntrJobResult = FEE001_JOB_FAIL;
 1179              		.loc 1 3797 0
 1180 001c 0120     		mov	r0, #1
 1181              	.LVL142:
3796:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 1182              		.loc 1 3796 0
 1183 001e AD21     		mov	r1, #173
3797:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeIntrJobResult = FEE001_JOB_FAIL;
 1184              		.loc 1 3797 0
 1185 0020 B123     		mov	r3, #177
 1186 0022 8340     		lsl	r3, r3, r0
3796:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 1187              		.loc 1 3796 0
 1188 0024 0922     		mov	r2, #9
 1189 0026 4D00     		lsl	r5, r1, #1
 1190              	.LVL143:
3797:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeIntrJobResult = FEE001_JOB_FAIL;
 1191              		.loc 1 3797 0
 1192 0028 E054     		strb	r0, [r4, r3]
3796:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 1193              		.loc 1 3796 0
 1194 002a 6255     		strb	r2, [r4, r5]
3784:../Dave/Generated/src/FEE001/FEE001.c ****   ReturnVal = FEE001_ERROR;
 1195              		.loc 1 3784 0
 1196 002c 0520     		mov	r0, #5
 1197              	.L109:
 1198              	.LVL144:
3804:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lGCWrite */
 1199              		.loc 1 3804 0
 1200              		@ sp needed for prologue
 1201              	.LVL145:
 1202 002e 38BD     		pop	{r3, r4, r5, pc}
 1203              	.L112:
 1204              		.align	2
 1205              	.L111:
 1206 0030 00000000 		.word	FEE001_CfgPtr
 1207              		.cfi_endproc
 1208              	.LFE70:
 1210              		.section	.text.Fee_lPrepareDFlash,"ax",%progbits
 1211              		.align	1
 1212              		.code	16
 1213              		.thumb_func
 1215              	Fee_lPrepareDFlash:
 1216              	.LFB56:
2660:../Dave/Generated/src/FEE001/FEE001.c **** {
 1217              		.loc 1 2660 0
 1218              		.cfi_startproc
 1219 0000 38B5     		push	{r3, r4, r5, lr}
 1220              	.LCFI11:
 1221              		.cfi_def_cfa_offset 16
 1222              		.cfi_offset 3, -16
 1223              		.cfi_offset 4, -12
 1224              		.cfi_offset 5, -8
 1225              		.cfi_offset 14, -4
2663:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1226              		.loc 1 2663 0
 1227 0002 2A4B     		ldr	r3, .L135
 1228 0004 1868     		ldr	r0, [r3]
 1229 0006 0468     		ldr	r4, [r0]
 1230              	.LVL146:
 1231              	.L128:
2667:../Dave/Generated/src/FEE001/FEE001.c ****      switch(StateDataPtr->FeeGcState)
 1232              		.loc 1 2667 0
 1233 0008 AD25     		mov	r5, #173
 1234 000a 6D00     		lsl	r5, r5, #1
 1235 000c 605D     		ldrb	r0, [r4, r5]
 1236 000e 0138     		sub	r0, r0, #1
 1237 0010 0428     		cmp	r0, #4
 1238 0012 42D8     		bhi	.L114
 1239 0014 FFF7FEFF 		bl	__gnu_thumb1_case_uqi
 1240              	.L120:
 1241 0018 03       		.byte	(.L115-.L120)/2
 1242 0019 13       		.byte	(.L116-.L120)/2
 1243 001a 1C       		.byte	(.L117-.L120)/2
 1244 001b 26       		.byte	(.L118-.L120)/2
 1245 001c 30       		.byte	(.L119-.L120)/2
 1246 001d 00       		.align	1
 1247              	.L115:
2673:../Dave/Generated/src/FEE001/FEE001.c ****         	    Status = Fee_lEraseBank(StateDataPtr->FeeCurrBankEndAddr);
 1248              		.loc 1 2673 0
 1249 001e 606A     		ldr	r0, [r4, #36]
 1250 0020 FFF7FEFF 		bl	Fee_lEraseBank
 1251              	.LVL147:
2676:../Dave/Generated/src/FEE001/FEE001.c ****               if(Status == FEE001_COMPLETE)
 1252              		.loc 1 2676 0
 1253 0024 0028     		cmp	r0, #0
 1254 0026 36D1     		bne	.L126
2678:../Dave/Generated/src/FEE001/FEE001.c ****                 Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
 1255              		.loc 1 2678 0
 1256 0028 A06A     		ldr	r0, [r4, #40]
 1257              	.LVL148:
 1258 002a FFF7FEFF 		bl	Fee_lEraseBank
 1259              	.LVL149:
 1260 002e AD21     		mov	r1, #173
 1261 0030 4B00     		lsl	r3, r1, #1
2681:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_7F;
 1262              		.loc 1 2681 0
 1263 0032 0222     		mov	r2, #2
2679:../Dave/Generated/src/FEE001/FEE001.c ****                 if (Status == FEE001_COMPLETE)
 1264              		.loc 1 2679 0
 1265 0034 0028     		cmp	r0, #0
 1266 0036 00D0     		beq	.L134
2685:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 1267              		.loc 1 2685 0
 1268 0038 0922     		mov	r2, #9
 1269              	.L134:
 1270 003a E254     		strb	r2, [r4, r3]
 1271 003c 2DE0     		b	.L114
 1272              	.LVL150:
 1273              	.L116:
2696:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
 1274              		.loc 1 2696 0
 1275 003e FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 1276              	.LVL151:
2699:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
 1277              		.loc 1 2699 0
 1278 0042 206A     		ldr	r0, [r4, #32]
 1279 0044 FFF7FEFF 		bl	Fee_lGCWrite
 1280              	.LVL152:
2704:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_3F;
 1281              		.loc 1 2704 0
 1282 0048 0321     		mov	r1, #3
2702:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
 1283              		.loc 1 2702 0
 1284 004a 0028     		cmp	r0, #0
 1285 004c 24D0     		beq	.L133
 1286 004e 22E0     		b	.L126
 1287              	.LVL153:
 1288              	.L117:
2714:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
 1289              		.loc 1 2714 0
 1290 0050 FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 1291              	.LVL154:
2717:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
 1292              		.loc 1 2717 0
 1293 0054 206A     		ldr	r0, [r4, #32]
 1294 0056 1030     		add	r0, r0, #16
 1295 0058 FFF7FEFF 		bl	Fee_lGCWrite
 1296              	.LVL155:
2721:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_2F;
 1297              		.loc 1 2721 0
 1298 005c 0421     		mov	r1, #4
2719:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
 1299              		.loc 1 2719 0
 1300 005e 0028     		cmp	r0, #0
 1301 0060 1AD0     		beq	.L133
 1302 0062 18E0     		b	.L126
 1303              	.LVL156:
 1304              	.L118:
2731:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
 1305              		.loc 1 2731 0
 1306 0064 FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 1307              	.LVL157:
2734:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
 1308              		.loc 1 2734 0
 1309 0068 206A     		ldr	r0, [r4, #32]
 1310 006a 3030     		add	r0, r0, #48
 1311 006c FFF7FEFF 		bl	Fee_lGCWrite
 1312              	.LVL158:
2739:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_2E;
 1313              		.loc 1 2739 0
 1314 0070 0521     		mov	r1, #5
2737:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
 1315              		.loc 1 2737 0
 1316 0072 0028     		cmp	r0, #0
 1317 0074 10D0     		beq	.L133
 1318 0076 0EE0     		b	.L126
 1319              	.LVL159:
 1320              	.L119:
2749:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
 1321              		.loc 1 2749 0
 1322 0078 FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 1323              	.LVL160:
2752:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcDestAddr +
 1324              		.loc 1 2752 0
 1325 007c E069     		ldr	r0, [r4, #28]
 1326 007e 3030     		add	r0, r0, #48
 1327 0080 FFF7FEFF 		bl	Fee_lGCWrite
 1328              	.LVL161:
2755:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
 1329              		.loc 1 2755 0
 1330 0084 0028     		cmp	r0, #0
 1331 0086 06D1     		bne	.L126
2757:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_IDLE;
 1332              		.loc 1 2757 0
 1333 0088 6055     		strb	r0, [r4, r5]
2759:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeUserJobResult = FEE001_JOB_PASS;
 1334              		.loc 1 2759 0
 1335 008a 094A     		ldr	r2, .L135+4
2758:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeIntrJobResult = FEE001_JOB_PASS;
 1336              		.loc 1 2758 0
 1337 008c B125     		mov	r5, #177
 1338 008e 6B00     		lsl	r3, r5, #1
 1339 0090 E054     		strb	r0, [r4, r3]
2759:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeUserJobResult = FEE001_JOB_PASS;
 1340              		.loc 1 2759 0
 1341 0092 A054     		strb	r0, [r4, r2]
 1342 0094 01E0     		b	.L114
 1343              	.LVL162:
 1344              	.L126:
2763:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 1345              		.loc 1 2763 0
 1346 0096 0921     		mov	r1, #9
 1347              	.L133:
 1348 0098 6155     		strb	r1, [r4, r5]
 1349              	.L114:
2772:../Dave/Generated/src/FEE001/FEE001.c ****   }while((StateDataPtr->FeeGcState != FEE001_GC_IDLE) &&
 1350              		.loc 1 2772 0
 1351 009a AD20     		mov	r0, #173
 1352 009c 4100     		lsl	r1, r0, #1
 1353 009e 655C     		ldrb	r5, [r4, r1]
2773:../Dave/Generated/src/FEE001/FEE001.c ****       (StateDataPtr->FeeGcState != FEE001_GC_FAIL));
 1354              		.loc 1 2773 0
 1355 00a0 002D     		cmp	r5, #0
 1356 00a2 01D0     		beq	.L113
2772:../Dave/Generated/src/FEE001/FEE001.c ****   }while((StateDataPtr->FeeGcState != FEE001_GC_IDLE) &&
 1357              		.loc 1 2772 0 discriminator 1
 1358 00a4 092D     		cmp	r5, #9
 1359 00a6 AFD1     		bne	.L128
 1360              	.L113:
2774:../Dave/Generated/src/FEE001/FEE001.c **** }
 1361              		.loc 1 2774 0
 1362              		@ sp needed for prologue
 1363              	.LVL163:
 1364 00a8 38BD     		pop	{r3, r4, r5, pc}
 1365              	.L136:
 1366 00aa C046     		.align	2
 1367              	.L135:
 1368 00ac 00000000 		.word	FEE001_CfgPtr
 1369 00b0 63010000 		.word	355
 1370              		.cfi_endproc
 1371              	.LFE56:
 1373              		.section	.text.Fee_lGetDFLASHPhysicalBlocks,"ax",%progbits
 1374              		.align	1
 1375              		.code	16
 1376              		.thumb_func
 1378              	Fee_lGetDFLASHPhysicalBlocks:
 1379              	.LFB62:
3319:../Dave/Generated/src/FEE001/FEE001.c **** {
 1380              		.loc 1 3319 0
 1381              		.cfi_startproc
 1382              	.LVL164:
3321:../Dave/Generated/src/FEE001/FEE001.c ****    PhysicalBlocks = 1U;
 1383              		.loc 1 3321 0
 1384 0000 0123     		mov	r3, #1
3323:../Dave/Generated/src/FEE001/FEE001.c ****    if( Size > FEE001_BLOCK1_DATA_SIZE )
 1385              		.loc 1 3323 0
 1386 0002 0C28     		cmp	r0, #12
 1387 0004 08D9     		bls	.L138
 1388              	.LVL165:
 1389              	.LBB4:
 1390              	.LBB5:
3325:../Dave/Generated/src/FEE001/FEE001.c ****       Size = Size - FEE001_BLOCK1_DATA_SIZE;
 1391              		.loc 1 3325 0
 1392 0006 0C38     		sub	r0, r0, #12
 1393              	.LVL166:
 1394 0008 80B2     		uxth	r0, r0
 1395              	.LVL167:
3326:../Dave/Generated/src/FEE001/FEE001.c ****       PhysicalBlocks++;
 1396              		.loc 1 3326 0
 1397 000a 0223     		mov	r3, #2
 1398              	.LVL168:
 1399              	.L139:
3328:../Dave/Generated/src/FEE001/FEE001.c ****       while(Size > FEE001_BLOCK2_DATA_SIZE)
 1400              		.loc 1 3328 0
 1401 000c 0E28     		cmp	r0, #14
 1402 000e 03D9     		bls	.L138
 1403              	.L140:
3331:../Dave/Generated/src/FEE001/FEE001.c ****          Size = Size - FEE001_BLOCK2_DATA_SIZE;
 1404              		.loc 1 3331 0
 1405 0010 0E38     		sub	r0, r0, #14
 1406              	.LVL169:
3330:../Dave/Generated/src/FEE001/FEE001.c ****        PhysicalBlocks++;
 1407              		.loc 1 3330 0
 1408 0012 0133     		add	r3, r3, #1
 1409              	.LVL170:
3331:../Dave/Generated/src/FEE001/FEE001.c ****          Size = Size - FEE001_BLOCK2_DATA_SIZE;
 1410              		.loc 1 3331 0
 1411 0014 80B2     		uxth	r0, r0
 1412              	.LVL171:
 1413 0016 F9E7     		b	.L139
 1414              	.LVL172:
 1415              	.L138:
 1416              	.LBE5:
 1417              	.LBE4:
3335:../Dave/Generated/src/FEE001/FEE001.c **** }/*End of Fee_lGetDFLASHBlocks */
 1418              		.loc 1 3335 0
 1419 0018 181C     		mov	r0, r3
 1420              		@ sp needed for prologue
 1421 001a 7047     		bx	lr
 1422              		.cfi_endproc
 1423              	.LFE62:
 1425              		.section	.text.Fee_lUpdateCache,"ax",%progbits
 1426              		.align	1
 1427              		.code	16
 1428              		.thumb_func
 1430              	Fee_lUpdateCache:
 1431              	.LFB57:
2794:../Dave/Generated/src/FEE001/FEE001.c **** {
 1432              		.loc 1 2794 0
 1433              		.cfi_startproc
2804:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1434              		.loc 1 2804 0
 1435 0000 7D4B     		ldr	r3, .L193
2794:../Dave/Generated/src/FEE001/FEE001.c **** {
 1436              		.loc 1 2794 0
 1437 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 1438              	.LCFI12:
 1439              		.cfi_def_cfa_offset 20
 1440              		.cfi_offset 4, -20
 1441              		.cfi_offset 5, -16
 1442              		.cfi_offset 6, -12
 1443              		.cfi_offset 7, -8
 1444              		.cfi_offset 14, -4
2804:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1445              		.loc 1 2804 0
 1446 0004 1A68     		ldr	r2, [r3]
2794:../Dave/Generated/src/FEE001/FEE001.c **** {
 1447              		.loc 1 2794 0
 1448 0006 85B0     		sub	sp, sp, #20
 1449              	.LCFI13:
 1450              		.cfi_def_cfa_offset 40
2804:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1451              		.loc 1 2804 0
 1452 0008 1468     		ldr	r4, [r2]
 1453              	.LVL173:
 1454 000a 1F1C     		mov	r7, r3
2810:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeCurrBank == 0U)
 1455              		.loc 1 2810 0
 1456 000c 207E     		ldrb	r0, [r4, #24]
 1457 000e C107     		lsl	r1, r0, #31
 1458 0010 02D4     		bmi	.L170
2812:../Dave/Generated/src/FEE001/FEE001.c ****      EndAddr = FEE001_DFLASH_BANK0_BASE + FEE001_FIRST_DATA_BLOCK_OFFSET;
 1459              		.loc 1 2812 0
 1460 0012 7A4D     		ldr	r5, .L193+4
 1461 0014 0195     		str	r5, [sp, #4]
 1462 0016 01E0     		b	.L143
 1463              	.L170:
2816:../Dave/Generated/src/FEE001/FEE001.c ****      EndAddr = FEE001_DFLASH_BANK1_BASE + FEE001_FIRST_DATA_BLOCK_OFFSET;
 1464              		.loc 1 2816 0
 1465 0018 7949     		ldr	r1, .L193+8
 1466 001a 0191     		str	r1, [sp, #4]
 1467              	.L143:
 1468              	.LVL174:
2823:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCacheState = FEE001_CACHE_EMPTY_BLOCK_EVAL;
 1469              		.loc 1 2823 0
 1470 001c 0122     		mov	r2, #1
2826:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCurrBankSrcAddr += ( FEE001_DFLASH_BANK_SIZE -
 1471              		.loc 1 2826 0
 1472 001e 206B     		ldr	r0, [r4, #48]
 1473 0020 FE21     		mov	r1, #254
2823:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCacheState = FEE001_CACHE_EMPTY_BLOCK_EVAL;
 1474              		.loc 1 2823 0
 1475 0022 AF23     		mov	r3, #175
2820:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 1476              		.loc 1 2820 0
 1477 0024 0026     		mov	r6, #0
2823:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCacheState = FEE001_CACHE_EMPTY_BLOCK_EVAL;
 1478              		.loc 1 2823 0
 1479 0026 9340     		lsl	r3, r3, r2
2826:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCurrBankSrcAddr += ( FEE001_DFLASH_BANK_SIZE -
 1480              		.loc 1 2826 0
 1481 0028 CD00     		lsl	r5, r1, #3
2820:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 1482              		.loc 1 2820 0
 1483 002a A663     		str	r6, [r4, #56]
2823:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCacheState = FEE001_CACHE_EMPTY_BLOCK_EVAL;
 1484              		.loc 1 2823 0
 1485 002c E254     		strb	r2, [r4, r3]
2826:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCurrBankSrcAddr += ( FEE001_DFLASH_BANK_SIZE -
 1486              		.loc 1 2826 0
 1487 002e 4619     		add	r6, r0, r5
2830:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1488              		.loc 1 2830 0
 1489 0030 744A     		ldr	r2, .L193+12
2826:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCurrBankSrcAddr += ( FEE001_DFLASH_BANK_SIZE -
 1490              		.loc 1 2826 0
 1491 0032 2663     		str	r6, [r4, #48]
2830:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1492              		.loc 1 2830 0
 1493 0034 FF21     		mov	r1, #255
 1494              	.L190:
2936:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCacheState = FEE001_CACHE_UPDATE_COMPLETE;
 1495              		.loc 1 2936 0
 1496 0036 A154     		strb	r1, [r4, r2]
 1497              	.L185:
2835:../Dave/Generated/src/FEE001/FEE001.c ****    while(StateDataPtr->FeeCacheState != FEE001_CACHE_UPDATE_COMPLETE)
 1498              		.loc 1 2835 0 discriminator 1
 1499 0038 AF22     		mov	r2, #175
 1500 003a 5300     		lsl	r3, r2, #1
 1501 003c E05C     		ldrb	r0, [r4, r3]
 1502 003e 0428     		cmp	r0, #4
 1503 0040 00D1     		bne	.LCB1450
 1504 0042 D7E0     		b	.L192	@long jump
 1505              	.LCB1450:
 1506              	.L169:
2839:../Dave/Generated/src/FEE001/FEE001.c ****      switch(StateDataPtr->FeeCacheState)
 1507              		.loc 1 2839 0
 1508 0044 0128     		cmp	r0, #1
 1509 0046 43D1     		bne	.L186
 1510              	.L179:
 1511              	.LBB12:
 1512              	.LBB13:
3017:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1513              		.loc 1 3017 0 discriminator 1
 1514 0048 3D68     		ldr	r5, [r7]
 1515 004a 2D68     		ldr	r5, [r5]
 1516              	.LVL175:
3020:../Dave/Generated/src/FEE001/FEE001.c ****    FLASH003_ClearStatus();
 1517              		.loc 1 3020 0 discriminator 1
 1518 004c FFF7FEFF 		bl	FLASH003_ClearStatus
 1519              	.LVL176:
3025:../Dave/Generated/src/FEE001/FEE001.c ****                           (uint32_t *)(void*)StateDataPtr->FeeReadWriteBuffer);
 1520              		.loc 1 3025 0 discriminator 1
 1521 0050 2E1C     		mov	r6, r5
 1522 0052 3C36     		add	r6, r6, #60
3023:../Dave/Generated/src/FEE001/FEE001.c ****    RetVal = (status_t)FLASH003_ReadWord(
 1523              		.loc 1 3023 0 discriminator 1
 1524 0054 286B     		ldr	r0, [r5, #48]
 1525 0056 311C     		mov	r1, r6
 1526 0058 FFF7FEFF 		bl	FLASH003_ReadWord
 1527              	.LVL177:
 1528 005c AF23     		mov	r3, #175
 1529 005e 5B00     		lsl	r3, r3, #1
3028:../Dave/Generated/src/FEE001/FEE001.c ****    if(RetVal != 0U)
 1530              		.loc 1 3028 0 discriminator 1
 1531 0060 0028     		cmp	r0, #0
 1532 0062 0AD0     		beq	.L147
3033:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeNextFreeBlockAddr == 0U)
 1533              		.loc 1 3033 0
 1534 0064 E96A     		ldr	r1, [r5, #44]
 1535 0066 2A6B     		ldr	r2, [r5, #48]
 1536 0068 0029     		cmp	r1, #0
 1537 006a 02D1     		bne	.L148
3036:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeNextFreeBlockAddr =StateDataPtr->FeeCurrBankSrcAddr +
 1538              		.loc 1 3036 0
 1539 006c 161C     		mov	r6, r2
 1540 006e 1036     		add	r6, r6, #16
 1541 0070 EE62     		str	r6, [r5, #44]
 1542              	.L148:
3042:../Dave/Generated/src/FEE001/FEE001.c ****       if( StateDataPtr->FeeCurrBankSrcAddr == EndAddr )
 1543              		.loc 1 3042 0
 1544 0072 0198     		ldr	r0, [sp, #4]
 1545              	.LVL178:
 1546 0074 8242     		cmp	r2, r0
 1547 0076 23D1     		bne	.L153
 1548 0078 1FE0     		b	.L154
 1549              	.LVL179:
 1550              	.L147:
3064:../Dave/Generated/src/FEE001/FEE001.c ****       if( BlockNumber != 0xFFU )
 1551              		.loc 1 3064 0
 1552 007a 3078     		ldrb	r0, [r6]
 1553              	.LVL180:
 1554 007c FF28     		cmp	r0, #255
 1555 007e 14D0     		beq	.L151
3067:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeCacheState = FEE001_CACHE_NEXT_FREE_BLK_UPDATED;
 1556              		.loc 1 3067 0
 1557 0080 0220     		mov	r0, #2
 1558 0082 E854     		strb	r0, [r5, r3]
3070:../Dave/Generated/src/FEE001/FEE001.c ****          if(StateDataPtr->FeeNextFreeBlockAddr == 0U)
 1559              		.loc 1 3070 0
 1560 0084 EB6A     		ldr	r3, [r5, #44]
 1561 0086 002B     		cmp	r3, #0
 1562 0088 02D1     		bne	.L152
3074:../Dave/Generated/src/FEE001/FEE001.c ****                StateDataPtr->FeeCurrBankSrcAddr + FEE001_DFLASH_BLOCK_SIZE;
 1563              		.loc 1 3074 0
 1564 008a 2A6B     		ldr	r2, [r5, #48]
 1565 008c 1032     		add	r2, r2, #16
3073:../Dave/Generated/src/FEE001/FEE001.c ****            StateDataPtr->FeeNextFreeBlockAddr =
 1566              		.loc 1 3073 0
 1567 008e EA62     		str	r2, [r5, #44]
 1568              	.L152:
3078:../Dave/Generated/src/FEE001/FEE001.c ****          FLASH003_ClearStatus();
 1569              		.loc 1 3078 0
 1570 0090 FFF7FEFF 		bl	FLASH003_ClearStatus
 1571              	.LVL181:
3083:../Dave/Generated/src/FEE001/FEE001.c ****         		          ((uint32_t)StateDataPtr->FeeCurrBankSrcAddr,
 1572              		.loc 1 3083 0
 1573 0094 311C     		mov	r1, r6
 1574 0096 286B     		ldr	r0, [r5, #48]
 1575 0098 FFF7FEFF 		bl	FLASH003_ReadBlock
 1576              	.LVL182:
3081:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeIntrJobResult =
 1577              		.loc 1 3081 0
 1578 009c B121     		mov	r1, #177
 1579 009e 4E00     		lsl	r6, r1, #1
 1580 00a0 A855     		strb	r0, [r5, r6]
3088:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeWrittenDFlashBlocksCnt + 1U;
 1581              		.loc 1 3088 0
 1582 00a2 A86B     		ldr	r0, [r5, #56]
 1583 00a4 0130     		add	r0, r0, #1
3087:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeWrittenDFlashBlocksCnt = 
 1584              		.loc 1 3087 0
 1585 00a6 A863     		str	r0, [r5, #56]
 1586 00a8 0CE0     		b	.L150
 1587              	.LVL183:
 1588              	.L151:
3094:../Dave/Generated/src/FEE001/FEE001.c ****          if( StateDataPtr->FeeCurrBankSrcAddr == EndAddr )
 1589              		.loc 1 3094 0
 1590 00aa 2A6B     		ldr	r2, [r5, #48]
 1591 00ac 0199     		ldr	r1, [sp, #4]
 1592 00ae 8A42     		cmp	r2, r1
 1593 00b0 06D1     		bne	.L153
3097:../Dave/Generated/src/FEE001/FEE001.c ****             if(StateDataPtr->FeeNextFreeBlockAddr == 0U)
 1594              		.loc 1 3097 0
 1595 00b2 EE6A     		ldr	r6, [r5, #44]
 1596 00b4 002E     		cmp	r6, #0
 1597 00b6 00D1     		bne	.L154
3100:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeNextFreeBlockAddr = EndAddr;
 1598              		.loc 1 3100 0
 1599 00b8 E962     		str	r1, [r5, #44]
 1600              	.LVL184:
 1601              	.L154:
3103:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCacheState = FEE001_CACHE_UPDATE_COMPLETE;
 1602              		.loc 1 3103 0
 1603 00ba 0422     		mov	r2, #4
 1604 00bc EA54     		strb	r2, [r5, r3]
 1605 00be 01E0     		b	.L150
 1606              	.L153:
3108:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCurrBankSrcAddr -= FEE001_DFLASH_BLOCK_SIZE;
 1607              		.loc 1 3108 0
 1608 00c0 103A     		sub	r2, r2, #16
 1609 00c2 2A63     		str	r2, [r5, #48]
 1610              	.L150:
 1611              	.LBE13:
 1612              	.LBE12:
2849:../Dave/Generated/src/FEE001/FEE001.c ****        }while(StateDataPtr->FeeCacheState == FEE001_CACHE_EMPTY_BLOCK_EVAL);
 1613              		.loc 1 2849 0 discriminator 1
 1614 00c4 AF25     		mov	r5, #175
 1615              	.LVL185:
 1616 00c6 6B00     		lsl	r3, r5, #1
 1617 00c8 E15C     		ldrb	r1, [r4, r3]
 1618 00ca 0129     		cmp	r1, #1
 1619 00cc BCD0     		beq	.L179
 1620 00ce B3E7     		b	.L185
 1621              	.L186:
 1622              	.LVL186:
2864:../Dave/Generated/src/FEE001/FEE001.c ****        if(StateDataPtr->FeeIntrJobResult == FEE001_JOB_PASS)
 1623              		.loc 1 2864 0
 1624 00d0 B121     		mov	r1, #177
 1625 00d2 4A00     		lsl	r2, r1, #1
2858:../Dave/Generated/src/FEE001/FEE001.c ****        BlockNumber = Ptr->BlockNumber;
 1626              		.loc 1 2858 0
 1627 00d4 251C     		mov	r5, r4
2864:../Dave/Generated/src/FEE001/FEE001.c ****        if(StateDataPtr->FeeIntrJobResult == FEE001_JOB_PASS)
 1628              		.loc 1 2864 0
 1629 00d6 A35C     		ldrb	r3, [r4, r2]
2858:../Dave/Generated/src/FEE001/FEE001.c ****        BlockNumber = Ptr->BlockNumber;
 1630              		.loc 1 2858 0
 1631 00d8 3C35     		add	r5, r5, #60
 1632              	.LVL187:
 1633 00da 2E78     		ldrb	r6, [r5]
 1634              	.LVL188:
2864:../Dave/Generated/src/FEE001/FEE001.c ****        if(StateDataPtr->FeeIntrJobResult == FEE001_JOB_PASS)
 1635              		.loc 1 2864 0
 1636 00dc 0293     		str	r3, [sp, #8]
 1637 00de 002B     		cmp	r3, #0
 1638 00e0 4AD1     		bne	.L156
 1639              	.LVL189:
 1640              	.LBB14:
 1641              	.LBB15:
3153:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1642              		.loc 1 3153 0
 1643 00e2 3D68     		ldr	r5, [r7]
 1644              	.LVL190:
3162:../Dave/Generated/src/FEE001/FEE001.c ****    Index = Fee_lGetUsrBlockIndex(BlockNumber);
 1645              		.loc 1 3162 0
 1646 00e4 301C     		mov	r0, r6
3153:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1647              		.loc 1 3153 0
 1648 00e6 0395     		str	r5, [sp, #12]
 1649 00e8 2D68     		ldr	r5, [r5]
 1650              	.LVL191:
3157:../Dave/Generated/src/FEE001/FEE001.c ****    StatusByte = Ptr->Status;
 1651              		.loc 1 3157 0
 1652 00ea 291C     		mov	r1, r5
 1653 00ec 3D31     		add	r1, r1, #61
 1654 00ee 0A78     		ldrb	r2, [r1]
 1655 00f0 0092     		str	r2, [sp]
 1656              	.LVL192:
3162:../Dave/Generated/src/FEE001/FEE001.c ****    Index = Fee_lGetUsrBlockIndex(BlockNumber);
 1657              		.loc 1 3162 0
 1658 00f2 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 1659              	.LVL193:
3165:../Dave/Generated/src/FEE001/FEE001.c ****    if( (Index != FEE001_LOG_BLOCK_NOT_FOUND) )
 1660              		.loc 1 3165 0
 1661 00f6 FF28     		cmp	r0, #255
 1662 00f8 39D0     		beq	.L157
3171:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCacheUpdateIndex = Index;
 1663              		.loc 1 3171 0
 1664 00fa 424A     		ldr	r2, .L193+12
3168:../Dave/Generated/src/FEE001/FEE001.c ****       CachePtr = CachePtr + Index;
 1665              		.loc 1 3168 0
 1666 00fc C100     		lsl	r1, r0, #3
 1667 00fe 6E18     		add	r6, r5, r1
 1668              	.LVL194:
3171:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCacheUpdateIndex = Index;
 1669              		.loc 1 3171 0
 1670 0100 A854     		strb	r0, [r5, r2]
3175:../Dave/Generated/src/FEE001/FEE001.c ****       if(CachePtr->Address == 0U)
 1671              		.loc 1 3175 0
 1672 0102 3368     		ldr	r3, [r6]
 1673 0104 002B     		cmp	r3, #0
 1674 0106 2CD1     		bne	.L158
3178:../Dave/Generated/src/FEE001/FEE001.c ****          if((StatusByte & FEE001_START_BIT ) != 0U)
 1675              		.loc 1 3178 0
 1676 0108 6A46     		mov	r2, sp
 1677 010a 0023     		mov	r3, #0
 1678 010c D156     		ldrsb	r1, [r2, r3]
 1679 010e 0029     		cmp	r1, #0
 1680 0110 55DA     		bge	.L159
3181:../Dave/Generated/src/FEE001/FEE001.c ****             CachePtr->Address = StateDataPtr->FeeCurrBankSrcAddr;
 1681              		.loc 1 3181 0
 1682 0112 2A6B     		ldr	r2, [r5, #48]
3184:../Dave/Generated/src/FEE001/FEE001.c ****             if((StatusByte & (FEE001_VALID_BIT) ) != 0U)
 1683              		.loc 1 3184 0
 1684 0114 0099     		ldr	r1, [sp]
3181:../Dave/Generated/src/FEE001/FEE001.c ****             CachePtr->Address = StateDataPtr->FeeCurrBankSrcAddr;
 1685              		.loc 1 3181 0
 1686 0116 3260     		str	r2, [r6]
 1687 0118 3379     		ldrb	r3, [r6, #4]
 1688 011a 0122     		mov	r2, #1
3184:../Dave/Generated/src/FEE001/FEE001.c ****             if((StatusByte & (FEE001_VALID_BIT) ) != 0U)
 1689              		.loc 1 3184 0
 1690 011c 4906     		lsl	r1, r1, #25
 1691 011e 07D5     		bpl	.L160
3186:../Dave/Generated/src/FEE001/FEE001.c ****                CachePtr->Status.Valid = 1U;
 1692              		.loc 1 3186 0
 1693 0120 1343     		orr	r3, r2
 1694 0122 3371     		strb	r3, [r6, #4]
3189:../Dave/Generated/src/FEE001/FEE001.c ****                if((StatusByte & (FEE001_CRC_BIT) ) != 0U)
 1695              		.loc 1 3189 0
 1696 0124 0099     		ldr	r1, [sp]
 1697 0126 0822     		mov	r2, #8
 1698 0128 C906     		lsl	r1, r1, #27
 1699 012a 01D5     		bpl	.L160
3191:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Status.Crc = 1U;
 1700              		.loc 1 3191 0
 1701 012c 1343     		orr	r3, r2
 1702 012e 00E0     		b	.L187
 1703              	.L160:
3200:../Dave/Generated/src/FEE001/FEE001.c ****                CachePtr->Status.Valid = 0U;
 1704              		.loc 1 3200 0
 1705 0130 9343     		bic	r3, r2
 1706              	.L187:
 1707 0132 3371     		strb	r3, [r6, #4]
 1708              	.LVL195:
3205:../Dave/Generated/src/FEE001/FEE001.c ****             Size = (uint16_t)(FEE001_CfgPtr->FeeBlockConfigPtr[Index].Size);
 1709              		.loc 1 3205 0
 1710 0134 039B     		ldr	r3, [sp, #12]
 1711 0136 8000     		lsl	r0, r0, #2
 1712              	.LVL196:
 1713 0138 5A68     		ldr	r2, [r3, #4]
 1714 013a 1118     		add	r1, r2, r0
3206:../Dave/Generated/src/FEE001/FEE001.c ****             PhysicalBlocks = Fee_lGetDFLASHPhysicalBlocks(Size);
 1715              		.loc 1 3206 0
 1716 013c 4888     		ldrh	r0, [r1, #2]
 1717 013e FFF7FEFF 		bl	Fee_lGetDFLASHPhysicalBlocks
 1718              	.LVL197:
3208:../Dave/Generated/src/FEE001/FEE001.c ****             if( StateDataPtr->FeeWrittenDFlashBlocksCnt == PhysicalBlocks)
 1719              		.loc 1 3208 0
 1720 0142 A96B     		ldr	r1, [r5, #56]
 1721 0144 3379     		ldrb	r3, [r6, #4]
3212:../Dave/Generated/src/FEE001/FEE001.c ****                CachePtr->Status.Consistent = 1U;
 1722              		.loc 1 3212 0
 1723 0146 0222     		mov	r2, #2
3208:../Dave/Generated/src/FEE001/FEE001.c ****             if( StateDataPtr->FeeWrittenDFlashBlocksCnt == PhysicalBlocks)
 1724              		.loc 1 3208 0
 1725 0148 8142     		cmp	r1, r0
 1726 014a 01D0     		beq	.L191
 1727              	.L163:
3221:../Dave/Generated/src/FEE001/FEE001.c ****                if(CachePtr->Status.Valid == 0U)
 1728              		.loc 1 3221 0
 1729 014c D907     		lsl	r1, r3, #31
 1730 014e 01D4     		bmi	.L165
 1731              	.L191:
3223:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Status.Consistent = 1U;
 1732              		.loc 1 3223 0
 1733 0150 1343     		orr	r3, r2
 1734 0152 00E0     		b	.L188
 1735              	.L165:
3227:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Status.Consistent = 0U;
 1736              		.loc 1 3227 0
 1737 0154 9343     		bic	r3, r2
 1738              	.L188:
3232:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1739              		.loc 1 3232 0
 1740 0156 2B48     		ldr	r0, .L193+12
 1741              	.LVL198:
3227:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Status.Consistent = 0U;
 1742              		.loc 1 3227 0
 1743 0158 3371     		strb	r3, [r6, #4]
3232:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1744              		.loc 1 3232 0
 1745 015a FF26     		mov	r6, #255
 1746              	.LVL199:
 1747 015c 2E54     		strb	r6, [r5, r0]
3233:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 1748              		.loc 1 3233 0
 1749 015e 0026     		mov	r6, #0
 1750 0160 03E0     		b	.L189
 1751              	.LVL200:
 1752              	.L158:
3245:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1753              		.loc 1 3245 0
 1754 0162 2849     		ldr	r1, .L193+12
 1755 0164 FF20     		mov	r0, #255
 1756              	.LVL201:
3246:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 1757              		.loc 1 3246 0
 1758 0166 029E     		ldr	r6, [sp, #8]
 1759              	.LVL202:
3245:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1760              		.loc 1 3245 0
 1761 0168 6854     		strb	r0, [r5, r1]
 1762              	.L189:
3246:../Dave/Generated/src/FEE001/FEE001.c ****          StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 1763              		.loc 1 3246 0
 1764 016a AE63     		str	r6, [r5, #56]
 1765 016c 27E0     		b	.L159
 1766              	.LVL203:
 1767              	.L157:
3251:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1768              		.loc 1 3251 0
 1769 016e 254E     		ldr	r6, .L193+12
 1770              	.LVL204:
3252:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 1771              		.loc 1 3252 0
 1772 0170 029B     		ldr	r3, [sp, #8]
3251:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1773              		.loc 1 3251 0
 1774 0172 A855     		strb	r0, [r5, r6]
3252:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 1775              		.loc 1 3252 0
 1776 0174 AB63     		str	r3, [r5, #56]
 1777 0176 22E0     		b	.L159
 1778              	.LVL205:
 1779              	.L156:
 1780              	.LBE15:
 1781              	.LBE14:
2874:../Dave/Generated/src/FEE001/FEE001.c ****          FLASH003_ClearStatus();
 1782              		.loc 1 2874 0
 1783 0178 FFF7FEFF 		bl	FLASH003_ClearStatus
 1784              	.LVL206:
2877:../Dave/Generated/src/FEE001/FEE001.c ****          status = FLASH003_ReadWord(
 1785              		.loc 1 2877 0
 1786 017c 206B     		ldr	r0, [r4, #48]
 1787 017e 291C     		mov	r1, r5
 1788 0180 FFF7FEFF 		bl	FLASH003_ReadWord
 1789              	.LVL207:
2882:../Dave/Generated/src/FEE001/FEE001.c ****          if(status != 0U)
 1790              		.loc 1 2882 0
 1791 0184 0028     		cmp	r0, #0
 1792 0186 08D0     		beq	.L166
2887:../Dave/Generated/src/FEE001/FEE001.c ****            if( StateDataPtr->FeeCacheUpdateIndex != FEE001_LOG_BLOCK_NOT_FOUND )
 1793              		.loc 1 2887 0
 1794 0188 1E4B     		ldr	r3, .L193+12
 1795 018a E05C     		ldrb	r0, [r4, r3]
 1796              	.LVL208:
 1797 018c FF28     		cmp	r0, #255
 1798 018e 11D0     		beq	.L167
 1799              	.LVL209:
2895:../Dave/Generated/src/FEE001/FEE001.c ****               CachePtr->Address = 0xFFFFFFFFU;
 1800              		.loc 1 2895 0
 1801 0190 0126     		mov	r6, #1
 1802              	.LVL210:
2890:../Dave/Generated/src/FEE001/FEE001.c ****               CachePtr = CachePtr + StateDataPtr->FeeCacheUpdateIndex;
 1803              		.loc 1 2890 0
 1804 0192 C500     		lsl	r5, r0, #3
 1805              	.LVL211:
2895:../Dave/Generated/src/FEE001/FEE001.c ****               CachePtr->Address = 0xFFFFFFFFU;
 1806              		.loc 1 2895 0
 1807 0194 7142     		neg	r1, r6
 1808 0196 6151     		str	r1, [r4, r5]
 1809 0198 0CE0     		b	.L167
 1810              	.LVL212:
 1811              	.L166:
2907:../Dave/Generated/src/FEE001/FEE001.c ****             Index = Fee_lGetUsrBlockIndex(BlockNumber);
 1812              		.loc 1 2907 0
 1813 019a 301C     		mov	r0, r6
 1814              	.LVL213:
 1815 019c FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 1816              	.LVL214:
2910:../Dave/Generated/src/FEE001/FEE001.c ****             if(Index != FEE001_LOG_BLOCK_NOT_FOUND)
 1817              		.loc 1 2910 0
 1818 01a0 FF28     		cmp	r0, #255
 1819 01a2 07D0     		beq	.L167
2913:../Dave/Generated/src/FEE001/FEE001.c ****                CachePtr = CachePtr + Index;
 1820              		.loc 1 2913 0
 1821 01a4 C000     		lsl	r0, r0, #3
 1822              	.LVL215:
 1823 01a6 2518     		add	r5, r4, r0
 1824              	.LVL216:
2916:../Dave/Generated/src/FEE001/FEE001.c ****                if( CachePtr->Address == 0U )
 1825              		.loc 1 2916 0
 1826 01a8 2E68     		ldr	r6, [r5]
 1827              	.LVL217:
 1828 01aa 002E     		cmp	r6, #0
 1829 01ac 02D1     		bne	.L167
2918:../Dave/Generated/src/FEE001/FEE001.c ****                   CachePtr->Address = 0xFFFFFFFFU;
 1830              		.loc 1 2918 0
 1831 01ae 0121     		mov	r1, #1
 1832 01b0 4A42     		neg	r2, r1
 1833 01b2 2A60     		str	r2, [r5]
 1834              	.LVL218:
 1835              	.L167:
2928:../Dave/Generated/src/FEE001/FEE001.c ****            StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1836              		.loc 1 2928 0
 1837 01b4 134B     		ldr	r3, .L193+12
 1838 01b6 FF22     		mov	r2, #255
2929:../Dave/Generated/src/FEE001/FEE001.c ****            StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 1839              		.loc 1 2929 0
 1840 01b8 0020     		mov	r0, #0
2928:../Dave/Generated/src/FEE001/FEE001.c ****            StateDataPtr->FeeCacheUpdateIndex = FEE001_LOG_BLOCK_NOT_FOUND;
 1841              		.loc 1 2928 0
 1842 01ba E254     		strb	r2, [r4, r3]
2929:../Dave/Generated/src/FEE001/FEE001.c ****            StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 1843              		.loc 1 2929 0
 1844 01bc A063     		str	r0, [r4, #56]
 1845              	.L159:
2933:../Dave/Generated/src/FEE001/FEE001.c ****          if( StateDataPtr->FeeCurrBankSrcAddr == EndAddr )
 1846              		.loc 1 2933 0
 1847 01be 256B     		ldr	r5, [r4, #48]
 1848 01c0 019B     		ldr	r3, [sp, #4]
 1849 01c2 9D42     		cmp	r5, r3
 1850 01c4 03D1     		bne	.L168
2936:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeCacheState = FEE001_CACHE_UPDATE_COMPLETE;
 1851              		.loc 1 2936 0
 1852 01c6 AF26     		mov	r6, #175
 1853 01c8 0421     		mov	r1, #4
 1854 01ca 7200     		lsl	r2, r6, #1
 1855 01cc 33E7     		b	.L190
 1856              	.L168:
 1857              	.LBB16:
 1858              	.LBB17:
2973:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1859              		.loc 1 2973 0
 1860 01ce 3968     		ldr	r1, [r7]
2982:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeIntrJobResult = (FEE001_JobResultType)FLASH003_ReadBlock(
 1861              		.loc 1 2982 0
 1862 01d0 B125     		mov	r5, #177
2973:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1863              		.loc 1 2973 0
 1864 01d2 0E68     		ldr	r6, [r1]
 1865              	.LVL219:
2976:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCurrBankSrcAddr = StateDataPtr->FeeCurrBankSrcAddr -
 1866              		.loc 1 2976 0
 1867 01d4 326B     		ldr	r2, [r6, #48]
 1868 01d6 103A     		sub	r2, r2, #16
 1869 01d8 3263     		str	r2, [r6, #48]
2980:../Dave/Generated/src/FEE001/FEE001.c ****    FLASH003_ClearStatus();
 1870              		.loc 1 2980 0
 1871 01da FFF7FEFF 		bl	FLASH003_ClearStatus
 1872              	.LVL220:
2984:../Dave/Generated/src/FEE001/FEE001.c ****                   (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer);
 1873              		.loc 1 2984 0
 1874 01de 311C     		mov	r1, r6
 1875 01e0 3C31     		add	r1, r1, #60
2982:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeIntrJobResult = (FEE001_JobResultType)FLASH003_ReadBlock(
 1876              		.loc 1 2982 0
 1877 01e2 306B     		ldr	r0, [r6, #48]
 1878 01e4 FFF7FEFF 		bl	FLASH003_ReadBlock
 1879              	.LVL221:
 1880 01e8 6B00     		lsl	r3, r5, #1
 1881 01ea F054     		strb	r0, [r6, r3]
2988:../Dave/Generated/src/FEE001/FEE001.c ****                                   StateDataPtr->FeeWrittenDFlashBlocksCnt + 1U;
 1882              		.loc 1 2988 0
 1883 01ec B06B     		ldr	r0, [r6, #56]
 1884 01ee 0130     		add	r0, r0, #1
2987:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt = 
 1885              		.loc 1 2987 0
 1886 01f0 B063     		str	r0, [r6, #56]
 1887 01f2 21E7     		b	.L185
 1888              	.LVL222:
 1889              	.L192:
 1890              	.LBE17:
 1891              	.LBE16:
2949:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lUpdateCache*/
 1892              		.loc 1 2949 0
 1893 01f4 05B0     		add	sp, sp, #20
 1894              		@ sp needed for prologue
 1895              	.LVL223:
 1896 01f6 F0BD     		pop	{r4, r5, r6, r7, pc}
 1897              	.L194:
 1898              		.align	2
 1899              	.L193:
 1900 01f8 00000000 		.word	FEE001_CfgPtr
 1901 01fc 00810010 		.word	268468480
 1902 0200 00890010 		.word	268470528
 1903 0204 5F010000 		.word	351
 1904              		.cfi_endproc
 1905              	.LFE57:
 1907              		.section	.text.Fee_lInitllegalStateMachine,"ax",%progbits
 1908              		.align	1
 1909              		.code	16
 1910              		.thumb_func
 1912              	Fee_lInitllegalStateMachine:
 1913              	.LFB50:
1431:../Dave/Generated/src/FEE001/FEE001.c **** {
 1914              		.loc 1 1431 0
 1915              		.cfi_startproc
 1916 0000 70B5     		push	{r4, r5, r6, lr}
 1917              	.LCFI14:
 1918              		.cfi_def_cfa_offset 16
 1919              		.cfi_offset 4, -16
 1920              		.cfi_offset 5, -12
 1921              		.cfi_offset 6, -8
 1922              		.cfi_offset 14, -4
1434:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1923              		.loc 1 1434 0
 1924 0002 0B4B     		ldr	r3, .L198
 1925 0004 AD26     		mov	r6, #173
 1926 0006 1868     		ldr	r0, [r3]
 1927 0008 7600     		lsl	r6, r6, #1
1443:../Dave/Generated/src/FEE001/FEE001.c ****     if(FEE001_CfgPtr->FeeEraseAllEnable == 1U)
 1928              		.loc 1 1443 0
 1929 000a 457A     		ldrb	r5, [r0, #9]
1434:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1930              		.loc 1 1434 0
 1931 000c 0468     		ldr	r4, [r0]
 1932              	.LVL224:
1443:../Dave/Generated/src/FEE001/FEE001.c ****     if(FEE001_CfgPtr->FeeEraseAllEnable == 1U)
 1933              		.loc 1 1443 0
 1934 000e 012D     		cmp	r5, #1
 1935 0010 0AD1     		bne	.L196
1446:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 1936              		.loc 1 1446 0
 1937 0012 227E     		ldrb	r2, [r4, #24]
 1938 0014 AA43     		bic	r2, r5
 1939 0016 2276     		strb	r2, [r4, #24]
1449:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lUpdateCurrBankInfo();
 1940              		.loc 1 1449 0
 1941 0018 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 1942              	.LVL225:
1452:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_FF;
 1943              		.loc 1 1452 0
 1944 001c A555     		strb	r5, [r4, r6]
1455:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lPrepareDFlash();
 1945              		.loc 1 1455 0
 1946 001e FFF7FEFF 		bl	Fee_lPrepareDFlash
 1947              	.LVL226:
1461:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lUpdateCache();
 1948              		.loc 1 1461 0
 1949 0022 FFF7FEFF 		bl	Fee_lUpdateCache
 1950              	.LVL227:
 1951 0026 01E0     		b	.L195
 1952              	.L196:
1466:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 1953              		.loc 1 1466 0
 1954 0028 0921     		mov	r1, #9
 1955 002a A155     		strb	r1, [r4, r6]
 1956              	.L195:
1469:../Dave/Generated/src/FEE001/FEE001.c **** }
 1957              		.loc 1 1469 0
 1958              		@ sp needed for prologue
 1959              	.LVL228:
 1960 002c 70BD     		pop	{r4, r5, r6, pc}
 1961              	.L199:
 1962 002e C046     		.align	2
 1963              	.L198:
 1964 0030 00000000 		.word	FEE001_CfgPtr
 1965              		.cfi_endproc
 1966              	.LFE50:
 1968              		.section	.text.Fee_lGarbageCollection,"ax",%progbits
 1969              		.align	1
 1970              		.code	16
 1971              		.thumb_func
 1973              	Fee_lGarbageCollection:
 1974              	.LFB53:
2337:../Dave/Generated/src/FEE001/FEE001.c **** {
 1975              		.loc 1 2337 0
 1976              		.cfi_startproc
 1977 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1978              	.LCFI15:
 1979              		.cfi_def_cfa_offset 20
 1980              		.cfi_offset 4, -20
 1981              		.cfi_offset 5, -16
 1982              		.cfi_offset 6, -12
 1983              		.cfi_offset 7, -8
 1984              		.cfi_offset 14, -4
2342:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1985              		.loc 1 2342 0
 1986 0002 7C4F     		ldr	r7, .L245
2337:../Dave/Generated/src/FEE001/FEE001.c **** {
 1987              		.loc 1 2337 0
 1988 0004 85B0     		sub	sp, sp, #20
 1989              	.LCFI16:
 1990              		.cfi_def_cfa_offset 40
2342:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 1991              		.loc 1 2342 0
 1992 0006 3B68     		ldr	r3, [r7]
 1993 0008 1C68     		ldr	r4, [r3]
 1994              	.LVL229:
 1995              	.L226:
2346:../Dave/Generated/src/FEE001/FEE001.c ****      switch(StateDataPtr->FeeGcState)
 1996              		.loc 1 2346 0
 1997 000a AD25     		mov	r5, #173
 1998 000c 6E00     		lsl	r6, r5, #1
 1999 000e A05D     		ldrb	r0, [r4, r6]
 2000 0010 0138     		sub	r0, r0, #1
 2001 0012 0728     		cmp	r0, #7
 2002 0014 00D9     		bls	.LCB1974
 2003 0016 C8E0     		b	.L201	@long jump
 2004              	.LCB1974:
 2005 0018 FFF7FEFF 		bl	__gnu_thumb1_case_uqi
 2006              	.L210:
 2007 001c 25       		.byte	(.L202-.L210)/2
 2008 001d 3F       		.byte	(.L203-.L210)/2
 2009 001e B0       		.byte	(.L204-.L210)/2
 2010 001f 04       		.byte	(.L205-.L210)/2
 2011 0020 4A       		.byte	(.L206-.L210)/2
 2012 0021 8E       		.byte	(.L207-.L210)/2
 2013 0022 A5       		.byte	(.L208-.L210)/2
 2014 0023 B9       		.byte	(.L209-.L210)/2
 2015              		.align	1
 2016              	.L205:
2351:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
 2017              		.loc 1 2351 0
 2018 0024 FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 2019              	.LVL230:
2354:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcDestAddr +
 2020              		.loc 1 2354 0
 2021 0028 E069     		ldr	r0, [r4, #28]
 2022 002a 1030     		add	r0, r0, #16
 2023 002c FFF7FEFF 		bl	Fee_lGCWrite
 2024              	.LVL231:
2356:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
 2025              		.loc 1 2356 0
 2026 0030 0028     		cmp	r0, #0
 2027 0032 00D0     		beq	.LCB1990
 2028 0034 95E0     		b	.L221	@long jump
 2029              	.LCB1990:
2367:../Dave/Generated/src/FEE001/FEE001.c ****                  }while(BlockCount != FEE001_CfgPtr->FeeBlkCnt);
 2030              		.loc 1 2367 0
 2031 0036 3B68     		ldr	r3, [r7]
2359:../Dave/Generated/src/FEE001/FEE001.c ****                  CachePtr = StateDataPtr->FeeBlockInfo;
 2032              		.loc 1 2359 0
 2033 0038 261C     		mov	r6, r4
 2034              	.LVL232:
 2035              	.L212:
2364:../Dave/Generated/src/FEE001/FEE001.c ****                     CachePtr->Status.Copied = 0U;
 2036              		.loc 1 2364 0 discriminator 1
 2037 003a 3179     		ldrb	r1, [r6, #4]
 2038 003c 0422     		mov	r2, #4
 2039 003e 9143     		bic	r1, r2
 2040 0040 3171     		strb	r1, [r6, #4]
2367:../Dave/Generated/src/FEE001/FEE001.c ****                  }while(BlockCount != FEE001_CfgPtr->FeeBlkCnt);
 2041              		.loc 1 2367 0 discriminator 1
 2042 0042 1D7A     		ldrb	r5, [r3, #8]
2365:../Dave/Generated/src/FEE001/FEE001.c ****                     BlockCount++;
 2043              		.loc 1 2365 0 discriminator 1
 2044 0044 0130     		add	r0, r0, #1
 2045              	.LVL233:
2366:../Dave/Generated/src/FEE001/FEE001.c ****                     CachePtr++;
 2046              		.loc 1 2366 0 discriminator 1
 2047 0046 0836     		add	r6, r6, #8
 2048              	.LVL234:
2367:../Dave/Generated/src/FEE001/FEE001.c ****                  }while(BlockCount != FEE001_CfgPtr->FeeBlkCnt);
 2049              		.loc 1 2367 0 discriminator 1
 2050 0048 A842     		cmp	r0, r5
 2051 004a F6D1     		bne	.L212
2373:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcDestAddr = StateDataPtr->FeeGcDestAddr +
 2052              		.loc 1 2373 0
 2053 004c E569     		ldr	r5, [r4, #28]
2371:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_START_COPY;
 2054              		.loc 1 2371 0
 2055 004e 0121     		mov	r1, #1
2369:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGCLogBlkCount = 0U;
 2056              		.loc 1 2369 0
 2057 0050 AE26     		mov	r6, #174
 2058              	.LVL235:
2371:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_START_COPY;
 2059              		.loc 1 2371 0
 2060 0052 AD22     		mov	r2, #173
2373:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcDestAddr = StateDataPtr->FeeGcDestAddr +
 2061              		.loc 1 2373 0
 2062 0054 0135     		add	r5, r5, #1
2369:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGCLogBlkCount = 0U;
 2063              		.loc 1 2369 0
 2064 0056 0020     		mov	r0, #0
 2065              	.LVL236:
 2066 0058 7300     		lsl	r3, r6, #1
2371:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_START_COPY;
 2067              		.loc 1 2371 0
 2068 005a 8A40     		lsl	r2, r2, r1
2373:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcDestAddr = StateDataPtr->FeeGcDestAddr +
 2069              		.loc 1 2373 0
 2070 005c FF35     		add	r5, r5, #255
2369:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGCLogBlkCount = 0U;
 2071              		.loc 1 2369 0
 2072 005e E054     		strb	r0, [r4, r3]
2371:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_START_COPY;
 2073              		.loc 1 2371 0
 2074 0060 A154     		strb	r1, [r4, r2]
2373:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcDestAddr = StateDataPtr->FeeGcDestAddr +
 2075              		.loc 1 2373 0
 2076 0062 E561     		str	r5, [r4, #28]
 2077 0064 A1E0     		b	.L201
 2078              	.L202:
 2079              	.LVL237:
 2080              	.LBB22:
 2081              	.LBB23:
2522:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2082              		.loc 1 2522 0
 2083 0066 3968     		ldr	r1, [r7]
2525:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = StateDataPtr->FeeGCLogBlkCount;
 2084              		.loc 1 2525 0
 2085 0068 AE26     		mov	r6, #174
2522:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2086              		.loc 1 2522 0
 2087 006a 0D68     		ldr	r5, [r1]
 2088              	.LVL238:
2525:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = StateDataPtr->FeeGCLogBlkCount;
 2089              		.loc 1 2525 0
 2090 006c 7200     		lsl	r2, r6, #1
 2091 006e AE5C     		ldrb	r6, [r5, r2]
 2092              	.LVL239:
2531:../Dave/Generated/src/FEE001/FEE001.c ****   while((StateFlag == 0U) && (BlockCount != FEE001_CfgPtr->FeeBlkCnt))
 2093              		.loc 1 2531 0
 2094 0070 087A     		ldrb	r0, [r1, #8]
2526:../Dave/Generated/src/FEE001/FEE001.c ****   CachePtr = StateDataPtr->FeeBlockInfo + BlockCount;
 2095              		.loc 1 2526 0
 2096 0072 F300     		lsl	r3, r6, #3
 2097 0074 EB18     		add	r3, r5, r3
 2098              	.LVL240:
2531:../Dave/Generated/src/FEE001/FEE001.c ****   while((StateFlag == 0U) && (BlockCount != FEE001_CfgPtr->FeeBlkCnt))
 2099              		.loc 1 2531 0
 2100 0076 0190     		str	r0, [sp, #4]
 2101              	.LVL241:
 2102              	.L213:
 2103 0078 0199     		ldr	r1, [sp, #4]
 2104 007a 8E42     		cmp	r6, r1
 2105 007c 00D1     		bne	.LCB2062
 2106 007e A9E0     		b	.L244	@long jump
 2107              	.LCB2062:
 2108              	.L216:
2534:../Dave/Generated/src/FEE001/FEE001.c **** 	 if( ( (CachePtr->Address != 0U) &&
 2109              		.loc 1 2534 0
 2110 0080 1A68     		ldr	r2, [r3]
 2111 0082 002A     		cmp	r2, #0
 2112 0084 05D0     		beq	.L214
2535:../Dave/Generated/src/FEE001/FEE001.c ****            (CachePtr->Status.Consistent == 1U)) &&
 2113              		.loc 1 2535 0
 2114 0086 1979     		ldrb	r1, [r3, #4]
 2115 0088 0620     		mov	r0, #6
 2116 008a 0840     		and	r0, r1
 2117 008c 0228     		cmp	r0, #2
 2118 008e 00D1     		bne	.LCB2073
 2119 0090 94E0     		b	.L215	@long jump
 2120              	.LCB2073:
 2121              	.L214:
2544:../Dave/Generated/src/FEE001/FEE001.c ****         BlockCount++;
 2122              		.loc 1 2544 0
 2123 0092 0136     		add	r6, r6, #1
 2124 0094 F6B2     		uxtb	r6, r6
 2125              	.LVL242:
2545:../Dave/Generated/src/FEE001/FEE001.c ****         CachePtr++;
 2126              		.loc 1 2545 0
 2127 0096 0833     		add	r3, r3, #8
 2128              	.LVL243:
 2129 0098 EEE7     		b	.L213
 2130              	.LVL244:
 2131              	.L203:
 2132              	.LBE23:
 2133              	.LBE22:
2392:../Dave/Generated/src/FEE001/FEE001.c ****               FLASH003_ClearStatus();
 2134              		.loc 1 2392 0
 2135 009a FFF7FEFF 		bl	FLASH003_ClearStatus
 2136              	.LVL245:
2396:../Dave/Generated/src/FEE001/FEE001.c ****                            (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer);
 2137              		.loc 1 2396 0
 2138 009e 211C     		mov	r1, r4
 2139 00a0 3C31     		add	r1, r1, #60
2395:../Dave/Generated/src/FEE001/FEE001.c ****               (void)FLASH003_ReadBlock((uint32_t)(StateDataPtr->FeeGcSrcAddr),
 2140              		.loc 1 2395 0
 2141 00a2 206A     		ldr	r0, [r4, #32]
 2142 00a4 FFF7FEFF 		bl	FLASH003_ReadBlock
 2143              	.LVL246:
2399:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeGcState = FEE001_GC_COPY_WRITE;
 2144              		.loc 1 2399 0
 2145 00a8 0522     		mov	r2, #5
 2146              	.L243:
 2147 00aa AD20     		mov	r0, #173
 2148 00ac 4600     		lsl	r6, r0, #1
 2149 00ae 7BE0     		b	.L241
 2150              	.L206:
 2151              	.LBB25:
 2152              	.LBB26:
2605:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2153              		.loc 1 2605 0
 2154 00b0 3E68     		ldr	r6, [r7]
2607:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = StateDataPtr->FeeGCLogBlkCount;
 2155              		.loc 1 2607 0
 2156 00b2 AE21     		mov	r1, #174
2605:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2157              		.loc 1 2605 0
 2158 00b4 3568     		ldr	r5, [r6]
 2159              	.LVL247:
2607:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = StateDataPtr->FeeGCLogBlkCount;
 2160              		.loc 1 2607 0
 2161 00b6 4A00     		lsl	r2, r1, #1
2610:../Dave/Generated/src/FEE001/FEE001.c ****   Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcDestAddr));
 2162              		.loc 1 2610 0
 2163 00b8 E869     		ldr	r0, [r5, #28]
2607:../Dave/Generated/src/FEE001/FEE001.c ****   BlockCount = StateDataPtr->FeeGCLogBlkCount;
 2164              		.loc 1 2607 0
 2165 00ba AE5C     		ldrb	r6, [r5, r2]
 2166              	.LVL248:
2610:../Dave/Generated/src/FEE001/FEE001.c ****   Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcDestAddr));
 2167              		.loc 1 2610 0
 2168 00bc FFF7FEFF 		bl	Fee_lGCWrite
 2169              	.LVL249:
 2170 00c0 0390     		str	r0, [sp, #12]
 2171              	.LVL250:
2611:../Dave/Generated/src/FEE001/FEE001.c ****   if (Status == FEE001_COMPLETE)
 2172              		.loc 1 2611 0
 2173 00c2 0028     		cmp	r0, #0
 2174 00c4 31D1     		bne	.L218
2614:../Dave/Generated/src/FEE001/FEE001.c ****      Size = (uint16_t)FEE001_CfgPtr->FeeBlockConfigPtr[BlockCount].Size;
 2175              		.loc 1 2614 0
 2176 00c6 3A68     		ldr	r2, [r7]
2608:../Dave/Generated/src/FEE001/FEE001.c ****   CachePtr = StateDataPtr->FeeBlockInfo + BlockCount;
 2177              		.loc 1 2608 0
 2178 00c8 F000     		lsl	r0, r6, #3
2613:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGCDFlashBlocks++;
 2179              		.loc 1 2613 0
 2180 00ca 696B     		ldr	r1, [r5, #52]
2608:../Dave/Generated/src/FEE001/FEE001.c ****   CachePtr = StateDataPtr->FeeBlockInfo + BlockCount;
 2181              		.loc 1 2608 0
 2182 00cc 2B18     		add	r3, r5, r0
2614:../Dave/Generated/src/FEE001/FEE001.c ****      Size = (uint16_t)FEE001_CfgPtr->FeeBlockConfigPtr[BlockCount].Size;
 2183              		.loc 1 2614 0
 2184 00ce 5068     		ldr	r0, [r2, #4]
2608:../Dave/Generated/src/FEE001/FEE001.c ****   CachePtr = StateDataPtr->FeeBlockInfo + BlockCount;
 2185              		.loc 1 2608 0
 2186 00d0 0193     		str	r3, [sp, #4]
2613:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGCDFlashBlocks++;
 2187              		.loc 1 2613 0
 2188 00d2 0131     		add	r1, r1, #1
2614:../Dave/Generated/src/FEE001/FEE001.c ****      Size = (uint16_t)FEE001_CfgPtr->FeeBlockConfigPtr[BlockCount].Size;
 2189              		.loc 1 2614 0
 2190 00d4 B300     		lsl	r3, r6, #2
2613:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGCDFlashBlocks++;
 2191              		.loc 1 2613 0
 2192 00d6 0291     		str	r1, [sp, #8]
 2193 00d8 6963     		str	r1, [r5, #52]
 2194              	.LVL251:
2614:../Dave/Generated/src/FEE001/FEE001.c ****      Size = (uint16_t)FEE001_CfgPtr->FeeBlockConfigPtr[BlockCount].Size;
 2195              		.loc 1 2614 0
 2196 00da C118     		add	r1, r0, r3
2615:../Dave/Generated/src/FEE001/FEE001.c ****      DFLASHPhysicalBlocks = (uint16_t)Fee_lGetDFLASHPhysicalBlocks(Size);
 2197              		.loc 1 2615 0
 2198 00dc 4888     		ldrh	r0, [r1, #2]
 2199 00de FFF7FEFF 		bl	Fee_lGetDFLASHPhysicalBlocks
 2200              	.LVL252:
 2201 00e2 019A     		ldr	r2, [sp, #4]
2617:../Dave/Generated/src/FEE001/FEE001.c ****      if((StateDataPtr->FeeGCDFlashBlocks == DFLASHPhysicalBlocks)
 2202              		.loc 1 2617 0
 2203 00e4 0299     		ldr	r1, [sp, #8]
2615:../Dave/Generated/src/FEE001/FEE001.c ****      DFLASHPhysicalBlocks = (uint16_t)Fee_lGetDFLASHPhysicalBlocks(Size);
 2204              		.loc 1 2615 0
 2205 00e6 80B2     		uxth	r0, r0
 2206              	.LVL253:
 2207 00e8 1379     		ldrb	r3, [r2, #4]
2617:../Dave/Generated/src/FEE001/FEE001.c ****      if((StateDataPtr->FeeGCDFlashBlocks == DFLASHPhysicalBlocks)
 2208              		.loc 1 2617 0
 2209 00ea 8142     		cmp	r1, r0
 2210 00ec 01D0     		beq	.L219
2618:../Dave/Generated/src/FEE001/FEE001.c ****          ||(CachePtr->Status.Valid == 0U)
 2211              		.loc 1 2618 0
 2212 00ee D807     		lsl	r0, r3, #31
 2213 00f0 11D4     		bmi	.L220
 2214              	.L219:
2621:../Dave/Generated/src/FEE001/FEE001.c ****        CachePtr->Status.Copied = 1U;
 2215              		.loc 1 2621 0
 2216 00f2 0422     		mov	r2, #4
 2217 00f4 0199     		ldr	r1, [sp, #4]
 2218 00f6 1343     		orr	r3, r2
 2219 00f8 0B71     		strb	r3, [r1, #4]
2624:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcState = FEE001_GC_START_COPY;
 2220              		.loc 1 2624 0
 2221 00fa 0120     		mov	r0, #1
 2222 00fc AD23     		mov	r3, #173
 2223 00fe 8340     		lsl	r3, r3, r0
 2224 0100 E854     		strb	r0, [r5, r3]
2627:../Dave/Generated/src/FEE001/FEE001.c ****         (FEE001_DFLASH_BLOCK_SIZE * StateDataPtr->FeeGCDFlashBlocks);
 2225              		.loc 1 2627 0
 2226 0102 029A     		ldr	r2, [sp, #8]
2625:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcDestAddr += FEE001_DFLASH_BLOCK_SIZE;
 2227              		.loc 1 2625 0
 2228 0104 EB69     		ldr	r3, [r5, #28]
2627:../Dave/Generated/src/FEE001/FEE001.c ****         (FEE001_DFLASH_BLOCK_SIZE * StateDataPtr->FeeGCDFlashBlocks);
 2229              		.loc 1 2627 0
 2230 0106 1001     		lsl	r0, r2, #4
2625:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcDestAddr += FEE001_DFLASH_BLOCK_SIZE;
 2231              		.loc 1 2625 0
 2232 0108 1033     		add	r3, r3, #16
 2233 010a EB61     		str	r3, [r5, #28]
2622:../Dave/Generated/src/FEE001/FEE001.c ****        BlockCount++;
 2234              		.loc 1 2622 0
 2235 010c 0136     		add	r6, r6, #1
 2236              	.LVL254:
2626:../Dave/Generated/src/FEE001/FEE001.c ****        CachePtr->Address = StateDataPtr->FeeGcDestAddr - 
 2237              		.loc 1 2626 0
 2238 010e 1B1A     		sub	r3, r3, r0
2622:../Dave/Generated/src/FEE001/FEE001.c ****        BlockCount++;
 2239              		.loc 1 2622 0
 2240 0110 F6B2     		uxtb	r6, r6
 2241              	.LVL255:
2626:../Dave/Generated/src/FEE001/FEE001.c ****        CachePtr->Address = StateDataPtr->FeeGcDestAddr - 
 2242              		.loc 1 2626 0
 2243 0112 0B60     		str	r3, [r1]
 2244 0114 09E0     		b	.L218
 2245              	.LVL256:
 2246              	.L220:
2631:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcSrcAddr = StateDataPtr->FeeGcSrcAddr + 
 2247              		.loc 1 2631 0
 2248 0116 286A     		ldr	r0, [r5, #32]
2633:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcDestAddr = StateDataPtr->FeeGcDestAddr + 
 2249              		.loc 1 2633 0
 2250 0118 EA69     		ldr	r2, [r5, #28]
2631:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcSrcAddr = StateDataPtr->FeeGcSrcAddr + 
 2251              		.loc 1 2631 0
 2252 011a 1030     		add	r0, r0, #16
2636:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcState = FEE001_GC_COPY_READ_NXTBLOCK;
 2253              		.loc 1 2636 0
 2254 011c AD23     		mov	r3, #173
2631:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcSrcAddr = StateDataPtr->FeeGcSrcAddr + 
 2255              		.loc 1 2631 0
 2256 011e 2862     		str	r0, [r5, #32]
2633:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcDestAddr = StateDataPtr->FeeGcDestAddr + 
 2257              		.loc 1 2633 0
 2258 0120 1032     		add	r2, r2, #16
2636:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcState = FEE001_GC_COPY_READ_NXTBLOCK;
 2259              		.loc 1 2636 0
 2260 0122 0221     		mov	r1, #2
 2261 0124 5800     		lsl	r0, r3, #1
2633:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcDestAddr = StateDataPtr->FeeGcDestAddr + 
 2262              		.loc 1 2633 0
 2263 0126 EA61     		str	r2, [r5, #28]
2636:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeGcState = FEE001_GC_COPY_READ_NXTBLOCK;
 2264              		.loc 1 2636 0
 2265 0128 2954     		strb	r1, [r5, r0]
 2266              	.LVL257:
 2267              	.L218:
2639:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr->FeeGCLogBlkCount = BlockCount;
 2268              		.loc 1 2639 0
 2269 012a AE21     		mov	r1, #174
 2270 012c 4A00     		lsl	r2, r1, #1
 2271 012e AE54     		strb	r6, [r5, r2]
 2272              	.LBE26:
 2273              	.LBE25:
2405:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status != FEE001_COMPLETE)
 2274              		.loc 1 2405 0
 2275 0130 039D     		ldr	r5, [sp, #12]
 2276              	.LVL258:
 2277 0132 002D     		cmp	r5, #0
 2278 0134 39D0     		beq	.L201
 2279 0136 14E0     		b	.L221
 2280              	.LVL259:
 2281              	.L207:
2413:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
 2282              		.loc 1 2413 0
 2283 0138 FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 2284              	.LVL260:
2416:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
 2285              		.loc 1 2416 0
 2286 013c 206A     		ldr	r0, [r4, #32]
 2287 013e 2030     		add	r0, r0, #32
 2288 0140 FFF7FEFF 		bl	Fee_lGCWrite
 2289              	.LVL261:
2419:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
 2290              		.loc 1 2419 0
 2291 0144 0028     		cmp	r0, #0
 2292 0146 0CD1     		bne	.L221
2423:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeStatusFlags.FeeCurrBank ^ 0x01U;
 2293              		.loc 1 2423 0
 2294 0148 227E     		ldrb	r2, [r4, #24]
2422:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeStatusFlags.FeeCurrBank =
 2295              		.loc 1 2422 0
 2296 014a 0123     		mov	r3, #1
2423:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeStatusFlags.FeeCurrBank ^ 0x01U;
 2297              		.loc 1 2423 0
 2298 014c D007     		lsl	r0, r2, #31
 2299              	.LVL262:
 2300 014e C50F     		lsr	r5, r0, #31
2422:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeStatusFlags.FeeCurrBank =
 2301              		.loc 1 2422 0
 2302 0150 5D40     		eor	r5, r3
 2303 0152 1D40     		and	r5, r3
 2304 0154 9A43     		bic	r2, r3
 2305 0156 2A43     		orr	r2, r5
 2306 0158 2276     		strb	r2, [r4, #24]
2426:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCurrBankInfo();
 2307              		.loc 1 2426 0
 2308 015a FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 2309              	.LVL263:
2428:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID;
 2310              		.loc 1 2428 0
 2311 015e 0722     		mov	r2, #7
 2312 0160 A3E7     		b	.L243
 2313              	.L221:
2433:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 2314              		.loc 1 2433 0
 2315 0162 0922     		mov	r2, #9
 2316 0164 A1E7     		b	.L243
 2317              	.L208:
2439:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
 2318              		.loc 1 2439 0
 2319 0166 FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 2320              	.LVL264:
2442:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcSrcAddr +
 2321              		.loc 1 2442 0
 2322 016a 206A     		ldr	r0, [r4, #32]
 2323 016c FFF7FEFF 		bl	Fee_lGCWrite
 2324              	.LVL265:
 2325 0170 AD21     		mov	r1, #173
 2326 0172 4E00     		lsl	r6, r1, #1
2447:../Dave/Generated/src/FEE001/FEE001.c ****             	  StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK;
 2327              		.loc 1 2447 0
 2328 0174 0322     		mov	r2, #3
2444:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
 2329              		.loc 1 2444 0
 2330 0176 0028     		cmp	r0, #0
 2331 0178 16D0     		beq	.L241
 2332 017a 14E0     		b	.L224
 2333              	.LVL266:
 2334              	.L204:
2458:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
 2335              		.loc 1 2458 0
 2336 017c A06A     		ldr	r0, [r4, #40]
 2337 017e FFF7FEFF 		bl	Fee_lEraseBank
 2338              	.LVL267:
2462:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_MARK_END_ERASE1;
 2339              		.loc 1 2462 0
 2340 0182 0823     		mov	r3, #8
2460:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
 2341              		.loc 1 2460 0
 2342 0184 0028     		cmp	r0, #0
 2343 0186 00D0     		beq	.L242
2466:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 2344              		.loc 1 2466 0
 2345 0188 0923     		mov	r3, #9
 2346              	.L242:
 2347 018a A355     		strb	r3, [r4, r6]
 2348 018c 0DE0     		b	.L201
 2349              	.LVL268:
 2350              	.L209:
2472:../Dave/Generated/src/FEE001/FEE001.c ****               Fee_lSetMarkerBlockBuffer();
 2351              		.loc 1 2472 0
 2352 018e FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 2353              	.LVL269:
2475:../Dave/Generated/src/FEE001/FEE001.c ****               Status = Fee_lGCWrite((uint32_t)(StateDataPtr->FeeGcDestAddr +
 2354              		.loc 1 2475 0
 2355 0192 E069     		ldr	r0, [r4, #28]
 2356 0194 AD25     		mov	r5, #173
 2357 0196 3030     		add	r0, r0, #48
 2358 0198 FFF7FEFF 		bl	Fee_lGCWrite
 2359              	.LVL270:
 2360 019c 6E00     		lsl	r6, r5, #1
2477:../Dave/Generated/src/FEE001/FEE001.c ****               if (Status == FEE001_COMPLETE)
 2361              		.loc 1 2477 0
 2362 019e 0028     		cmp	r0, #0
 2363 01a0 01D1     		bne	.L224
2479:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_IDLE;
 2364              		.loc 1 2479 0
 2365 01a2 A055     		strb	r0, [r4, r6]
 2366 01a4 01E0     		b	.L201
 2367              	.LVL271:
 2368              	.L224:
2483:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 2369              		.loc 1 2483 0
 2370 01a6 0922     		mov	r2, #9
 2371              	.L241:
 2372 01a8 A255     		strb	r2, [r4, r6]
 2373              	.L201:
2492:../Dave/Generated/src/FEE001/FEE001.c ****   }while((StateDataPtr->FeeGcState != FEE001_GC_IDLE) &&
 2374              		.loc 1 2492 0
 2375 01aa AD21     		mov	r1, #173
 2376 01ac 4800     		lsl	r0, r1, #1
 2377 01ae 235C     		ldrb	r3, [r4, r0]
2493:../Dave/Generated/src/FEE001/FEE001.c ****       (StateDataPtr->FeeGcState != FEE001_GC_FAIL));
 2378              		.loc 1 2493 0
 2379 01b0 002B     		cmp	r3, #0
 2380 01b2 1DD0     		beq	.L200
2492:../Dave/Generated/src/FEE001/FEE001.c ****   }while((StateDataPtr->FeeGcState != FEE001_GC_IDLE) &&
 2381              		.loc 1 2492 0 discriminator 1
 2382 01b4 092B     		cmp	r3, #9
 2383 01b6 00D0     		beq	.LCB2334
 2384 01b8 27E7     		b	.L226	@long jump
 2385              	.LCB2334:
 2386 01ba 19E0     		b	.L200
 2387              	.LVL272:
 2388              	.L215:
 2389              	.LBB27:
 2390              	.LBB24:
2553:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGCDFlashBlocks = 0U;
 2391              		.loc 1 2553 0
 2392 01bc 0023     		mov	r3, #0
2552:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcSrcAddr = CachePtr->Address;
 2393              		.loc 1 2552 0
 2394 01be 2A62     		str	r2, [r5, #32]
2553:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGCDFlashBlocks = 0U;
 2395              		.loc 1 2553 0
 2396 01c0 6B63     		str	r3, [r5, #52]
2556:../Dave/Generated/src/FEE001/FEE001.c ****      FLASH003_ClearStatus();
 2397              		.loc 1 2556 0
 2398 01c2 FFF7FEFF 		bl	FLASH003_ClearStatus
 2399              	.LVL273:
2559:../Dave/Generated/src/FEE001/FEE001.c ****                         (uint32_t*)(void*)StateDataPtr->FeeReadWriteBuffer);
 2400              		.loc 1 2559 0
 2401 01c6 291C     		mov	r1, r5
 2402 01c8 3C31     		add	r1, r1, #60
2558:../Dave/Generated/src/FEE001/FEE001.c ****      (void) FLASH003_ReadBlock((uint32_t)(StateDataPtr->FeeGcSrcAddr),
 2403              		.loc 1 2558 0
 2404 01ca 286A     		ldr	r0, [r5, #32]
 2405 01cc FFF7FEFF 		bl	FLASH003_ReadBlock
 2406              	.LVL274:
2563:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcState = FEE001_GC_COPY_WRITE;
 2407              		.loc 1 2563 0
 2408 01d0 0520     		mov	r0, #5
 2409 01d2 06E0     		b	.L240
 2410              	.LVL275:
 2411              	.L244:
2569:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeNextFreeBlockAddr = StateDataPtr->FeeGcDestAddr;
 2412              		.loc 1 2569 0
 2413 01d4 EA69     		ldr	r2, [r5, #28]
2570:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcSrcAddr = StateDataPtr->FeeCurrBankSrcAddr;
 2414              		.loc 1 2570 0
 2415 01d6 2B6B     		ldr	r3, [r5, #48]
 2416              	.LVL276:
2569:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeNextFreeBlockAddr = StateDataPtr->FeeGcDestAddr;
 2417              		.loc 1 2569 0
 2418 01d8 EA62     		str	r2, [r5, #44]
2570:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcSrcAddr = StateDataPtr->FeeCurrBankSrcAddr;
 2419              		.loc 1 2570 0
 2420 01da 2B62     		str	r3, [r5, #32]
2571:../Dave/Generated/src/FEE001/FEE001.c ****      Fee_lUpdateCurrBankInfo();
 2421              		.loc 1 2571 0
 2422 01dc FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 2423              	.LVL277:
2572:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcState = FEE001_GC_END_OF_COPY;
 2424              		.loc 1 2572 0
 2425 01e0 0620     		mov	r0, #6
 2426              	.LVL278:
 2427              	.L240:
 2428 01e2 AD22     		mov	r2, #173
 2429 01e4 5100     		lsl	r1, r2, #1
 2430 01e6 6854     		strb	r0, [r5, r1]
2574:../Dave/Generated/src/FEE001/FEE001.c ****   StateDataPtr->FeeGCLogBlkCount = BlockCount;
 2431              		.loc 1 2574 0
 2432 01e8 AE20     		mov	r0, #174
 2433 01ea 4300     		lsl	r3, r0, #1
 2434 01ec EE54     		strb	r6, [r5, r3]
 2435 01ee DCE7     		b	.L201
 2436              	.LVL279:
 2437              	.L200:
 2438              	.LBE24:
 2439              	.LBE27:
2494:../Dave/Generated/src/FEE001/FEE001.c **** }
 2440              		.loc 1 2494 0
 2441 01f0 05B0     		add	sp, sp, #20
 2442              		@ sp needed for prologue
 2443              	.LVL280:
 2444 01f2 F0BD     		pop	{r4, r5, r6, r7, pc}
 2445              	.L246:
 2446              		.align	2
 2447              	.L245:
 2448 01f4 00000000 		.word	FEE001_CfgPtr
 2449              		.cfi_endproc
 2450              	.LFE53:
 2452              		.section	.text.Fee_lInitDirtyStateMachine,"ax",%progbits
 2453              		.align	1
 2454              		.code	16
 2455              		.thumb_func
 2457              	Fee_lInitDirtyStateMachine:
 2458              	.LFB51:
1489:../Dave/Generated/src/FEE001/FEE001.c **** {
 2459              		.loc 1 1489 0
 2460              		.cfi_startproc
1493:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2461              		.loc 1 1493 0
 2462 0000 394B     		ldr	r3, .L277
1489:../Dave/Generated/src/FEE001/FEE001.c **** {
 2463              		.loc 1 1489 0
 2464 0002 70B5     		push	{r4, r5, r6, lr}
 2465              	.LCFI17:
 2466              		.cfi_def_cfa_offset 16
 2467              		.cfi_offset 4, -16
 2468              		.cfi_offset 5, -12
 2469              		.cfi_offset 6, -8
 2470              		.cfi_offset 14, -4
1493:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2471              		.loc 1 1493 0
 2472 0004 1868     		ldr	r0, [r3]
1495:../Dave/Generated/src/FEE001/FEE001.c ****    switch (StateDataPtr->FeeInitGCState)
 2473              		.loc 1 1495 0
 2474 0006 3949     		ldr	r1, .L277+4
1493:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2475              		.loc 1 1493 0
 2476 0008 0468     		ldr	r4, [r0]
 2477              	.LVL281:
1495:../Dave/Generated/src/FEE001/FEE001.c ****    switch (StateDataPtr->FeeInitGCState)
 2478              		.loc 1 1495 0
 2479 000a 625C     		ldrb	r2, [r4, r1]
 2480 000c AD2A     		cmp	r2, #173
 2481 000e 2ED0     		beq	.L251
 2482 0010 07D8     		bhi	.L255
 2483 0012 0D2A     		cmp	r2, #13
 2484 0014 46D0     		beq	.L249
 2485 0016 2D2A     		cmp	r2, #45
 2486 0018 63D1     		bne	.L248
1500:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 2487              		.loc 1 1500 0
 2488 001a 217E     		ldrb	r1, [r4, #24]
 2489 001c 0125     		mov	r5, #1
 2490 001e A943     		bic	r1, r5
 2491 0020 0CE0     		b	.L274
 2492              	.L255:
1495:../Dave/Generated/src/FEE001/FEE001.c ****    switch (StateDataPtr->FeeInitGCState)
 2493              		.loc 1 1495 0
 2494 0022 D22A     		cmp	r2, #210
 2495 0024 07D0     		beq	.L253
 2496 0026 DA2A     		cmp	r2, #218
 2497 0028 25D0     		beq	.L254
 2498 002a D02A     		cmp	r2, #208
 2499 002c 59D1     		bne	.L248
1700:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 2500              		.loc 1 1700 0
 2501 002e 237E     		ldrb	r3, [r4, #24]
 2502 0030 0120     		mov	r0, #1
 2503 0032 8343     		bic	r3, r0
 2504 0034 39E0     		b	.L271
 2505              	.L253:
1540:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 2506              		.loc 1 1540 0
 2507 0036 217E     		ldrb	r1, [r4, #24]
 2508 0038 0122     		mov	r2, #1
 2509 003a 1143     		orr	r1, r2
 2510              	.L274:
 2511 003c 2176     		strb	r1, [r4, #24]
1543:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 2512              		.loc 1 1543 0
 2513 003e FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 2514              	.LVL282:
1546:../Dave/Generated/src/FEE001/FEE001.c ****             Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
 2515              		.loc 1 1546 0
 2516 0042 A06A     		ldr	r0, [r4, #40]
 2517 0044 FFF7FEFF 		bl	Fee_lEraseBank
 2518              	.LVL283:
 2519 0048 AD25     		mov	r5, #173
 2520 004a 6D00     		lsl	r5, r5, #1
1548:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
 2521              		.loc 1 1548 0
 2522 004c 0028     		cmp	r0, #0
 2523 004e 0BD1     		bne	.L259
1550:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lSetMarkerBlockBuffer();
 2524              		.loc 1 1550 0
 2525 0050 FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 2526              	.LVL284:
1553:../Dave/Generated/src/FEE001/FEE001.c ****                  Status = Fee_lGCWrite((uint32_t)
 2527              		.loc 1 1553 0
 2528 0054 E069     		ldr	r0, [r4, #28]
 2529 0056 3030     		add	r0, r0, #48
 2530 0058 FFF7FEFF 		bl	Fee_lGCWrite
 2531              	.LVL285:
 2532 005c 061E     		sub	r6, r0, #0
 2533              	.LVL286:
1556:../Dave/Generated/src/FEE001/FEE001.c ****                  if(Status == FEE001_COMPLETE)
 2534              		.loc 1 1556 0
 2535 005e 03D1     		bne	.L259
1562:../Dave/Generated/src/FEE001/FEE001.c ****                    Fee_lUpdateCache();
 2536              		.loc 1 1562 0
 2537 0060 FFF7FEFF 		bl	Fee_lUpdateCache
 2538              	.LVL287:
1564:../Dave/Generated/src/FEE001/FEE001.c ****                    StateDataPtr->FeeGcState = FEE001_GC_IDLE;
 2539              		.loc 1 1564 0
 2540 0064 6655     		strb	r6, [r4, r5]
 2541 0066 3EE0     		b	.L247
 2542              	.LVL288:
 2543              	.L259:
1573:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 2544              		.loc 1 1573 0
 2545 0068 0923     		mov	r3, #9
 2546 006a 6355     		strb	r3, [r4, r5]
 2547 006c 3BE0     		b	.L247
 2548              	.L251:
1580:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 2549              		.loc 1 1580 0
 2550 006e 237E     		ldrb	r3, [r4, #24]
 2551 0070 0120     		mov	r0, #1
 2552 0072 8343     		bic	r3, r0
 2553 0074 02E0     		b	.L276
 2554              	.L254:
1620:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 2555              		.loc 1 1620 0
 2556 0076 237E     		ldrb	r3, [r4, #24]
 2557 0078 0120     		mov	r0, #1
 2558 007a 0343     		orr	r3, r0
 2559              	.L276:
 2560 007c 2376     		strb	r3, [r4, #24]
1623:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
 2561              		.loc 1 1623 0
 2562 007e FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 2563              	.LVL289:
1626:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_COPY_COMPLETED_STATE);
 2564              		.loc 1 1626 0
 2565 0082 0020     		mov	r0, #0
 2566 0084 FFF7FEFF 		bl	Fee_lSetMarkerPageBuffer
 2567              	.LVL290:
1629:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
 2568              		.loc 1 1629 0
 2569 0088 FFF7FEFF 		bl	FLASH003_ClearStatus
 2570              	.LVL291:
1635:../Dave/Generated/src/FEE001/FEE001.c ****              		        (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
 2571              		.loc 1 1635 0
 2572 008c 211C     		mov	r1, r4
 2573 008e 5031     		add	r1, r1, #80
1634:../Dave/Generated/src/FEE001/FEE001.c ****                            (StateDataPtr->FeeGcDestAddr,
 2574              		.loc 1 1634 0
 2575 0090 E069     		ldr	r0, [r4, #28]
 2576 0092 FFF7FEFF 		bl	FLASH003_ProgVerifyPage
 2577              	.LVL292:
 2578 0096 AD22     		mov	r2, #173
1637:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
 2579              		.loc 1 1637 0
 2580 0098 C1B2     		uxtb	r1, r0
 2581 009a 5500     		lsl	r5, r2, #1
1640:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID ;
 2582              		.loc 1 1640 0
 2583 009c 0726     		mov	r6, #7
1637:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
 2584              		.loc 1 1637 0
 2585 009e 0029     		cmp	r1, #0
 2586 00a0 1CD1     		bne	.L264
 2587 00a2 15E0     		b	.L267
 2588              	.LVL293:
 2589              	.L249:
1660:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 2590              		.loc 1 1660 0
 2591 00a4 237E     		ldrb	r3, [r4, #24]
 2592 00a6 0126     		mov	r6, #1
 2593 00a8 3343     		orr	r3, r6
 2594              	.L271:
1700:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 2595              		.loc 1 1700 0
 2596 00aa 2376     		strb	r3, [r4, #24]
1703:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
 2597              		.loc 1 1703 0
 2598 00ac FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 2599              	.LVL294:
1706:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_VALID_STATE);
 2600              		.loc 1 1706 0
 2601 00b0 2020     		mov	r0, #32
 2602 00b2 FFF7FEFF 		bl	Fee_lSetMarkerPageBuffer
 2603              	.LVL295:
1709:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
 2604              		.loc 1 1709 0
 2605 00b6 FFF7FEFF 		bl	FLASH003_ClearStatus
 2606              	.LVL296:
1715:../Dave/Generated/src/FEE001/FEE001.c ****               		       (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
 2607              		.loc 1 1715 0
 2608 00ba 211C     		mov	r1, r4
 2609 00bc 5031     		add	r1, r1, #80
1714:../Dave/Generated/src/FEE001/FEE001.c ****                            (StateDataPtr->FeeGcSrcAddr,
 2610              		.loc 1 1714 0
 2611 00be 206A     		ldr	r0, [r4, #32]
 2612 00c0 FFF7FEFF 		bl	FLASH003_ProgVerifyPage
 2613              	.LVL297:
 2614 00c4 AD22     		mov	r2, #173
1717:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
 2615              		.loc 1 1717 0
 2616 00c6 C1B2     		uxtb	r1, r0
 2617 00c8 5500     		lsl	r5, r2, #1
 2618 00ca 0029     		cmp	r1, #0
 2619 00cc 06D1     		bne	.L264
1720:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK ;
 2620              		.loc 1 1720 0
 2621 00ce 0326     		mov	r6, #3
 2622              	.LVL298:
 2623              	.L267:
 2624 00d0 6655     		strb	r6, [r4, r5]
1726:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCache();
 2625              		.loc 1 1726 0
 2626 00d2 FFF7FEFF 		bl	Fee_lUpdateCache
 2627              	.LVL299:
1729:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lGarbageCollection();
 2628              		.loc 1 1729 0
 2629 00d6 FFF7FEFF 		bl	Fee_lGarbageCollection
 2630              	.LVL300:
 2631 00da 04E0     		b	.L247
 2632              	.L264:
1733:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 2633              		.loc 1 1733 0
 2634 00dc 0926     		mov	r6, #9
 2635 00de 6655     		strb	r6, [r4, r5]
 2636 00e0 01E0     		b	.L247
 2637              	.L248:
1742:../Dave/Generated/src/FEE001/FEE001.c ****     	      Fee_lInitllegalStateMachine();
 2638              		.loc 1 1742 0
 2639 00e2 FFF7FEFF 		bl	Fee_lInitllegalStateMachine
 2640              	.LVL301:
 2641              	.L247:
1745:../Dave/Generated/src/FEE001/FEE001.c **** }
 2642              		.loc 1 1745 0
 2643              		@ sp needed for prologue
 2644              	.LVL302:
 2645 00e6 70BD     		pop	{r4, r5, r6, pc}
 2646              	.L278:
 2647              		.align	2
 2648              	.L277:
 2649 00e8 00000000 		.word	FEE001_CfgPtr
 2650 00ec 5B010000 		.word	347
 2651              		.cfi_endproc
 2652              	.LFE51:
 2654              		.section	.text.Fee_lLocalWrite,"ax",%progbits
 2655              		.align	1
 2656              		.code	16
 2657              		.thumb_func
 2659              	Fee_lLocalWrite:
 2660              	.LFB71:
3902:../Dave/Generated/src/FEE001/FEE001.c **** {
 2661              		.loc 1 3902 0
 2662              		.cfi_startproc
 2663              	.LVL303:
 2664 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2665              	.LCFI18:
 2666              		.cfi_def_cfa_offset 20
 2667              		.cfi_offset 4, -20
 2668              		.cfi_offset 5, -16
 2669              		.cfi_offset 6, -12
 2670              		.cfi_offset 7, -8
 2671              		.cfi_offset 14, -4
3913:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2672              		.loc 1 3913 0
 2673 0002 854F     		ldr	r7, .L322
3915:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeUserJobResult = FEE001_JOB_OK;
 2674              		.loc 1 3915 0
 2675 0004 8549     		ldr	r1, .L322+4
3913:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2676              		.loc 1 3913 0
 2677 0006 3E68     		ldr	r6, [r7]
3915:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeUserJobResult = FEE001_JOB_OK;
 2678              		.loc 1 3915 0
 2679 0008 0023     		mov	r3, #0
3913:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2680              		.loc 1 3913 0
 2681 000a 3468     		ldr	r4, [r6]
 2682              	.LVL304:
3902:../Dave/Generated/src/FEE001/FEE001.c **** {
 2683              		.loc 1 3902 0
 2684 000c 85B0     		sub	sp, sp, #20
 2685              	.LCFI19:
 2686              		.cfi_def_cfa_offset 40
3915:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeUserJobResult = FEE001_JOB_OK;
 2687              		.loc 1 3915 0
 2688 000e 6354     		strb	r3, [r4, r1]
 2689              	.LVL305:
3918:../Dave/Generated/src/FEE001/FEE001.c ****    UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
 2690              		.loc 1 3918 0
 2691 0010 207D     		ldrb	r0, [r4, #20]
 2692 0012 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 2693              	.LVL306:
3919:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
 2694              		.loc 1 3919 0
 2695 0016 7268     		ldr	r2, [r6, #4]
 2696 0018 8500     		lsl	r5, r0, #2
 2697 001a 5519     		add	r5, r2, r5
3918:../Dave/Generated/src/FEE001/FEE001.c ****    UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
 2698              		.loc 1 3918 0
 2699 001c 0090     		str	r0, [sp]
 2700              	.LVL307:
3921:../Dave/Generated/src/FEE001/FEE001.c ****    FlashBlocks = Fee_lGetDFLASHPhysicalBlocks((uint16_t)BlockPtr->Size);
 2701              		.loc 1 3921 0
 2702 001e 6888     		ldrh	r0, [r5, #2]
 2703 0020 FFF7FEFF 		bl	Fee_lGetDFLASHPhysicalBlocks
 2704              	.LVL308:
 2705 0024 0190     		str	r0, [sp, #4]
 2706              	.LVL309:
3922:../Dave/Generated/src/FEE001/FEE001.c ****    RemainingBlocks = Fee_lGetFreeDFLASHBlocks();
 2707              		.loc 1 3922 0
 2708 0026 FFF7FEFF 		bl	Fee_lGetFreeDFLASHBlocks
 2709              	.LVL310:
3924:../Dave/Generated/src/FEE001/FEE001.c ****    if(RemainingBlocks < FlashBlocks)
 2710              		.loc 1 3924 0
 2711 002a 019B     		ldr	r3, [sp, #4]
 2712 002c 9842     		cmp	r0, r3
 2713 002e 17D2     		bcs	.L280
3928:../Dave/Generated/src/FEE001/FEE001.c ****        if(FEE001_CfgPtr->FeeDisableGCStart == 0U)
 2714              		.loc 1 3928 0
 2715 0030 F07A     		ldrb	r0, [r6, #11]
 2716              	.LVL311:
 2717 0032 0028     		cmp	r0, #0
 2718 0034 00D0     		beq	.LCB2674
 2719 0036 E9E0     		b	.L281	@long jump
 2720              	.LCB2674:
3931:../Dave/Generated/src/FEE001/FEE001.c ****           StateDataPtr->FeeGcState = FEE001_GC_REQUESTED;
 2721              		.loc 1 3931 0
 2722 0038 AD26     		mov	r6, #173
 2723 003a 0421     		mov	r1, #4
 2724 003c 7600     		lsl	r6, r6, #1
 2725 003e A155     		strb	r1, [r4, r6]
3935:../Dave/Generated/src/FEE001/FEE001.c ****           Fee_lGarbageCollection();
 2726              		.loc 1 3935 0
 2727 0040 FFF7FEFF 		bl	Fee_lGarbageCollection
 2728              	.LVL312:
3940:../Dave/Generated/src/FEE001/FEE001.c ****           FlashBlocks = Fee_lGetDFLASHPhysicalBlocks
 2729              		.loc 1 3940 0
 2730 0044 6888     		ldrh	r0, [r5, #2]
 2731 0046 FFF7FEFF 		bl	Fee_lGetDFLASHPhysicalBlocks
 2732              	.LVL313:
 2733 004a 0190     		str	r0, [sp, #4]
 2734              	.LVL314:
3944:../Dave/Generated/src/FEE001/FEE001.c ****           RemainingBlocks = Fee_lGetFreeDFLASHBlocks();
 2735              		.loc 1 3944 0
 2736 004c FFF7FEFF 		bl	Fee_lGetFreeDFLASHBlocks
 2737              	.LVL315:
3949:../Dave/Generated/src/FEE001/FEE001.c ****           if((RemainingBlocks >= FlashBlocks)&&(StateDataPtr->FeeGcState ==
 2738              		.loc 1 3949 0
 2739 0050 019A     		ldr	r2, [sp, #4]
 2740 0052 9042     		cmp	r0, r2
 2741 0054 00D2     		bcs	.LCB2692
 2742 0056 D9E0     		b	.L281	@long jump
 2743              	.LCB2692:
3949:../Dave/Generated/src/FEE001/FEE001.c ****           if((RemainingBlocks >= FlashBlocks)&&(StateDataPtr->FeeGcState ==
 2744              		.loc 1 3949 0 is_stmt 0 discriminator 1
 2745 0058 A35D     		ldrb	r3, [r4, r6]
 2746 005a 002B     		cmp	r3, #0
 2747 005c 00D0     		beq	.LCB2695
 2748 005e D5E0     		b	.L281	@long jump
 2749              	.LCB2695:
 2750              	.L280:
 2751              	.LVL316:
3966:../Dave/Generated/src/FEE001/FEE001.c **** 	  StateDataPtr->FeeUserWriteBytesCount = 0U;
 2752              		.loc 1 3966 0 is_stmt 1
 2753 0060 A826     		mov	r6, #168
3965:../Dave/Generated/src/FEE001/FEE001.c **** 	  StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 2754              		.loc 1 3965 0
 2755 0062 0020     		mov	r0, #0
 2756              	.LVL317:
3966:../Dave/Generated/src/FEE001/FEE001.c **** 	  StateDataPtr->FeeUserWriteBytesCount = 0U;
 2757              		.loc 1 3966 0
 2758 0064 7100     		lsl	r1, r6, #1
 2759 0066 6052     		strh	r0, [r4, r1]
3965:../Dave/Generated/src/FEE001/FEE001.c **** 	  StateDataPtr->FeeWrittenDFlashBlocksCnt = 0U;
 2760              		.loc 1 3965 0
 2761 0068 A063     		str	r0, [r4, #56]
3969:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus == 1U)
 2762              		.loc 1 3969 0
 2763 006a 247E     		ldrb	r4, [r4, #24]
 2764              	.LVL318:
 2765 006c 6607     		lsl	r6, r4, #29
 2766 006e 30D5     		bpl	.L321
 2767              	.L303:
 2768              	.LVL319:
 2769              	.LBB34:
 2770              	.LBB35:
4187:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2771              		.loc 1 4187 0
 2772 0070 3C68     		ldr	r4, [r7]
4196:../Dave/Generated/src/FEE001/FEE001.c ****    *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = FEE001_START_BIT;
 2773              		.loc 1 4196 0
 2774 0072 8021     		mov	r1, #128
4187:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2775              		.loc 1 4187 0
 2776 0074 2468     		ldr	r4, [r4]
 2777              	.LVL320:
4190:../Dave/Generated/src/FEE001/FEE001.c ****    BlockNumber = StateDataPtr->FeePendReqInfo.BlockNumber;
 2778              		.loc 1 4190 0
 2779 0076 257D     		ldrb	r5, [r4, #20]
 2780              	.LVL321:
4189:../Dave/Generated/src/FEE001/FEE001.c ****    ReadWriteBuffPtr = StateDataPtr->FeeReadWriteBuffer;
 2781              		.loc 1 4189 0
 2782 0078 261C     		mov	r6, r4
4196:../Dave/Generated/src/FEE001/FEE001.c ****    *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = FEE001_START_BIT;
 2783              		.loc 1 4196 0
 2784 007a 271C     		mov	r7, r4
4189:../Dave/Generated/src/FEE001/FEE001.c ****    ReadWriteBuffPtr = StateDataPtr->FeeReadWriteBuffer;
 2785              		.loc 1 4189 0
 2786 007c 3C36     		add	r6, r6, #60
 2787              	.LVL322:
4196:../Dave/Generated/src/FEE001/FEE001.c ****    *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = FEE001_START_BIT;
 2788              		.loc 1 4196 0
 2789 007e 3D37     		add	r7, r7, #61
4195:../Dave/Generated/src/FEE001/FEE001.c ****    *(uint8_t *)(void *)(ReadWriteBuffPtr) = BlockNumber;
 2790              		.loc 1 4195 0
 2791 0080 3570     		strb	r5, [r6]
4196:../Dave/Generated/src/FEE001/FEE001.c ****    *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = FEE001_START_BIT;
 2792              		.loc 1 4196 0
 2793 0082 3970     		strb	r1, [r7]
 2794              	.LVL323:
 2795              	.L282:
3901:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lLocalWrite(void)
 2796              		.loc 1 3901 0
 2797 0084 2218     		add	r2, r4, r0
 2798 0086 3E32     		add	r2, r2, #62
4202:../Dave/Generated/src/FEE001/FEE001.c ****      *(uint8_t *)(void *)(ReadWriteBuffPtr + DataByteCnt) = FEE001_8BIT_ALL_ONE;
 2799              		.loc 1 4202 0
 2800 0088 FF23     		mov	r3, #255
 2801 008a 0130     		add	r0, r0, #1
 2802 008c 1370     		strb	r3, [r2]
4199:../Dave/Generated/src/FEE001/FEE001.c ****    for(DataByteCnt = 2U;DataByteCnt < FEE001_DFLASH_BLOCK_SIZE;
 2803              		.loc 1 4199 0
 2804 008e 0E28     		cmp	r0, #14
 2805 0090 F8D1     		bne	.L282
4206:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeBlockInfo[UserBlockIndex].Status.Consistent = 0U;
 2806              		.loc 1 4206 0
 2807 0092 0098     		ldr	r0, [sp]
 2808 0094 0221     		mov	r1, #2
 2809 0096 C700     		lsl	r7, r0, #3
 2810 0098 E319     		add	r3, r4, r7
 2811 009a 1A79     		ldrb	r2, [r3, #4]
4209:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeePendReqStatus = FEE001_WRITE_LAST_BLOCK_COMPLETED;
 2812              		.loc 1 4209 0
 2813 009c 604F     		ldr	r7, .L322+8
4206:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeBlockInfo[UserBlockIndex].Status.Consistent = 0U;
 2814              		.loc 1 4206 0
 2815 009e 8A43     		bic	r2, r1
 2816 00a0 1A71     		strb	r2, [r3, #4]
4212:../Dave/Generated/src/FEE001/FEE001.c ****               (StateDataPtr->FeeWrittenDFlashBlocksCnt *
 2817              		.loc 1 4212 0
 2818 00a2 A36B     		ldr	r3, [r4, #56]
4211:../Dave/Generated/src/FEE001/FEE001.c ****    SrcAddr = (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
 2819              		.loc 1 4211 0
 2820 00a4 E16A     		ldr	r1, [r4, #44]
4209:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeePendReqStatus = FEE001_WRITE_LAST_BLOCK_COMPLETED;
 2821              		.loc 1 4209 0
 2822 00a6 0420     		mov	r0, #4
 2823 00a8 E055     		strb	r0, [r4, r7]
4212:../Dave/Generated/src/FEE001/FEE001.c ****               (StateDataPtr->FeeWrittenDFlashBlocksCnt *
 2824              		.loc 1 4212 0
 2825 00aa 1A01     		lsl	r2, r3, #4
4215:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt = 1U;
 2826              		.loc 1 4215 0
 2827 00ac 0127     		mov	r7, #1
4211:../Dave/Generated/src/FEE001/FEE001.c ****    SrcAddr = (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
 2828              		.loc 1 4211 0
 2829 00ae 5018     		add	r0, r2, r1
4215:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt = 1U;
 2830              		.loc 1 4215 0
 2831 00b0 A763     		str	r7, [r4, #56]
4211:../Dave/Generated/src/FEE001/FEE001.c ****    SrcAddr = (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
 2832              		.loc 1 4211 0
 2833 00b2 0090     		str	r0, [sp]
 2834              	.LVL324:
4218:../Dave/Generated/src/FEE001/FEE001.c ****    FLASH003_ClearStatus();
 2835              		.loc 1 4218 0
 2836 00b4 FFF7FEFF 		bl	FLASH003_ClearStatus
 2837              	.LVL325:
4221:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = (uint32_t)FLASH003_WriteBlock((uint32_t)SrcAddr,
 2838              		.loc 1 4221 0
 2839 00b8 0098     		ldr	r0, [sp]
 2840 00ba 311C     		mov	r1, r6
 2841 00bc FFF7FEFF 		bl	FLASH003_WriteBlock
 2842              	.LVL326:
4225:../Dave/Generated/src/FEE001/FEE001.c ****    if(ReturnValue == 0U)
 2843              		.loc 1 4225 0
 2844 00c0 0028     		cmp	r0, #0
 2845 00c2 03D1     		bne	.L283
4228:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 2846              		.loc 1 4228 0
 2847 00c4 AC23     		mov	r3, #172
 2848 00c6 BB40     		lsl	r3, r3, r7
 2849 00c8 E554     		strb	r5, [r4, r3]
 2850 00ca 6AE0     		b	.L284
 2851              	.L283:
4232:../Dave/Generated/src/FEE001/FEE001.c **** 	   StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
 2852              		.loc 1 4232 0
 2853 00cc 534E     		ldr	r6, .L322+4
 2854              	.LVL327:
 2855 00ce A755     		strb	r7, [r4, r6]
 2856 00d0 67E0     		b	.L284
 2857              	.LVL328:
 2858              	.L321:
 2859              	.LBE35:
 2860              	.LBE34:
 2861              	.LBB36:
 2862              	.LBB37:
4031:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2863              		.loc 1 4031 0
 2864 00d2 3B68     		ldr	r3, [r7]
 2865              	.LBE37:
 2866              	.LBE36:
3976:../Dave/Generated/src/FEE001/FEE001.c ****          Fee_lHandleWriteReq((uint16_t)BlockPtr->Size,UserBlockIndex);
 2867              		.loc 1 3976 0
 2868 00d4 6A88     		ldrh	r2, [r5, #2]
 2869              	.LBB40:
 2870              	.LBB38:
4031:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 2871              		.loc 1 4031 0
 2872 00d6 1C68     		ldr	r4, [r3]
4032:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCRCBuffer = FEE001_DUMMY_CRC;
 2873              		.loc 1 4032 0
 2874 00d8 0127     		mov	r7, #1
 2875 00da 7D42     		neg	r5, r7
 2876              	.LVL329:
 2877              	.LBE38:
 2878              	.LBE40:
3976:../Dave/Generated/src/FEE001/FEE001.c ****          Fee_lHandleWriteReq((uint16_t)BlockPtr->Size,UserBlockIndex);
 2879              		.loc 1 3976 0
 2880 00dc 0192     		str	r2, [sp, #4]
 2881              	.LVL330:
 2882              	.LBB41:
 2883              	.LBB39:
4032:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeCRCBuffer = FEE001_DUMMY_CRC;
 2884              		.loc 1 4032 0
 2885 00de E564     		str	r5, [r4, #76]
 2886              	.L297:
4036:../Dave/Generated/src/FEE001/FEE001.c ****    ReadWriteBuffPtr = StateDataPtr->FeeReadWriteBuffer;
 2887              		.loc 1 4036 0
 2888 00e0 201C     		mov	r0, r4
 2889 00e2 3C30     		add	r0, r0, #60
 2890 00e4 0290     		str	r0, [sp, #8]
 2891              	.LVL331:
4038:../Dave/Generated/src/FEE001/FEE001.c ****    BlockNumber = StateDataPtr->FeePendReqInfo.BlockNumber;
 2892              		.loc 1 4038 0
 2893 00e6 267D     		ldrb	r6, [r4, #20]
4042:../Dave/Generated/src/FEE001/FEE001.c ****    *(uint8_t *)(void *)(ReadWriteBuffPtr) = BlockNumber;
 2894              		.loc 1 4042 0
 2895 00e8 6946     		mov	r1, sp
4038:../Dave/Generated/src/FEE001/FEE001.c ****    BlockNumber = StateDataPtr->FeePendReqInfo.BlockNumber;
 2896              		.loc 1 4038 0
 2897 00ea 0396     		str	r6, [sp, #12]
 2898              	.LVL332:
4042:../Dave/Generated/src/FEE001/FEE001.c ****    *(uint8_t *)(void *)(ReadWriteBuffPtr) = BlockNumber;
 2899              		.loc 1 4042 0
 2900 00ec 0C22     		mov	r2, #12
 2901 00ee 535C     		ldrb	r3, [r2, r1]
 2902 00f0 029F     		ldr	r7, [sp, #8]
4044:../Dave/Generated/src/FEE001/FEE001.c ****    if(*PendingRequestPtr == FEE001_WRITE_REQ_PENDING)
 2903              		.loc 1 4044 0
 2904 00f2 4B4D     		ldr	r5, .L322+8
4039:../Dave/Generated/src/FEE001/FEE001.c ****    DataBufferPtr = StateDataPtr->FeePendReqInfo.DataBufferPtr;
 2905              		.loc 1 4039 0
 2906 00f4 2669     		ldr	r6, [r4, #16]
 2907              	.LVL333:
4042:../Dave/Generated/src/FEE001/FEE001.c ****    *(uint8_t *)(void *)(ReadWriteBuffPtr) = BlockNumber;
 2908              		.loc 1 4042 0
 2909 00f6 3B70     		strb	r3, [r7]
4044:../Dave/Generated/src/FEE001/FEE001.c ****    if(*PendingRequestPtr == FEE001_WRITE_REQ_PENDING)
 2910              		.loc 1 4044 0
 2911 00f8 635D     		ldrb	r3, [r4, r5]
 2912 00fa 201C     		mov	r0, r4
 2913              	.LVL334:
 2914 00fc 3D30     		add	r0, r0, #61
 2915 00fe 022B     		cmp	r3, #2
 2916 0100 02D1     		bne	.L285
4046:../Dave/Generated/src/FEE001/FEE001.c ****       *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = FEE001_VALID_BIT;
 2917              		.loc 1 4046 0
 2918 0102 4027     		mov	r7, #64
 2919              	.LVL335:
 2920 0104 0770     		strb	r7, [r0]
 2921              	.LVL336:
 2922 0106 05E0     		b	.L310
 2923              	.LVL337:
 2924              	.L285:
4071:../Dave/Generated/src/FEE001/FEE001.c ****       	                              (uint16_t)StateDataPtr->FeeCRCBuffer;
 2925              		.loc 1 4071 0
 2926 0108 4C21     		mov	r1, #76
 2927 010a 0A5B     		ldrh	r2, [r1, r4]
4072:../Dave/Generated/src/FEE001/FEE001.c ****         *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = (FEE001_START_BIT |
 2928              		.loc 1 4072 0
 2929 010c C023     		mov	r3, #192
4071:../Dave/Generated/src/FEE001/FEE001.c ****       	                              (uint16_t)StateDataPtr->FeeCRCBuffer;
 2930              		.loc 1 4071 0
 2931 010e E287     		strh	r2, [r4, #62]
4072:../Dave/Generated/src/FEE001/FEE001.c ****         *(ReadWriteBuffPtr + FEE001_MARKER_OFFSET) = (FEE001_START_BIT |
 2932              		.loc 1 4072 0
 2933 0110 0370     		strb	r3, [r0]
 2934              	.LVL338:
4075:../Dave/Generated/src/FEE001/FEE001.c ****       DataByteCnt = 4U;
 2935              		.loc 1 4075 0
 2936 0112 0423     		mov	r3, #4
 2937              	.LVL339:
 2938              	.L310:
4081:../Dave/Generated/src/FEE001/FEE001.c ****        *(ReadWriteBuffPtr + DataByteCnt) = *(DataBufferPtr);
 2939              		.loc 1 4081 0
 2940 0114 3078     		ldrb	r0, [r6]
 2941 0116 E118     		add	r1, r4, r3
 2942 0118 3831     		add	r1, r1, #56
4084:../Dave/Generated/src/FEE001/FEE001.c ****        (StateDataPtr->FeeUserWriteBytesCount)++;
 2943              		.loc 1 4084 0
 2944 011a A822     		mov	r2, #168
 2945 011c 5700     		lsl	r7, r2, #1
4081:../Dave/Generated/src/FEE001/FEE001.c ****        *(ReadWriteBuffPtr + DataByteCnt) = *(DataBufferPtr);
 2946              		.loc 1 4081 0
 2947 011e 0871     		strb	r0, [r1, #4]
4084:../Dave/Generated/src/FEE001/FEE001.c ****        (StateDataPtr->FeeUserWriteBytesCount)++;
 2948              		.loc 1 4084 0
 2949 0120 E05B     		ldrh	r0, [r4, r7]
4082:../Dave/Generated/src/FEE001/FEE001.c ****        DataByteCnt++;
 2950              		.loc 1 4082 0
 2951 0122 0133     		add	r3, r3, #1
 2952              	.LVL340:
4084:../Dave/Generated/src/FEE001/FEE001.c ****        (StateDataPtr->FeeUserWriteBytesCount)++;
 2953              		.loc 1 4084 0
 2954 0124 0130     		add	r0, r0, #1
 2955 0126 82B2     		uxth	r2, r0
4082:../Dave/Generated/src/FEE001/FEE001.c ****        DataByteCnt++;
 2956              		.loc 1 4082 0
 2957 0128 9BB2     		uxth	r3, r3
 2958              	.LVL341:
4083:../Dave/Generated/src/FEE001/FEE001.c ****        (DataBufferPtr)++;
 2959              		.loc 1 4083 0
 2960 012a 0136     		add	r6, r6, #1
 2961              	.LVL342:
4084:../Dave/Generated/src/FEE001/FEE001.c ****        (StateDataPtr->FeeUserWriteBytesCount)++;
 2962              		.loc 1 4084 0
 2963 012c E253     		strh	r2, [r4, r7]
4086:../Dave/Generated/src/FEE001/FEE001.c ****    }while(( DataByteCnt != FEE001_DFLASH_BLOCK_SIZE) &&
 2964              		.loc 1 4086 0
 2965 012e 0199     		ldr	r1, [sp, #4]
4087:../Dave/Generated/src/FEE001/FEE001.c ****             ( StateDataPtr->FeeUserWriteBytesCount != BlkSize ));
 2966              		.loc 1 4087 0
 2967 0130 102B     		cmp	r3, #16
 2968 0132 02D0     		beq	.L287
4086:../Dave/Generated/src/FEE001/FEE001.c ****    }while(( DataByteCnt != FEE001_DFLASH_BLOCK_SIZE) &&
 2969              		.loc 1 4086 0
 2970 0134 8A42     		cmp	r2, r1
 2971 0136 EDD1     		bne	.L310
 2972 0138 01E0     		b	.L289
 2973              	.L287:
4090:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeUserWriteBytesCount == BlkSize)
 2974              		.loc 1 4090 0
 2975 013a 8A42     		cmp	r2, r1
 2976 013c 0AD1     		bne	.L290
 2977              	.L289:
4093:../Dave/Generated/src/FEE001/FEE001.c ****       *PendingRequestPtr = FEE001_WRITE_LAST_BLOCK_COMPLETED;
 2978              		.loc 1 4093 0
 2979 013e 0427     		mov	r7, #4
 2980 0140 6755     		strb	r7, [r4, r5]
 2981              	.LVL343:
 2982              	.L318:
4096:../Dave/Generated/src/FEE001/FEE001.c ****       if ( DataByteCnt != FEE001_DFLASH_BLOCK_SIZE)
 2983              		.loc 1 4096 0
 2984 0142 102B     		cmp	r3, #16
 2985 0144 08D0     		beq	.L292
 2986              	.LVL344:
4101:../Dave/Generated/src/FEE001/FEE001.c ****             *(ReadWriteBuffPtr + DataByteCnt) = FEE001_8BIT_ALL_ONE;
 2987              		.loc 1 4101 0
 2988 0146 E018     		add	r0, r4, r3
 2989 0148 3830     		add	r0, r0, #56
 2990 014a FF22     		mov	r2, #255
4102:../Dave/Generated/src/FEE001/FEE001.c ****             DataByteCnt++;
 2991              		.loc 1 4102 0
 2992 014c 0133     		add	r3, r3, #1
 2993              	.LVL345:
4101:../Dave/Generated/src/FEE001/FEE001.c ****             *(ReadWriteBuffPtr + DataByteCnt) = FEE001_8BIT_ALL_ONE;
 2994              		.loc 1 4101 0
 2995 014e 0271     		strb	r2, [r0, #4]
4102:../Dave/Generated/src/FEE001/FEE001.c ****             DataByteCnt++;
 2996              		.loc 1 4102 0
 2997 0150 9BB2     		uxth	r3, r3
 2998              	.LVL346:
 2999 0152 F6E7     		b	.L318
 3000              	.L290:
4109:../Dave/Generated/src/FEE001/FEE001.c ****       *PendingRequestPtr = FEE001_WRITE_REQ_PENDING;
 3001              		.loc 1 4109 0
 3002 0154 0223     		mov	r3, #2
 3003              	.LVL347:
 3004 0156 6355     		strb	r3, [r4, r5]
 3005              	.L292:
4113:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeBlockInfo[UserBlockIndex].Status.Consistent = 0U;
 3006              		.loc 1 4113 0
 3007 0158 0098     		ldr	r0, [sp]
 3008 015a 0221     		mov	r1, #2
 3009 015c C200     		lsl	r2, r0, #3
 3010 015e A318     		add	r3, r4, r2
 3011 0160 1F79     		ldrb	r7, [r3, #4]
 3012 0162 8F43     		bic	r7, r1
 3013 0164 1F71     		strb	r7, [r3, #4]
4116:../Dave/Generated/src/FEE001/FEE001.c ****           (StateDataPtr->FeeWrittenDFlashBlocksCnt * FEE001_DFLASH_BLOCK_SIZE));
 3014              		.loc 1 4116 0
 3015 0166 A06B     		ldr	r0, [r4, #56]
4115:../Dave/Generated/src/FEE001/FEE001.c ****    SrcAddr = (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
 3016              		.loc 1 4115 0
 3017 0168 E36A     		ldr	r3, [r4, #44]
4116:../Dave/Generated/src/FEE001/FEE001.c ****           (StateDataPtr->FeeWrittenDFlashBlocksCnt * FEE001_DFLASH_BLOCK_SIZE));
 3018              		.loc 1 4116 0
 3019 016a 0201     		lsl	r2, r0, #4
4119:../Dave/Generated/src/FEE001/FEE001.c ****                              StateDataPtr->FeeWrittenDFlashBlocksCnt + 1U;
 3020              		.loc 1 4119 0
 3021 016c 0130     		add	r0, r0, #1
4115:../Dave/Generated/src/FEE001/FEE001.c ****    SrcAddr = (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
 3022              		.loc 1 4115 0
 3023 016e D718     		add	r7, r2, r3
 3024              	.LVL348:
4118:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr->FeeWrittenDFlashBlocksCnt =
 3025              		.loc 1 4118 0
 3026 0170 A063     		str	r0, [r4, #56]
4129:../Dave/Generated/src/FEE001/FEE001.c ****    FLASH003_ClearStatus();
 3027              		.loc 1 4129 0
 3028 0172 FFF7FEFF 		bl	FLASH003_ClearStatus
 3029              	.LVL349:
4132:../Dave/Generated/src/FEE001/FEE001.c ****    ReturnValue = (status_t)FLASH003_WriteBlock((uint32_t)SrcAddr,
 3030              		.loc 1 4132 0
 3031 0176 381C     		mov	r0, r7
 3032 0178 0299     		ldr	r1, [sp, #8]
 3033 017a FFF7FEFF 		bl	FLASH003_WriteBlock
 3034              	.LVL350:
4136:../Dave/Generated/src/FEE001/FEE001.c ****    if(ReturnValue == 0U)
 3035              		.loc 1 4136 0
 3036 017e 0028     		cmp	r0, #0
 3037 0180 07D1     		bne	.L295
4139:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.DataBufferPtr = DataBufferPtr;
 3038              		.loc 1 4139 0
 3039 0182 2661     		str	r6, [r4, #16]
4142:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 3040              		.loc 1 4142 0
 3041 0184 6F46     		mov	r7, sp
 3042              	.LVL351:
 3043 0186 0C26     		mov	r6, #12
 3044              	.LVL352:
 3045 0188 AC22     		mov	r2, #172
 3046 018a F15D     		ldrb	r1, [r6, r7]
 3047 018c 5300     		lsl	r3, r2, #1
 3048 018e E154     		strb	r1, [r4, r3]
 3049 0190 04E0     		b	.L296
 3050              	.LVL353:
 3051              	.L295:
4150:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
 3052              		.loc 1 4150 0
 3053 0192 2248     		ldr	r0, .L322+4
 3054              	.LVL354:
4148:../Dave/Generated/src/FEE001/FEE001.c ****     *PendingRequestPtr = FEE001_WRITE_LAST_BLOCK_COMPLETED;
 3055              		.loc 1 4148 0
 3056 0194 0426     		mov	r6, #4
 3057              	.LVL355:
4150:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
 3058              		.loc 1 4150 0
 3059 0196 0121     		mov	r1, #1
4148:../Dave/Generated/src/FEE001/FEE001.c ****     *PendingRequestPtr = FEE001_WRITE_LAST_BLOCK_COMPLETED;
 3060              		.loc 1 4148 0
 3061 0198 6655     		strb	r6, [r4, r5]
4150:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
 3062              		.loc 1 4150 0
 3063 019a 2154     		strb	r1, [r4, r0]
 3064              	.LVL356:
 3065              	.L296:
4153:../Dave/Generated/src/FEE001/FEE001.c ****  }while (*PendingRequestPtr != FEE001_WRITE_LAST_BLOCK_COMPLETED);
 3066              		.loc 1 4153 0
 3067 019c 655D     		ldrb	r5, [r4, r5]
 3068 019e 042D     		cmp	r5, #4
 3069 01a0 9ED1     		bne	.L297
 3070              	.LVL357:
 3071              	.L284:
 3072              	.LBE39:
 3073              	.LBE41:
 3074              	.LBB42:
 3075              	.LBB43:
4259:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 3076              		.loc 1 4259 0
 3077 01a2 1D4C     		ldr	r4, .L322
4261:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeUserJobResult == FEE001_JOB_FAIL)
 3078              		.loc 1 4261 0
 3079 01a4 1D4A     		ldr	r2, .L322+4
4259:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 3080              		.loc 1 4259 0
 3081 01a6 2568     		ldr	r5, [r4]
 3082 01a8 2C68     		ldr	r4, [r5]
 3083              	.LVL358:
4261:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeUserJobResult == FEE001_JOB_FAIL)
 3084              		.loc 1 4261 0
 3085 01aa A15C     		ldrb	r1, [r4, r2]
 3086 01ac 0129     		cmp	r1, #1
 3087 01ae 0DD1     		bne	.L298
4264:../Dave/Generated/src/FEE001/FEE001.c ****        if(StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus == 1U)
 3088              		.loc 1 4264 0
 3089 01b0 217E     		ldrb	r1, [r4, #24]
 3090 01b2 0420     		mov	r0, #4
 3091 01b4 0142     		tst	r1, r0
 3092 01b6 01D0     		beq	.L299
4266:../Dave/Generated/src/FEE001/FEE001.c ****           StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 0U; /*FALSE*/
 3093              		.loc 1 4266 0
 3094 01b8 8143     		bic	r1, r0
 3095 01ba 2176     		strb	r1, [r4, #24]
 3096              	.L299:
4275:../Dave/Generated/src/FEE001/FEE001.c ****                                   * FEE001_DFLASH_BLOCK_SIZE));
 3097              		.loc 1 4275 0
 3098 01bc A56B     		ldr	r5, [r4, #56]
4273:../Dave/Generated/src/FEE001/FEE001.c ****                              (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
 3099              		.loc 1 4273 0
 3100 01be E76A     		ldr	r7, [r4, #44]
4275:../Dave/Generated/src/FEE001/FEE001.c ****                                   * FEE001_DFLASH_BLOCK_SIZE));
 3101              		.loc 1 4275 0
 3102 01c0 2A01     		lsl	r2, r5, #4
4269:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
 3103              		.loc 1 4269 0
 3104 01c2 0123     		mov	r3, #1
4273:../Dave/Generated/src/FEE001/FEE001.c ****                              (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
 3105              		.loc 1 4273 0
 3106 01c4 BE18     		add	r6, r7, r2
4269:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
 3107              		.loc 1 4269 0
 3108 01c6 A376     		strb	r3, [r4, #26]
4272:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeNextFreeBlockAddr =
 3109              		.loc 1 4272 0
 3110 01c8 E662     		str	r6, [r4, #44]
 3111 01ca 23E0     		b	.L279
 3112              	.L298:
4280:../Dave/Generated/src/FEE001/FEE001.c ****     BlockIndex = Fee_lGetUsrBlockIndex(StateDataPtr->FeeCurrReqBlockNum);
 3113              		.loc 1 4280 0
 3114 01cc AC20     		mov	r0, #172
 3115 01ce 4700     		lsl	r7, r0, #1
 3116 01d0 E05D     		ldrb	r0, [r4, r7]
 3117 01d2 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 3118              	.LVL359:
4283:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeBlockInfo[BlockIndex].Status.Consistent = 1U;
 3119              		.loc 1 4283 0
 3120 01d6 C600     		lsl	r6, r0, #3
 3121 01d8 A319     		add	r3, r4, r6
 3122 01da 1D79     		ldrb	r5, [r3, #4]
 3123 01dc 0222     		mov	r2, #2
 3124 01de 1543     		orr	r5, r2
 3125 01e0 1D71     		strb	r5, [r3, #4]
4285:../Dave/Generated/src/FEE001/FEE001.c ****                                             StateDataPtr->FeeNextFreeBlockAddr;
 3126              		.loc 1 4285 0
 3127 01e2 E76A     		ldr	r7, [r4, #44]
 3128 01e4 0120     		mov	r0, #1
 3129              	.LVL360:
4284:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeBlockInfo[BlockIndex].Address =
 3130              		.loc 1 4284 0
 3131 01e6 3751     		str	r7, [r6, r4]
4288:../Dave/Generated/src/FEE001/FEE001.c ****     if(StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus == 1U)
 3132              		.loc 1 4288 0
 3133 01e8 267E     		ldrb	r6, [r4, #24]
 3134 01ea 1979     		ldrb	r1, [r3, #4]
 3135 01ec 7607     		lsl	r6, r6, #29
 3136 01ee 01D4     		bmi	.L319
 3137              	.L301:
4307:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeBlockInfo[BlockIndex].Status.Crc = 0U;
 3138              		.loc 1 4307 0
 3139 01f0 0143     		orr	r1, r0
 3140 01f2 0820     		mov	r0, #8
 3141              	.L319:
 3142 01f4 8143     		bic	r1, r0
 3143 01f6 1971     		strb	r1, [r3, #4]
4314:../Dave/Generated/src/FEE001/FEE001.c ****           (StateDataPtr->FeeWrittenDFlashBlocksCnt * FEE001_DFLASH_BLOCK_SIZE));
 3144              		.loc 1 4314 0
 3145 01f8 A36B     		ldr	r3, [r4, #56]
4316:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 0U;
 3146              		.loc 1 4316 0
 3147 01fa 0426     		mov	r6, #4
4314:../Dave/Generated/src/FEE001/FEE001.c ****           (StateDataPtr->FeeWrittenDFlashBlocksCnt * FEE001_DFLASH_BLOCK_SIZE));
 3148              		.loc 1 4314 0
 3149 01fc 1D01     		lsl	r5, r3, #4
4313:../Dave/Generated/src/FEE001/FEE001.c ****           (uint32_t)(StateDataPtr->FeeNextFreeBlockAddr +
 3150              		.loc 1 4313 0
 3151 01fe EA19     		add	r2, r5, r7
4316:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 0U;
 3152              		.loc 1 4316 0
 3153 0200 277E     		ldrb	r7, [r4, #24]
4312:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeNextFreeBlockAddr =
 3154              		.loc 1 4312 0
 3155 0202 E262     		str	r2, [r4, #44]
4316:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 0U;
 3156              		.loc 1 4316 0
 3157 0204 B743     		bic	r7, r6
 3158 0206 2776     		strb	r7, [r4, #24]
4317:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeJobResult = FEE001_JOB_OK;
 3159              		.loc 1 4317 0
 3160 0208 0027     		mov	r7, #0
 3161 020a 02E0     		b	.L320
 3162              	.LVL361:
 3163              	.L281:
 3164              	.LBE43:
 3165              	.LBE42:
3984:../Dave/Generated/src/FEE001/FEE001.c **** 	   StateDataPtr->FeeUserJobResult = FEE001_JOB_FAIL;
 3166              		.loc 1 3984 0
 3167 020c 034D     		ldr	r5, .L322+4
 3168              	.LVL362:
 3169 020e 0127     		mov	r7, #1
 3170 0210 6755     		strb	r7, [r4, r5]
 3171              	.LVL363:
 3172              	.L320:
3986:../Dave/Generated/src/FEE001/FEE001.c ****        StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
 3173              		.loc 1 3986 0
 3174 0212 A776     		strb	r7, [r4, #26]
 3175              	.L279:
3988:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of Fee_lLocalWrite */
 3176              		.loc 1 3988 0
 3177 0214 05B0     		add	sp, sp, #20
 3178              	.LVL364:
 3179              		@ sp needed for prologue
 3180 0216 F0BD     		pop	{r4, r5, r6, r7, pc}
 3181              	.L323:
 3182              		.align	2
 3183              	.L322:
 3184 0218 00000000 		.word	FEE001_CfgPtr
 3185 021c 63010000 		.word	355
 3186 0220 59010000 		.word	345
 3187              		.cfi_endproc
 3188              	.LFE71:
 3190              		.section	.text.FEE001_Init,"ax",%progbits
 3191              		.align	1
 3192              		.global	FEE001_Init
 3193              		.code	16
 3194              		.thumb_func
 3196              	FEE001_Init:
 3197              	.LFB38:
 337:../Dave/Generated/src/FEE001/FEE001.c **** {
 3198              		.loc 1 337 0
 3199              		.cfi_startproc
 341:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 3200              		.loc 1 341 0
 3201 0000 CF4B     		ldr	r3, .L394
 337:../Dave/Generated/src/FEE001/FEE001.c **** {
 3202              		.loc 1 337 0
 3203 0002 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 3204              	.LCFI20:
 3205              		.cfi_def_cfa_offset 32
 3206              		.cfi_offset 0, -32
 3207              		.cfi_offset 1, -28
 3208              		.cfi_offset 2, -24
 3209              		.cfi_offset 4, -20
 3210              		.cfi_offset 5, -16
 3211              		.cfi_offset 6, -12
 3212              		.cfi_offset 7, -8
 3213              		.cfi_offset 14, -4
 341:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 3214              		.loc 1 341 0
 3215 0004 1A68     		ldr	r2, [r3]
 344:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 3216              		.loc 1 344 0
 3217 0006 0023     		mov	r3, #0
 341:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 3218              		.loc 1 341 0
 3219 0008 1568     		ldr	r5, [r2]
 3220              	.LVL365:
 344:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 3221              		.loc 1 344 0
 3222 000a 297E     		ldrb	r1, [r5, #24]
 3223 000c 8807     		lsl	r0, r1, #30
 3224 000e 00D5     		bpl	.LCB3151
 3225 0010 D2E1     		b	.L324	@long jump
 3226              	.LCB3151:
 3227              	.L374:
 3228              	.LVL366:
 3229              	.LBB51:
 355:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr = &(StateDataPtr->FeeBlockInfo[Index]);
 3230              		.loc 1 355 0 discriminator 1
 3231 0012 D800     		lsl	r0, r3, #3
 3232 0014 2818     		add	r0, r5, r0
 3233              	.LVL367:
 358:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Consistent = 0U; 
 3234              		.loc 1 358 0 discriminator 1
 3235 0016 0679     		ldrb	r6, [r0, #4]
 359:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Valid = 1U;      
 3236              		.loc 1 359 0 discriminator 1
 3237 0018 0227     		mov	r7, #2
 3238 001a BE43     		bic	r6, r7
 3239 001c 0121     		mov	r1, #1
 361:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Crc = 0U;
 3240              		.loc 1 361 0 discriminator 1
 3241 001e 0427     		mov	r7, #4
 360:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Copied = 0U;
 3242              		.loc 1 360 0 discriminator 1
 3243 0020 0E43     		orr	r6, r1
 361:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Crc = 0U;
 3244              		.loc 1 361 0 discriminator 1
 3245 0022 BE43     		bic	r6, r7
 3246 0024 0827     		mov	r7, #8
 357:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Address = 0U;
 3247              		.loc 1 357 0 discriminator 1
 3248 0026 0024     		mov	r4, #0
 361:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Crc = 0U;
 3249              		.loc 1 361 0 discriminator 1
 3250 0028 BE43     		bic	r6, r7
 357:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Address = 0U;
 3251              		.loc 1 357 0 discriminator 1
 3252 002a 0460     		str	r4, [r0]
 361:../Dave/Generated/src/FEE001/FEE001.c ****       BlockPtr->Status.Crc = 0U;
 3253              		.loc 1 361 0 discriminator 1
 3254 002c 0671     		strb	r6, [r0, #4]
 362:../Dave/Generated/src/FEE001/FEE001.c ****       Index++;
 3255              		.loc 1 362 0 discriminator 1
 3256 002e 5B18     		add	r3, r3, r1
 3257              	.LVL368:
 3258              	.LBE51:
 363:../Dave/Generated/src/FEE001/FEE001.c ****     }while(Index < FEE001_CfgPtr->FeeBlkCnt);
 3259              		.loc 1 363 0 discriminator 1
 3260 0030 107A     		ldrb	r0, [r2, #8]
 3261              	.LVL369:
 3262              	.LBB52:
 362:../Dave/Generated/src/FEE001/FEE001.c ****       Index++;
 3263              		.loc 1 362 0 discriminator 1
 3264 0032 9BB2     		uxth	r3, r3
 3265              	.LVL370:
 3266              	.LBE52:
 363:../Dave/Generated/src/FEE001/FEE001.c ****     }while(Index < FEE001_CfgPtr->FeeBlkCnt);
 3267              		.loc 1 363 0 discriminator 1
 3268 0034 9842     		cmp	r0, r3
 3269 0036 ECD8     		bhi	.L374
 367:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCacheUpdateIndex = 0U;
 3270              		.loc 1 367 0
 3271 0038 C24E     		ldr	r6, .L394+4
 370:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 3272              		.loc 1 370 0
 3273 003a C348     		ldr	r0, .L394+8
 369:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCacheState = FEE001_CACHE_IDLE;
 3274              		.loc 1 369 0
 3275 003c AF23     		mov	r3, #175
 3276              	.LVL371:
 3277 003e 8B40     		lsl	r3, r3, r1
 370:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 3278              		.loc 1 370 0
 3279 0040 2954     		strb	r1, [r5, r0]
 367:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCacheUpdateIndex = 0U;
 3280              		.loc 1 367 0
 3281 0042 AC55     		strb	r4, [r5, r6]
 369:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCacheState = FEE001_CACHE_IDLE;
 3282              		.loc 1 369 0
 3283 0044 EC54     		strb	r4, [r5, r3]
 371:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcState = FEE001_GC_IDLE;
 3284              		.loc 1 371 0
 3285 0046 AD26     		mov	r6, #173
 372:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeInitGCState = 0U;
 3286              		.loc 1 372 0
 3287 0048 C04B     		ldr	r3, .L394+12
 373:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGCLogBlkCount = 0U;
 3288              		.loc 1 373 0
 3289 004a AE20     		mov	r0, #174
 371:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcState = FEE001_GC_IDLE;
 3290              		.loc 1 371 0
 3291 004c 8E40     		lsl	r6, r6, r1
 373:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGCLogBlkCount = 0U;
 3292              		.loc 1 373 0
 3293 004e 8840     		lsl	r0, r0, r1
 371:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcState = FEE001_GC_IDLE;
 3294              		.loc 1 371 0
 3295 0050 AC55     		strb	r4, [r5, r6]
 373:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGCLogBlkCount = 0U;
 3296              		.loc 1 373 0
 3297 0052 2C54     		strb	r4, [r5, r0]
 372:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeInitGCState = 0U;
 3298              		.loc 1 372 0
 3299 0054 EC54     		strb	r4, [r5, r3]
 377:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCurrReqBlockNum = 0U;
 3300              		.loc 1 377 0
 3301 0056 AC26     		mov	r6, #172
 379:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserReadDestPtr = (uint8_t*)NULL_PTR;
 3302              		.loc 1 379 0
 3303 0058 2B1C     		mov	r3, r5
 384:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserWriteBytesCount = 0U;
 3304              		.loc 1 384 0
 3305 005a A820     		mov	r0, #168
 377:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCurrReqBlockNum = 0U;
 3306              		.loc 1 377 0
 3307 005c 8E40     		lsl	r6, r6, r1
 379:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserReadDestPtr = (uint8_t*)NULL_PTR;
 3308              		.loc 1 379 0
 3309 005e FC33     		add	r3, r3, #252
 384:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserWriteBytesCount = 0U;
 3310              		.loc 1 384 0
 3311 0060 8840     		lsl	r0, r0, r1
 377:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCurrReqBlockNum = 0U;
 3312              		.loc 1 377 0
 3313 0062 AC55     		strb	r4, [r5, r6]
 379:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserReadDestPtr = (uint8_t*)NULL_PTR;
 3314              		.loc 1 379 0
 3315 0064 9C65     		str	r4, [r3, #88]
 384:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeUserWriteBytesCount = 0U;
 3316              		.loc 1 384 0
 3317 0066 2C52     		strh	r4, [r5, r0]
 386:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeBlkInvalidStatus = 0U;
 3318              		.loc 1 386 0
 3319 0068 2B7E     		ldrb	r3, [r5, #24]
 387:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeWriteInvldAPICalled = 0U;
 3320              		.loc 1 387 0
 3321 006a 0426     		mov	r6, #4
 3322 006c B343     		bic	r3, r6
 388:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3323              		.loc 1 388 0
 3324 006e BB43     		bic	r3, r7
 3325 0070 8B43     		bic	r3, r1
 3326 0072 2B76     		strb	r3, [r5, #24]
 3327              	.LBB53:
 3328              	.LBB54:
3447:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 3329              		.loc 1 3447 0
 3330 0074 1668     		ldr	r6, [r2]
 3331              	.LVL372:
3451:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeDirtyCount[0U] = 0U;
 3332              		.loc 1 3451 0
 3333 0076 B022     		mov	r2, #176
 3334 0078 8A40     		lsl	r2, r2, r1
3452:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeDirtyCount[1U] = 0U;
 3335              		.loc 1 3452 0
 3336 007a B549     		ldr	r1, .L394+16
3451:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeDirtyCount[0U] = 0U;
 3337              		.loc 1 3451 0
 3338 007c B454     		strb	r4, [r6, r2]
 3339              	.LBE54:
 3340              	.LBE53:
 368:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeJobResult = FEE001_JOB_OK;
 3341              		.loc 1 368 0
 3342 007e AC76     		strb	r4, [r5, #26]
 374:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCRCBuffer = 0U;
 3343              		.loc 1 374 0
 3344 0080 EC64     		str	r4, [r5, #76]
 376:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeWrittenDFlashBlocksCnt = (uint32_t)0;
 3345              		.loc 1 376 0
 3346 0082 AC63     		str	r4, [r5, #56]
 378:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeCurrBankSrcAddr = 0U;
 3347              		.loc 1 378 0
 3348 0084 2C63     		str	r4, [r5, #48]
 380:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcSrcAddr = 0U;
 3349              		.loc 1 380 0
 3350 0086 2C62     		str	r4, [r5, #32]
 381:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGcDestAddr = 0U;
 3351              		.loc 1 381 0
 3352 0088 EC61     		str	r4, [r5, #28]
 382:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeNextFreeBlockAddr = 0U;
 3353              		.loc 1 382 0
 3354 008a EC62     		str	r4, [r5, #44]
 383:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr->FeeGCDFlashBlocks = (uint32_t)0;
 3355              		.loc 1 383 0
 3356 008c 6C63     		str	r4, [r5, #52]
 3357              	.LBB57:
 3358              	.LBB55:
3452:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeDirtyCount[1U] = 0U;
 3359              		.loc 1 3452 0
 3360 008e 7454     		strb	r4, [r6, r1]
 3361              	.LVL373:
3454:../Dave/Generated/src/FEE001/FEE001.c ****      StateMarkerCnt = 0U;
 3362              		.loc 1 3454 0
 3363 0090 271C     		mov	r7, r4
 3364              	.LVL374:
 3365              	.L332:
3458:../Dave/Generated/src/FEE001/FEE001.c ****         TmpBankStateVal = (uint8_t)(TmpBankStateVal << 1U);
 3366              		.loc 1 3458 0
 3367 0092 6400     		lsl	r4, r4, #1
 3368              	.LVL375:
 3369 0094 E4B2     		uxtb	r4, r4
 3370              	.LVL376:
3460:../Dave/Generated/src/FEE001/FEE001.c ****         if(StateMarkerCnt < 4U)
 3371              		.loc 1 3460 0
 3372 0096 032F     		cmp	r7, #3
 3373 0098 02D8     		bhi	.L327
3463:../Dave/Generated/src/FEE001/FEE001.c ****            TmpStateMarkerVal = Fee_lReadVerifyMarker((uint8_t)0,
 3374              		.loc 1 3463 0
 3375 009a 0020     		mov	r0, #0
 3376 009c 391C     		mov	r1, r7
 3377 009e 02E0     		b	.L381
 3378              	.L327:
 336:../Dave/Generated/src/FEE001/FEE001.c **** void FEE001_Init(void)
 3379              		.loc 1 336 0
 3380 00a0 381F     		sub	r0, r7, #4
3469:../Dave/Generated/src/FEE001/FEE001.c ****            TmpStateMarkerVal = Fee_lReadVerifyMarker((uint8_t)1,
 3381              		.loc 1 3469 0
 3382 00a2 C1B2     		uxtb	r1, r0
 3383 00a4 0120     		mov	r0, #1
 3384              	.L381:
 3385 00a6 FFF7FEFF 		bl	Fee_lReadVerifyMarker
 3386              	.LVL377:
3473:../Dave/Generated/src/FEE001/FEE001.c ****         switch(TmpStateMarkerVal)
 3387              		.loc 1 3473 0
 3388 00aa 0028     		cmp	r0, #0
 3389 00ac 0BD0     		beq	.L330
 3390 00ae 0128     		cmp	r0, #1
 3391 00b0 02D1     		bne	.L380
3481:../Dave/Generated/src/FEE001/FEE001.c ****              TmpBankStateVal = TmpBankStateVal | (uint8_t)0x1U;
 3392              		.loc 1 3481 0
 3393 00b2 0443     		orr	r4, r0
 3394              	.LVL378:
 3395 00b4 E4B2     		uxtb	r4, r4
 3396              	.LVL379:
 3397 00b6 06E0     		b	.L330
 3398              	.L380:
 3399              	.LVL380:
3489:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeDirtyCount[Index]++;
 3400              		.loc 1 3489 0
 3401 00b8 BB08     		lsr	r3, r7, #2
 3402 00ba F118     		add	r1, r6, r3
 3403 00bc 6131     		add	r1, r1, #97
 3404 00be FF31     		add	r1, r1, #255
 3405 00c0 0A78     		ldrb	r2, [r1]
 3406 00c2 0132     		add	r2, r2, #1
 3407 00c4 0A70     		strb	r2, [r1]
 3408              	.LVL381:
 3409              	.L330:
3494:../Dave/Generated/src/FEE001/FEE001.c ****         StateMarkerCnt++;
 3410              		.loc 1 3494 0
 3411 00c6 0137     		add	r7, r7, #1
 3412              	.LVL382:
 3413 00c8 FFB2     		uxtb	r7, r7
 3414              	.LVL383:
3496:../Dave/Generated/src/FEE001/FEE001.c ****      } while(StateMarkerCnt < 8U);
 3415              		.loc 1 3496 0
 3416 00ca 082F     		cmp	r7, #8
 3417 00cc E1D1     		bne	.L332
3499:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeInitGCState = TmpBankStateVal;
 3418              		.loc 1 3499 0
 3419 00ce 9F4A     		ldr	r2, .L394+12
 3420              	.LBE55:
 3421              	.LBE57:
 3422              	.LBB58:
 3423              	.LBB59:
1382:../Dave/Generated/src/FEE001/FEE001.c ****     if( (StateDataPtr->FeeDirtyCount[0U]) && (StateDataPtr->FeeDirtyCount[1U]) )
 3424              		.loc 1 1382 0
 3425 00d0 B023     		mov	r3, #176
 3426              	.LBE59:
 3427              	.LBE58:
 3428              	.LBB63:
 3429              	.LBB56:
3499:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeInitGCState = TmpBankStateVal;
 3430              		.loc 1 3499 0
 3431 00d2 B454     		strb	r4, [r6, r2]
 3432              	.LBE56:
 3433              	.LBE63:
 3434              	.LBB64:
 3435              	.LBB62:
1380:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 3436              		.loc 1 1380 0
 3437 00d4 9A4E     		ldr	r6, .L394
 3438              	.LVL384:
1382:../Dave/Generated/src/FEE001/FEE001.c ****     if( (StateDataPtr->FeeDirtyCount[0U]) && (StateDataPtr->FeeDirtyCount[1U]) )
 3439              		.loc 1 1382 0
 3440 00d6 5900     		lsl	r1, r3, #1
1380:../Dave/Generated/src/FEE001/FEE001.c ****     StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 3441              		.loc 1 1380 0
 3442 00d8 3068     		ldr	r0, [r6]
 3443              	.LVL385:
 3444 00da 0468     		ldr	r4, [r0]
 3445              	.LVL386:
1382:../Dave/Generated/src/FEE001/FEE001.c ****     if( (StateDataPtr->FeeDirtyCount[0U]) && (StateDataPtr->FeeDirtyCount[1U]) )
 3446              		.loc 1 1382 0
 3447 00dc 665C     		ldrb	r6, [r4, r1]
 3448 00de 002E     		cmp	r6, #0
 3449 00e0 0CD0     		beq	.L333
 3450 00e2 9B49     		ldr	r1, .L394+16
 3451 00e4 635C     		ldrb	r3, [r4, r1]
 3452 00e6 002B     		cmp	r3, #0
 3453 00e8 02D0     		beq	.L334
1384:../Dave/Generated/src/FEE001/FEE001.c ****         StateDataPtr->FeeInitGCState = 0xDDU;
 3454              		.loc 1 1384 0
 3455 00ea DD20     		mov	r0, #221
 3456 00ec A054     		strb	r0, [r4, r2]
 3457 00ee 53E1     		b	.L337
 3458              	.L334:
1391:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState &= 0x0FU;
 3459              		.loc 1 1391 0
 3460 00f0 A75C     		ldrb	r7, [r4, r2]
 3461              	.LVL387:
 3462 00f2 0F23     		mov	r3, #15
1392:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState |= 0xD0U;
 3463              		.loc 1 1392 0
 3464 00f4 3026     		mov	r6, #48
1391:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState &= 0x0FU;
 3465              		.loc 1 1391 0
 3466 00f6 3B40     		and	r3, r7
1392:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState |= 0xD0U;
 3467              		.loc 1 1392 0
 3468 00f8 7042     		neg	r0, r6
 3469 00fa 08E0     		b	.L382
 3470              	.LVL388:
 3471              	.L333:
1397:../Dave/Generated/src/FEE001/FEE001.c ****     else if( StateDataPtr->FeeDirtyCount[1U] )
 3472              		.loc 1 1397 0
 3473 00fc 9448     		ldr	r0, .L394+16
 3474 00fe 215C     		ldrb	r1, [r4, r0]
 3475 0100 0191     		str	r1, [sp, #4]
 3476 0102 A35C     		ldrb	r3, [r4, r2]
 3477 0104 0029     		cmp	r1, #0
 3478 0106 07D0     		beq	.L336
1399:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState &= 0xF0U;
 3479              		.loc 1 1399 0
 3480 0108 0F26     		mov	r6, #15
 3481 010a B343     		bic	r3, r6
1400:../Dave/Generated/src/FEE001/FEE001.c ****     	StateDataPtr->FeeInitGCState |= 0x0DU;
 3482              		.loc 1 1400 0
 3483 010c 0D20     		mov	r0, #13
 3484              	.LVL389:
 3485              	.L382:
 3486 010e 0343     		orr	r3, r0
 3487 0110 A354     		strb	r3, [r4, r2]
1402:../Dave/Generated/src/FEE001/FEE001.c ****     	Fee_lInitDirtyStateMachine();
 3488              		.loc 1 1402 0
 3489 0112 FFF7FEFF 		bl	Fee_lInitDirtyStateMachine
 3490              	.LVL390:
 3491 0116 41E1     		b	.L335
 3492              	.LVL391:
 3493              	.L336:
 3494 0118 AD22     		mov	r2, #173
 3495 011a 5600     		lsl	r6, r2, #1
 3496              	.LBB60:
 3497              	.LBB61:
1773:../Dave/Generated/src/FEE001/FEE001.c ****      switch (StateDataPtr->FeeInitGCState)
 3498              		.loc 1 1773 0
 3499 011c 7F2B     		cmp	r3, #127
 3500 011e 00D1     		bne	.LCB3400
 3501 0120 B6E0     		b	.L346	@long jump
 3502              	.LCB3400:
 3503 0122 20D8     		bhi	.L355
 3504 0124 202B     		cmp	r3, #32
 3505 0126 68D0     		beq	.L341
 3506 0128 10D8     		bhi	.L356
 3507 012a 0A2B     		cmp	r3, #10
 3508 012c 00D1     		bne	.LCB3408
 3509 012e 9DE0     		b	.L339	@long jump
 3510              	.LCB3408:
 3511 0130 0F2B     		cmp	r3, #15
 3512 0132 00D1     		bne	.LCB3410
 3513 0134 EEE0     		b	.L340	@long jump
 3514              	.LCB3410:
 3515 0136 022B     		cmp	r3, #2
 3516 0138 00D0     		beq	.LCB3412
 3517 013a 2DE1     		b	.L337	@long jump
 3518              	.LCB3412:
2026:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 3519              		.loc 1 2026 0
 3520 013c 277E     		ldrb	r7, [r4, #24]
 3521              	.LVL392:
 3522 013e 0120     		mov	r0, #1
 3523 0140 0743     		orr	r7, r0
 3524 0142 2776     		strb	r7, [r4, #24]
2029:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3525              		.loc 1 2029 0
 3526 0144 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3527              	.LVL393:
2032:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK;
 3528              		.loc 1 2032 0
 3529 0148 0326     		mov	r6, #3
 3530 014a 96E0     		b	.L388
 3531              	.LVL394:
 3532              	.L356:
1773:../Dave/Generated/src/FEE001/FEE001.c ****      switch (StateDataPtr->FeeInitGCState)
 3533              		.loc 1 1773 0
 3534 014c 2E2B     		cmp	r3, #46
 3535 014e 2BD0     		beq	.L343
 3536 0150 03D8     		bhi	.L357
 3537 0152 2A2B     		cmp	r3, #42
 3538 0154 00D0     		beq	.LCB3433
 3539 0156 1FE1     		b	.L337	@long jump
 3540              	.LCB3433:
 3541 0158 32E0     		b	.L392
 3542              	.L357:
 3543 015a 2F2B     		cmp	r3, #47
 3544 015c 54D0     		beq	.L344
 3545 015e 3F2B     		cmp	r3, #63
 3546 0160 00D0     		beq	.LCB3441
 3547 0162 19E1     		b	.L337	@long jump
 3548              	.LCB3441:
 3549 0164 9CE0     		b	.L345
 3550              	.L355:
 3551 0166 E22B     		cmp	r3, #226
 3552 0168 57D0     		beq	.L350
 3553 016a 0FD8     		bhi	.L358
 3554 016c A22B     		cmp	r3, #162
 3555 016e 60D0     		beq	.L348
 3556 0170 AF2B     		cmp	r3, #175
 3557 0172 00D1     		bne	.LCB3453
 3558 0174 A2E0     		b	.L349	@long jump
 3559              	.LCB3453:
 3560 0176 A02B     		cmp	r3, #160
 3561 0178 00D0     		beq	.LCB3455
 3562 017a 0DE1     		b	.L337	@long jump
 3563              	.LCB3455:
1856:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3564              		.loc 1 1856 0
 3565 017c 267E     		ldrb	r6, [r4, #24]
 3566 017e 0120     		mov	r0, #1
 3567 0180 8643     		bic	r6, r0
 3568 0182 2676     		strb	r6, [r4, #24]
1859:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3569              		.loc 1 1859 0
 3570 0184 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3571              	.LVL395:
1862:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID ;
 3572              		.loc 1 1862 0
 3573 0188 0726     		mov	r6, #7
 3574 018a 76E0     		b	.L388
 3575              	.L358:
1773:../Dave/Generated/src/FEE001/FEE001.c ****      switch (StateDataPtr->FeeInitGCState)
 3576              		.loc 1 1773 0
 3577 018c F22B     		cmp	r3, #242
 3578 018e 77D0     		beq	.L352
 3579 0190 03D8     		bhi	.L359
 3580 0192 F02B     		cmp	r3, #240
 3581 0194 00D0     		beq	.LCB3474
 3582 0196 FFE0     		b	.L337	@long jump
 3583              	.LCB3474:
 3584 0198 DFE0     		b	.L393
 3585              	.L359:
 3586 019a FA2B     		cmp	r3, #250
 3587 019c 00D1     		bne	.LCB3480
 3588 019e A2E0     		b	.L353	@long jump
 3589              	.LCB3480:
 3590 01a0 FF2B     		cmp	r3, #255
 3591 01a2 00D0     		beq	.LCB3482
 3592 01a4 F8E0     		b	.L337	@long jump
 3593              	.LCB3482:
 3594 01a6 7BE0     		b	.L345
 3595              	.L343:
1782:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3596              		.loc 1 1782 0
 3597 01a8 277E     		ldrb	r7, [r4, #24]
 3598              	.LVL396:
 3599 01aa 0122     		mov	r2, #1
 3600 01ac 9743     		bic	r7, r2
 3601 01ae 2776     		strb	r7, [r4, #24]
1785:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3602              		.loc 1 1785 0
 3603 01b0 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3604              	.LVL397:
1791:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
 3605              		.loc 1 1791 0
 3606 01b4 FFF7FEFF 		bl	Fee_lUpdateCache
 3607              	.LVL398:
1795:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_IDLE;
 3608              		.loc 1 1795 0
 3609 01b8 6846     		mov	r0, sp
 3610 01ba 0179     		ldrb	r1, [r0, #4]
 3611 01bc A155     		strb	r1, [r4, r6]
 3612 01be EDE0     		b	.L335
 3613              	.LVL399:
 3614              	.L392:
1806:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3615              		.loc 1 1806 0
 3616 01c0 217E     		ldrb	r1, [r4, #24]
 3617 01c2 0123     		mov	r3, #1
 3618 01c4 9943     		bic	r1, r3
 3619 01c6 2176     		strb	r1, [r4, #24]
1809:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3620              		.loc 1 1809 0
 3621 01c8 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3622              	.LVL400:
1812:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_REQUESTED ;
 3623              		.loc 1 1812 0
 3624 01cc 0420     		mov	r0, #4
 3625 01ce AD22     		mov	r2, #173
 3626 01d0 A055     		strb	r0, [r4, r6]
 3627 01d2 5700     		lsl	r7, r2, #1
 3628              	.LVL401:
1818:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
 3629              		.loc 1 1818 0
 3630 01d4 FFF7FEFF 		bl	Fee_lUpdateCache
 3631              	.LVL402:
1821:../Dave/Generated/src/FEE001/FEE001.c ****             Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
 3632              		.loc 1 1821 0
 3633 01d8 A06A     		ldr	r0, [r4, #40]
 3634 01da FFF7FEFF 		bl	Fee_lEraseBank
 3635              	.LVL403:
1823:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
 3636              		.loc 1 1823 0
 3637 01de 0028     		cmp	r0, #0
 3638 01e0 08D1     		bne	.L360
1825:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lSetMarkerBlockBuffer();
 3639              		.loc 1 1825 0
 3640 01e2 FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 3641              	.LVL404:
1828:../Dave/Generated/src/FEE001/FEE001.c ****                  Status = Fee_lGCWrite((uint32_t)
 3642              		.loc 1 1828 0
 3643 01e6 E069     		ldr	r0, [r4, #28]
 3644 01e8 3030     		add	r0, r0, #48
 3645 01ea FFF7FEFF 		bl	Fee_lGCWrite
 3646              	.LVL405:
1832:../Dave/Generated/src/FEE001/FEE001.c ****                  if(Status == FEE001_COMPLETE)
 3647              		.loc 1 1832 0
 3648 01ee 0028     		cmp	r0, #0
 3649 01f0 00D1     		bne	.LCB3536
 3650 01f2 CBE0     		b	.L385	@long jump
 3651              	.LCB3536:
 3652              	.LVL406:
 3653              	.L360:
1845:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 3654              		.loc 1 1845 0
 3655 01f4 0926     		mov	r6, #9
 3656 01f6 E655     		strb	r6, [r4, r7]
 3657 01f8 D0E0     		b	.L335
 3658              	.LVL407:
 3659              	.L341:
1881:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3660              		.loc 1 1881 0
 3661 01fa 237E     		ldrb	r3, [r4, #24]
 3662 01fc 0127     		mov	r7, #1
 3663              	.LVL408:
 3664 01fe BB43     		bic	r3, r7
 3665 0200 2376     		strb	r3, [r4, #24]
1884:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3666              		.loc 1 1884 0
 3667 0202 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3668              	.LVL409:
 3669 0206 98E0     		b	.L390
 3670              	.LVL410:
 3671              	.L344:
1906:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3672              		.loc 1 1906 0
 3673 0208 217E     		ldrb	r1, [r4, #24]
 3674 020a 0123     		mov	r3, #1
 3675 020c 9943     		bic	r1, r3
 3676 020e 2176     		strb	r1, [r4, #24]
1909:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3677              		.loc 1 1909 0
 3678 0210 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3679              	.LVL411:
1912:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_MARK_END_ERASE1;
 3680              		.loc 1 1912 0
 3681 0214 0822     		mov	r2, #8
 3682              	.LVL412:
 3683              	.L389:
 3684 0216 A255     		strb	r2, [r4, r6]
 3685 0218 B6E0     		b	.L384
 3686              	.LVL413:
 3687              	.L350:
1932:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 3688              		.loc 1 1932 0
 3689 021a 277E     		ldrb	r7, [r4, #24]
 3690              	.LVL414:
 3691 021c 0120     		mov	r0, #1
 3692 021e 0743     		orr	r7, r0
 3693 0220 2776     		strb	r7, [r4, #24]
1935:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3694              		.loc 1 1935 0
 3695 0222 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3696              	.LVL415:
1941:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
 3697              		.loc 1 1941 0
 3698 0226 FFF7FEFF 		bl	Fee_lUpdateCache
 3699              	.LVL416:
1945:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_IDLE;
 3700              		.loc 1 1945 0
 3701 022a 6A46     		mov	r2, sp
 3702 022c 1179     		ldrb	r1, [r2, #4]
 3703 022e A155     		strb	r1, [r4, r6]
 3704 0230 B4E0     		b	.L335
 3705              	.LVL417:
 3706              	.L348:
1955:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 3707              		.loc 1 1955 0
 3708 0232 207E     		ldrb	r0, [r4, #24]
 3709 0234 0121     		mov	r1, #1
 3710 0236 0843     		orr	r0, r1
 3711 0238 2076     		strb	r0, [r4, #24]
1958:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3712              		.loc 1 1958 0
 3713 023a FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3714              	.LVL418:
1961:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_REQUESTED;
 3715              		.loc 1 1961 0
 3716 023e 0423     		mov	r3, #4
 3717 0240 A355     		strb	r3, [r4, r6]
1967:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
 3718              		.loc 1 1967 0
 3719 0242 FFF7FEFF 		bl	Fee_lUpdateCache
 3720              	.LVL419:
1970:../Dave/Generated/src/FEE001/FEE001.c ****             Status = Fee_lEraseBank(StateDataPtr->FeePrevBankEndAddr);
 3721              		.loc 1 1970 0
 3722 0246 A06A     		ldr	r0, [r4, #40]
 3723 0248 FFF7FEFF 		bl	Fee_lEraseBank
 3724              	.LVL420:
1972:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
 3725              		.loc 1 1972 0
 3726 024c 0028     		cmp	r0, #0
 3727 024e 00D0     		beq	.LCB3618
 3728 0250 80E0     		b	.L366	@long jump
 3729              	.LCB3618:
1974:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lSetMarkerBlockBuffer();
 3730              		.loc 1 1974 0
 3731 0252 FFF7FEFF 		bl	Fee_lSetMarkerBlockBuffer
 3732              	.LVL421:
1977:../Dave/Generated/src/FEE001/FEE001.c ****                  Status = Fee_lGCWrite((uint32_t)
 3733              		.loc 1 1977 0
 3734 0256 E069     		ldr	r0, [r4, #28]
 3735 0258 3030     		add	r0, r0, #48
 3736 025a FFF7FEFF 		bl	Fee_lGCWrite
 3737              	.LVL422:
1980:../Dave/Generated/src/FEE001/FEE001.c ****                  if(Status == FEE001_COMPLETE)
 3738              		.loc 1 1980 0
 3739 025e 0028     		cmp	r0, #0
 3740 0260 00D1     		bne	.LCB3629
 3741 0262 93E0     		b	.L385	@long jump
 3742              	.LCB3629:
1987:../Dave/Generated/src/FEE001/FEE001.c ****                     StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 3743              		.loc 1 1987 0
 3744 0264 AD26     		mov	r6, #173
 3745 0266 0922     		mov	r2, #9
 3746 0268 7700     		lsl	r7, r6, #1
 3747              	.LVL423:
 3748 026a 93E0     		b	.L386
 3749              	.LVL424:
 3750              	.L339:
2002:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 3751              		.loc 1 2002 0
 3752 026c 277E     		ldrb	r7, [r4, #24]
 3753              	.LVL425:
 3754 026e 0120     		mov	r0, #1
 3755 0270 0743     		orr	r7, r0
 3756 0272 2776     		strb	r7, [r4, #24]
2005:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3757              		.loc 1 2005 0
 3758 0274 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3759              	.LVL426:
 3760 0278 33E0     		b	.L391
 3761              	.L388:
2032:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK;
 3762              		.loc 1 2032 0
 3763 027a AD21     		mov	r1, #173
 3764 027c 4F00     		lsl	r7, r1, #1
 3765 027e 82E0     		b	.L383
 3766              	.LVL427:
 3767              	.L352:
2050:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 3768              		.loc 1 2050 0
 3769 0280 217E     		ldrb	r1, [r4, #24]
 3770 0282 0123     		mov	r3, #1
 3771 0284 1943     		orr	r1, r3
 3772 0286 2176     		strb	r1, [r4, #24]
2053:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3773              		.loc 1 2053 0
 3774 0288 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3775              	.LVL428:
2056:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_GC_MARK_END_ERASE1;
 3776              		.loc 1 2056 0
 3777 028c A755     		strb	r7, [r4, r6]
 3778 028e 7BE0     		b	.L384
 3779              	.L346:
2101:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3780              		.loc 1 2101 0
 3781 0290 237E     		ldrb	r3, [r4, #24]
 3782 0292 0127     		mov	r7, #1
 3783              	.LVL429:
 3784 0294 BB43     		bic	r3, r7
 3785 0296 2376     		strb	r3, [r4, #24]
2104:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3786              		.loc 1 2104 0
 3787 0298 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3788              	.LVL430:
2107:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_FF;
 3789              		.loc 1 2107 0
 3790 029c A755     		strb	r7, [r4, r6]
 3791 029e 08E0     		b	.L387
 3792              	.LVL431:
 3793              	.L345:
2127:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3794              		.loc 1 2127 0
 3795 02a0 207E     		ldrb	r0, [r4, #24]
 3796 02a2 0127     		mov	r7, #1
 3797              	.LVL432:
 3798 02a4 B843     		bic	r0, r7
 3799 02a6 2076     		strb	r0, [r4, #24]
2130:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3800              		.loc 1 2130 0
 3801 02a8 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3802              	.LVL433:
2133:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeGcState = FEE001_PREPDFLASH_MARK_FF;
 3803              		.loc 1 2133 0
 3804 02ac AD22     		mov	r2, #173
 3805 02ae BA40     		lsl	r2, r2, r7
 3806 02b0 A754     		strb	r7, [r4, r2]
 3807              	.L387:
2136:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lPrepareDFlash();
 3808              		.loc 1 2136 0
 3809 02b2 FFF7FEFF 		bl	Fee_lPrepareDFlash
 3810              	.LVL434:
2142:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCache();
 3811              		.loc 1 2142 0
 3812 02b6 FFF7FEFF 		bl	Fee_lUpdateCache
 3813              	.LVL435:
 3814 02ba 6FE0     		b	.L335
 3815              	.LVL436:
 3816              	.L349:
2153:../Dave/Generated/src/FEE001/FEE001.c ****             StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3817              		.loc 1 2153 0
 3818 02bc 237E     		ldrb	r3, [r4, #24]
 3819 02be 0127     		mov	r7, #1
 3820              	.LVL437:
 3821 02c0 BB43     		bic	r3, r7
 3822 02c2 2376     		strb	r3, [r4, #24]
2156:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lUpdateCurrBankInfo();
 3823              		.loc 1 2156 0
 3824 02c4 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3825              	.LVL438:
2159:../Dave/Generated/src/FEE001/FEE001.c ****             Fee_lSetMarkerPageBuffer(FEE001_COPY_COMPLETED_STATE);
 3826              		.loc 1 2159 0
 3827 02c8 0198     		ldr	r0, [sp, #4]
 3828 02ca FFF7FEFF 		bl	Fee_lSetMarkerPageBuffer
 3829              	.LVL439:
2162:../Dave/Generated/src/FEE001/FEE001.c ****             FLASH003_ClearStatus();
 3830              		.loc 1 2162 0
 3831 02ce FFF7FEFF 		bl	FLASH003_ClearStatus
 3832              	.LVL440:
2168:../Dave/Generated/src/FEE001/FEE001.c ****              		       (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
 3833              		.loc 1 2168 0
 3834 02d2 211C     		mov	r1, r4
 3835 02d4 5031     		add	r1, r1, #80
2167:../Dave/Generated/src/FEE001/FEE001.c ****                           (StateDataPtr->FeeGcDestAddr,
 3836              		.loc 1 2167 0
 3837 02d6 E069     		ldr	r0, [r4, #28]
 3838 02d8 FFF7FEFF 		bl	FLASH003_ProgVerifyPage
 3839              	.LVL441:
2170:../Dave/Generated/src/FEE001/FEE001.c ****             if(Status == FEE001_COMPLETE)
 3840              		.loc 1 2170 0
 3841 02dc C2B2     		uxtb	r2, r0
 3842 02de 002A     		cmp	r2, #0
 3843 02e0 38D1     		bne	.L366
 3844              	.LVL442:
 3845              	.L391:
2173:../Dave/Generated/src/FEE001/FEE001.c ****                 StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID ;
 3846              		.loc 1 2173 0
 3847 02e2 0722     		mov	r2, #7
 3848 02e4 97E7     		b	.L389
 3849              	.LVL443:
 3850              	.L353:
2193:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 3851              		.loc 1 2193 0
 3852 02e6 217E     		ldrb	r1, [r4, #24]
 3853 02e8 0123     		mov	r3, #1
 3854 02ea 1943     		orr	r1, r3
 3855 02ec 2176     		strb	r1, [r4, #24]
2196:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
 3856              		.loc 1 2196 0
 3857 02ee FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3858              	.LVL444:
2199:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_COPY_COMPLETED_STATE);
 3859              		.loc 1 2199 0
 3860 02f2 0020     		mov	r0, #0
 3861 02f4 FFF7FEFF 		bl	Fee_lSetMarkerPageBuffer
 3862              	.LVL445:
2202:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
 3863              		.loc 1 2202 0
 3864 02f8 FFF7FEFF 		bl	FLASH003_ClearStatus
 3865              	.LVL446:
2208:../Dave/Generated/src/FEE001/FEE001.c ****              		       (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
 3866              		.loc 1 2208 0
 3867 02fc 211C     		mov	r1, r4
 3868 02fe 5031     		add	r1, r1, #80
2207:../Dave/Generated/src/FEE001/FEE001.c ****                            (StateDataPtr->FeeGcDestAddr,
 3869              		.loc 1 2207 0
 3870 0300 E069     		ldr	r0, [r4, #28]
 3871 0302 FFF7FEFF 		bl	FLASH003_ProgVerifyPage
 3872              	.LVL447:
 3873 0306 AD26     		mov	r6, #173
2210:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
 3874              		.loc 1 2210 0
 3875 0308 C0B2     		uxtb	r0, r0
 3876              	.LVL448:
 3877 030a 7700     		lsl	r7, r6, #1
 3878              	.LVL449:
2213:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_MARK_NEXT_BANK_VALID ;
 3879              		.loc 1 2213 0
 3880 030c 0726     		mov	r6, #7
2210:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
 3881              		.loc 1 2210 0
 3882 030e 0028     		cmp	r0, #0
 3883 0310 3FD1     		bne	.L367
 3884 0312 38E0     		b	.L383
 3885              	.LVL450:
 3886              	.L340:
2233:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 1U;
 3887              		.loc 1 2233 0
 3888 0314 217E     		ldrb	r1, [r4, #24]
 3889 0316 0123     		mov	r3, #1
 3890 0318 1943     		orr	r1, r3
 3891 031a 2176     		strb	r1, [r4, #24]
2236:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
 3892              		.loc 1 2236 0
 3893 031c FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3894              	.LVL451:
2239:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_VALID_STATE);
 3895              		.loc 1 2239 0
 3896 0320 2020     		mov	r0, #32
 3897 0322 FFF7FEFF 		bl	Fee_lSetMarkerPageBuffer
 3898              	.LVL452:
2242:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
 3899              		.loc 1 2242 0
 3900 0326 FFF7FEFF 		bl	FLASH003_ClearStatus
 3901              	.LVL453:
2248:../Dave/Generated/src/FEE001/FEE001.c ****               		       (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
 3902              		.loc 1 2248 0
 3903 032a 211C     		mov	r1, r4
 3904 032c 5031     		add	r1, r1, #80
2247:../Dave/Generated/src/FEE001/FEE001.c ****                          (StateDataPtr->FeeGcSrcAddr,
 3905              		.loc 1 2247 0
 3906 032e 206A     		ldr	r0, [r4, #32]
 3907 0330 FFF7FEFF 		bl	FLASH003_ProgVerifyPage
 3908              	.LVL454:
2250:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
 3909              		.loc 1 2250 0
 3910 0334 C2B2     		uxtb	r2, r0
 3911 0336 002A     		cmp	r2, #0
 3912 0338 0CD1     		bne	.L366
 3913              	.LVL455:
 3914              	.L390:
2253:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK ;
 3915              		.loc 1 2253 0
 3916 033a 0322     		mov	r2, #3
 3917 033c 6BE7     		b	.L389
 3918              	.L395:
 3919 033e C046     		.align	2
 3920              	.L394:
 3921 0340 00000000 		.word	FEE001_CfgPtr
 3922 0344 5F010000 		.word	351
 3923 0348 59010000 		.word	345
 3924 034c 5B010000 		.word	347
 3925 0350 61010000 		.word	353
 3926              	.L366:
2266:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 3927              		.loc 1 2266 0
 3928 0354 0927     		mov	r7, #9
 3929 0356 A755     		strb	r7, [r4, r6]
 3930 0358 20E0     		b	.L335
 3931              	.LVL456:
 3932              	.L393:
2273:../Dave/Generated/src/FEE001/FEE001.c ****              StateDataPtr->FeeStatusFlags.FeeCurrBank = 0U;
 3933              		.loc 1 2273 0
 3934 035a 207E     		ldrb	r0, [r4, #24]
 3935 035c 0122     		mov	r2, #1
 3936 035e 9043     		bic	r0, r2
 3937 0360 2076     		strb	r0, [r4, #24]
2276:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lUpdateCurrBankInfo();
 3938              		.loc 1 2276 0
 3939 0362 FFF7FEFF 		bl	Fee_lUpdateCurrBankInfo
 3940              	.LVL457:
2279:../Dave/Generated/src/FEE001/FEE001.c ****              Fee_lSetMarkerPageBuffer(FEE001_VALID_STATE);
 3941              		.loc 1 2279 0
 3942 0366 2020     		mov	r0, #32
 3943 0368 FFF7FEFF 		bl	Fee_lSetMarkerPageBuffer
 3944              	.LVL458:
2282:../Dave/Generated/src/FEE001/FEE001.c ****              FLASH003_ClearStatus();
 3945              		.loc 1 2282 0
 3946 036c FFF7FEFF 		bl	FLASH003_ClearStatus
 3947              	.LVL459:
2288:../Dave/Generated/src/FEE001/FEE001.c ****               		      (uint32_t*)(void*)StateDataPtr->FeePageWriteBuffer);
 3948              		.loc 1 2288 0
 3949 0370 211C     		mov	r1, r4
 3950 0372 5031     		add	r1, r1, #80
2287:../Dave/Generated/src/FEE001/FEE001.c ****                            (StateDataPtr->FeeGcSrcAddr,
 3951              		.loc 1 2287 0
 3952 0374 206A     		ldr	r0, [r4, #32]
 3953 0376 FFF7FEFF 		bl	FLASH003_ProgVerifyPage
 3954              	.LVL460:
 3955 037a AD23     		mov	r3, #173
2290:../Dave/Generated/src/FEE001/FEE001.c ****              if(Status == FEE001_COMPLETE)
 3956              		.loc 1 2290 0
 3957 037c C1B2     		uxtb	r1, r0
 3958 037e 5F00     		lsl	r7, r3, #1
 3959              	.LVL461:
 3960 0380 0029     		cmp	r1, #0
 3961 0382 06D1     		bne	.L367
2293:../Dave/Generated/src/FEE001/FEE001.c ****                  StateDataPtr->FeeGcState = FEE001_GC_ERASE_PREV_BANK ;
 3962              		.loc 1 2293 0
 3963 0384 0326     		mov	r6, #3
 3964              	.LVL462:
 3965              	.L383:
 3966 0386 E655     		strb	r6, [r4, r7]
 3967              	.L384:
2299:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lUpdateCache();
 3968              		.loc 1 2299 0
 3969 0388 FFF7FEFF 		bl	Fee_lUpdateCache
 3970              	.LVL463:
 3971              	.L385:
2302:../Dave/Generated/src/FEE001/FEE001.c ****                  Fee_lGarbageCollection();
 3972              		.loc 1 2302 0
 3973 038c FFF7FEFF 		bl	Fee_lGarbageCollection
 3974              	.LVL464:
 3975 0390 04E0     		b	.L335
 3976              	.L367:
2306:../Dave/Generated/src/FEE001/FEE001.c ****                   StateDataPtr->FeeGcState = FEE001_GC_FAIL;
 3977              		.loc 1 2306 0
 3978 0392 0922     		mov	r2, #9
 3979              	.L386:
 3980 0394 E255     		strb	r2, [r4, r7]
 3981 0396 01E0     		b	.L335
 3982              	.LVL465:
 3983              	.L337:
2312:../Dave/Generated/src/FEE001/FEE001.c ****          	Fee_lInitllegalStateMachine();
 3984              		.loc 1 2312 0
 3985 0398 FFF7FEFF 		bl	Fee_lInitllegalStateMachine
 3986              	.LVL466:
 3987              	.L335:
 3988              	.LBE61:
 3989              	.LBE60:
 3990              	.LBE62:
 3991              	.LBE64:
 406:../Dave/Generated/src/FEE001/FEE001.c ****     if(StateDataPtr->FeeGcState == FEE001_GC_IDLE)
 3992              		.loc 1 406 0
 3993 039c AD24     		mov	r4, #173
 3994              	.LVL467:
 3995 039e 6200     		lsl	r2, r4, #1
 3996 03a0 AB5C     		ldrb	r3, [r5, r2]
 3997 03a2 002B     		cmp	r3, #0
 3998 03a4 08D1     		bne	.L324
 408:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeInitAPICalled = 1U;
 3999              		.loc 1 408 0
 4000 03a6 2F7E     		ldrb	r7, [r5, #24]
 4001 03a8 0221     		mov	r1, #2
 409:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeIntrJobResult = FEE001_JOB_PASS;
 4002              		.loc 1 409 0
 4003 03aa B126     		mov	r6, #177
 410:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeUserJobResult = FEE001_JOB_PASS;
 4004              		.loc 1 410 0
 4005 03ac 034C     		ldr	r4, .L396
 408:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeInitAPICalled = 1U;
 4006              		.loc 1 408 0
 4007 03ae 0F43     		orr	r7, r1
 409:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeIntrJobResult = FEE001_JOB_PASS;
 4008              		.loc 1 409 0
 4009 03b0 7000     		lsl	r0, r6, #1
 408:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeInitAPICalled = 1U;
 4010              		.loc 1 408 0
 4011 03b2 2F76     		strb	r7, [r5, #24]
 409:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeIntrJobResult = FEE001_JOB_PASS;
 4012              		.loc 1 409 0
 4013 03b4 2B54     		strb	r3, [r5, r0]
 410:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeUserJobResult = FEE001_JOB_PASS;
 4014              		.loc 1 410 0
 4015 03b6 2B55     		strb	r3, [r5, r4]
 4016              	.L324:
 413:../Dave/Generated/src/FEE001/FEE001.c **** }/*End of FEE001_Init*/
 4017              		.loc 1 413 0
 4018              		@ sp needed for prologue
 4019              	.LVL468:
 4020 03b8 F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 4021              	.L397:
 4022 03ba C046     		.align	2
 4023              	.L396:
 4024 03bc 63010000 		.word	355
 4025              		.cfi_endproc
 4026              	.LFE38:
 4028              		.section	.text.FEE001_Write,"ax",%progbits
 4029              		.align	1
 4030              		.global	FEE001_Write
 4031              		.code	16
 4032              		.thumb_func
 4034              	FEE001_Write:
 4035              	.LFB39:
 438:../Dave/Generated/src/FEE001/FEE001.c **** {
 4036              		.loc 1 438 0
 4037              		.cfi_startproc
 4038              	.LVL469:
 444:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4039              		.loc 1 444 0
 4040 0000 1E4B     		ldr	r3, .L407
 438:../Dave/Generated/src/FEE001/FEE001.c **** {
 4041              		.loc 1 438 0
 4042 0002 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 4043              	.LCFI21:
 4044              		.cfi_def_cfa_offset 32
 4045              		.cfi_offset 0, -32
 4046              		.cfi_offset 1, -28
 4047              		.cfi_offset 2, -24
 4048              		.cfi_offset 4, -20
 4049              		.cfi_offset 5, -16
 4050              		.cfi_offset 6, -12
 4051              		.cfi_offset 7, -8
 4052              		.cfi_offset 14, -4
 444:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4053              		.loc 1 444 0
 4054 0004 1D68     		ldr	r5, [r3]
 438:../Dave/Generated/src/FEE001/FEE001.c **** {
 4055              		.loc 1 438 0
 4056 0006 0E1C     		mov	r6, r1
 446:../Dave/Generated/src/FEE001/FEE001.c ****    UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
 4057              		.loc 1 446 0
 4058 0008 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 4059              	.LVL470:
 447:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
 4060              		.loc 1 447 0
 4061 000c 6968     		ldr	r1, [r5, #4]
 444:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4062              		.loc 1 444 0
 4063 000e 2C68     		ldr	r4, [r5]
 4064              	.LVL471:
 447:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
 4065              		.loc 1 447 0
 4066 0010 0191     		str	r1, [sp, #4]
 4067              	.LVL472:
 451:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4068              		.loc 1 451 0
 4069 0012 217E     		ldrb	r1, [r4, #24]
 4070              	.LVL473:
 4071 0014 0222     		mov	r2, #2
 453:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_OPER_NOT_ALLOWED;
 4072              		.loc 1 453 0
 4073 0016 0823     		mov	r3, #8
 451:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4074              		.loc 1 451 0
 4075 0018 1142     		tst	r1, r2
 4076 001a 2CD0     		beq	.L399
 456:../Dave/Generated/src/FEE001/FEE001.c ****    else if(UserBlockIndex == FEE001_LOG_BLOCK_NOT_FOUND)
 4077              		.loc 1 456 0
 4078 001c FF28     		cmp	r0, #255
 4079 001e 29D0     		beq	.L403
 461:../Dave/Generated/src/FEE001/FEE001.c ****    else if(DataBufferPtr == (uint8_t*)NULL_PTR)
 4080              		.loc 1 461 0
 4081 0020 002E     		cmp	r6, #0
 4082 0022 27D0     		beq	.L403
 469:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING)&&
 4083              		.loc 1 469 0
 4084 0024 271C     		mov	r7, r4
 4085 0026 FC37     		add	r7, r7, #252
 4086 0028 FD6D     		ldr	r5, [r7, #92]
 4087              	.LVL474:
 4088 002a 154F     		ldr	r7, .L407+4
 4089 002c 3D40     		and	r5, r7
 4090 002e AC46     		mov	ip, r5
 4091 0030 8025     		mov	r5, #128
 4092 0032 6F00     		lsl	r7, r5, #1
 4093 0034 BC45     		cmp	ip, r7
 4094 0036 1ED1     		bne	.L399
 447:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
 4095              		.loc 1 447 0
 4096 0038 019D     		ldr	r5, [sp, #4]
 473:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeWriteInvldAPICalled = 1U;
 4097              		.loc 1 473 0
 4098 003a 0427     		mov	r7, #4
 4099 003c B943     		bic	r1, r7
 447:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
 4100              		.loc 1 447 0
 4101 003e 9040     		lsl	r0, r0, r2
 4102              	.LVL475:
 4103 0040 2818     		add	r0, r5, r0
 473:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeWriteInvldAPICalled = 1U;
 4104              		.loc 1 473 0
 4105 0042 0B43     		orr	r3, r1
 475:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_WRITE_REQ_START;
 4106              		.loc 1 475 0
 4107 0044 0F4D     		ldr	r5, .L407+8
 473:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeWriteInvldAPICalled = 1U;
 4108              		.loc 1 473 0
 4109 0046 2376     		strb	r3, [r4, #24]
 475:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_WRITE_REQ_START;
 4110              		.loc 1 475 0
 4111 0048 0723     		mov	r3, #7
 4112 004a 6355     		strb	r3, [r4, r5]
 476:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeJobResult = FEE001_JOB_PENDING;
 4113              		.loc 1 476 0
 4114 004c A276     		strb	r2, [r4, #26]
 479:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.BlockNumber  = BlockPtr->BlockNumber;
 4115              		.loc 1 479 0
 4116 004e 0178     		ldrb	r1, [r0]
 480:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.DataBufferPtr = DataBufferPtr;
 4117              		.loc 1 480 0
 4118 0050 2661     		str	r6, [r4, #16]
 479:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.BlockNumber  = BlockPtr->BlockNumber;
 4119              		.loc 1 479 0
 4120 0052 2175     		strb	r1, [r4, #20]
 483:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockPtr->BlockNumber;
 4121              		.loc 1 483 0
 4122 0054 0678     		ldrb	r6, [r0]
 4123              	.LVL476:
 4124 0056 AC22     		mov	r2, #172
 4125 0058 5000     		lsl	r0, r2, #1
 489:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeUserJobResult != FEE001_JOB_FAIL)
 4126              		.loc 1 489 0
 4127 005a 0B4F     		ldr	r7, .L407+12
 483:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockPtr->BlockNumber;
 4128              		.loc 1 483 0
 4129 005c 2654     		strb	r6, [r4, r0]
 486:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lLocalWrite();
 4130              		.loc 1 486 0
 4131 005e FFF7FEFF 		bl	Fee_lLocalWrite
 4132              	.LVL477:
 489:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeUserJobResult != FEE001_JOB_FAIL)
 4133              		.loc 1 489 0
 4134 0062 E35D     		ldrb	r3, [r4, r7]
 4135 0064 012B     		cmp	r3, #1
 4136 0066 01D0     		beq	.L405
 491:../Dave/Generated/src/FEE001/FEE001.c ****         ReturnValue = FEE001_COMPLETE;
 4137              		.loc 1 491 0
 4138 0068 0023     		mov	r3, #0
 4139 006a 00E0     		b	.L400
 4140              	.L405:
 496:../Dave/Generated/src/FEE001/FEE001.c ****         ReturnValue = FEE001_ERROR;
 4141              		.loc 1 496 0
 4142 006c 0523     		mov	r3, #5
 4143              	.L400:
 4144              	.LVL478:
 499:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 4145              		.loc 1 499 0
 4146 006e 0121     		mov	r1, #1
 4147 0070 6155     		strb	r1, [r4, r5]
 4148 0072 00E0     		b	.L399
 4149              	.LVL479:
 4150              	.L403:
 458:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_INVALID_PARAM;
 4151              		.loc 1 458 0
 4152 0074 0423     		mov	r3, #4
 4153              	.LVL480:
 4154              	.L399:
 507:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_Write */
 4155              		.loc 1 507 0
 4156 0076 181C     		mov	r0, r3
 4157              		@ sp needed for prologue
 4158              	.LVL481:
 4159 0078 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 4160              	.L408:
 4161 007a C046     		.align	2
 4162              	.L407:
 4163 007c 00000000 		.word	FEE001_CfgPtr
 4164 0080 00FFFF00 		.word	16776960
 4165 0084 59010000 		.word	345
 4166 0088 63010000 		.word	355
 4167              		.cfi_endproc
 4168              	.LFE39:
 4170              		.section	.text.FEE001_InvalidateBlock,"ax",%progbits
 4171              		.align	1
 4172              		.global	FEE001_InvalidateBlock
 4173              		.code	16
 4174              		.thumb_func
 4176              	FEE001_InvalidateBlock:
 4177              	.LFB40:
 531:../Dave/Generated/src/FEE001/FEE001.c **** {
 4178              		.loc 1 531 0
 4179              		.cfi_startproc
 4180              	.LVL482:
 4181 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4182              	.LCFI22:
 4183              		.cfi_def_cfa_offset 24
 4184              		.cfi_offset 3, -24
 4185              		.cfi_offset 4, -20
 4186              		.cfi_offset 5, -16
 4187              		.cfi_offset 6, -12
 4188              		.cfi_offset 7, -8
 4189              		.cfi_offset 14, -4
 537:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4190              		.loc 1 537 0
 4191 0002 1A4B     		ldr	r3, .L417
 4192 0004 1D68     		ldr	r5, [r3]
 539:../Dave/Generated/src/FEE001/FEE001.c ****    UserBlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
 4193              		.loc 1 539 0
 4194 0006 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 4195              	.LVL483:
 537:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4196              		.loc 1 537 0
 4197 000a 2C68     		ldr	r4, [r5]
 4198              	.LVL484:
 544:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4199              		.loc 1 544 0
 4200 000c 0222     		mov	r2, #2
 4201 000e 217E     		ldrb	r1, [r4, #24]
 540:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
 4202              		.loc 1 540 0
 4203 0010 6D68     		ldr	r5, [r5, #4]
 4204              	.LVL485:
 546:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_OPER_NOT_ALLOWED;
 4205              		.loc 1 546 0
 4206 0012 0823     		mov	r3, #8
 544:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4207              		.loc 1 544 0
 4208 0014 1142     		tst	r1, r2
 4209 0016 27D0     		beq	.L410
 549:../Dave/Generated/src/FEE001/FEE001.c ****    else if(UserBlockIndex == FEE001_LOG_BLOCK_NOT_FOUND)
 4210              		.loc 1 549 0
 4211 0018 FF28     		cmp	r0, #255
 4212 001a 24D0     		beq	.L413
 557:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING)&&
 4213              		.loc 1 557 0
 4214 001c 261C     		mov	r6, r4
 4215 001e FC36     		add	r6, r6, #252
 4216 0020 F76D     		ldr	r7, [r6, #92]
 4217 0022 134E     		ldr	r6, .L417+4
 4218 0024 3740     		and	r7, r6
 4219 0026 8026     		mov	r6, #128
 4220 0028 7600     		lsl	r6, r6, #1
 4221 002a B742     		cmp	r7, r6
 4222 002c 1CD1     		bne	.L410
 540:../Dave/Generated/src/FEE001/FEE001.c ****    BlockPtr = FEE001_CfgPtr->FeeBlockConfigPtr + UserBlockIndex;
 4223              		.loc 1 540 0
 4224 002e 9040     		lsl	r0, r0, r2
 4225              	.LVL486:
 4226 0030 2818     		add	r0, r5, r0
 561:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeWriteInvldAPICalled = 1U;
 4227              		.loc 1 561 0
 4228 0032 0425     		mov	r5, #4
 4229 0034 2943     		orr	r1, r5
 4230 0036 0B43     		orr	r3, r1
 563:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_WRITE_REQ_START;
 4231              		.loc 1 563 0
 4232 0038 0E4F     		ldr	r7, .L417+8
 561:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeStatusFlags.FeeWriteInvldAPICalled = 1U;
 4233              		.loc 1 561 0
 4234 003a 2376     		strb	r3, [r4, #24]
 563:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_WRITE_REQ_START;
 4235              		.loc 1 563 0
 4236 003c 0723     		mov	r3, #7
 4237 003e E355     		strb	r3, [r4, r7]
 564:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeJobResult = FEE001_JOB_PENDING;
 4238              		.loc 1 564 0
 4239 0040 A276     		strb	r2, [r4, #26]
 567:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.BlockNumber  = BlockPtr->BlockNumber;
 4240              		.loc 1 567 0
 4241 0042 0178     		ldrb	r1, [r0]
 570:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockPtr->BlockNumber;
 4242              		.loc 1 570 0
 4243 0044 AC26     		mov	r6, #172
 567:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqInfo.BlockNumber  = BlockPtr->BlockNumber;
 4244              		.loc 1 567 0
 4245 0046 2175     		strb	r1, [r4, #20]
 570:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockPtr->BlockNumber;
 4246              		.loc 1 570 0
 4247 0048 0278     		ldrb	r2, [r0]
 576:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeUserJobResult != FEE001_JOB_FAIL)
 4248              		.loc 1 576 0
 4249 004a 0B4D     		ldr	r5, .L417+12
 570:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockPtr->BlockNumber;
 4250              		.loc 1 570 0
 4251 004c 7000     		lsl	r0, r6, #1
 4252 004e 2254     		strb	r2, [r4, r0]
 573:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lLocalWrite();
 4253              		.loc 1 573 0
 4254 0050 FFF7FEFF 		bl	Fee_lLocalWrite
 4255              	.LVL487:
 576:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeUserJobResult != FEE001_JOB_FAIL)
 4256              		.loc 1 576 0
 4257 0054 635D     		ldrb	r3, [r4, r5]
 4258 0056 012B     		cmp	r3, #1
 4259 0058 01D0     		beq	.L415
 578:../Dave/Generated/src/FEE001/FEE001.c ****         ReturnValue = FEE001_COMPLETE;
 4260              		.loc 1 578 0
 4261 005a 0023     		mov	r3, #0
 4262 005c 00E0     		b	.L411
 4263              	.L415:
 583:../Dave/Generated/src/FEE001/FEE001.c ****         ReturnValue = FEE001_ERROR;
 4264              		.loc 1 583 0
 4265 005e 0523     		mov	r3, #5
 4266              	.L411:
 4267              	.LVL488:
 586:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 4268              		.loc 1 586 0
 4269 0060 0121     		mov	r1, #1
 4270 0062 E155     		strb	r1, [r4, r7]
 4271 0064 00E0     		b	.L410
 4272              	.LVL489:
 4273              	.L413:
 551:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_INVALID_PARAM;
 4274              		.loc 1 551 0
 4275 0066 0423     		mov	r3, #4
 4276              	.LVL490:
 4277              	.L410:
 594:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_InvalidateBlock */
 4278              		.loc 1 594 0
 4279 0068 181C     		mov	r0, r3
 4280              		@ sp needed for prologue
 4281              	.LVL491:
 4282 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4283              	.L418:
 4284              		.align	2
 4285              	.L417:
 4286 006c 00000000 		.word	FEE001_CfgPtr
 4287 0070 00FFFF00 		.word	16776960
 4288 0074 59010000 		.word	345
 4289 0078 63010000 		.word	355
 4290              		.cfi_endproc
 4291              	.LFE40:
 4293              		.section	.text.FEE001_Read,"ax",%progbits
 4294              		.align	1
 4295              		.global	FEE001_Read
 4296              		.code	16
 4297              		.thumb_func
 4299              	FEE001_Read:
 4300              	.LFB41:
 627:../Dave/Generated/src/FEE001/FEE001.c **** {
 4301              		.loc 1 627 0
 4302              		.cfi_startproc
 4303              	.LVL492:
 4304 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4305              	.LCFI23:
 4306              		.cfi_def_cfa_offset 20
 4307              		.cfi_offset 4, -20
 4308              		.cfi_offset 5, -16
 4309              		.cfi_offset 6, -12
 4310              		.cfi_offset 7, -8
 4311              		.cfi_offset 14, -4
 4312 0002 85B0     		sub	sp, sp, #20
 4313              	.LCFI24:
 4314              		.cfi_def_cfa_offset 40
 627:../Dave/Generated/src/FEE001/FEE001.c **** {
 4315              		.loc 1 627 0
 4316 0004 0393     		str	r3, [sp, #12]
 634:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4317              		.loc 1 634 0
 4318 0006 264B     		ldr	r3, .L431
 4319              	.LVL493:
 627:../Dave/Generated/src/FEE001/FEE001.c **** {
 4320              		.loc 1 627 0
 4321 0008 0191     		str	r1, [sp, #4]
 634:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4322              		.loc 1 634 0
 4323 000a 1E68     		ldr	r6, [r3]
 627:../Dave/Generated/src/FEE001/FEE001.c **** {
 4324              		.loc 1 627 0
 4325 000c 0292     		str	r2, [sp, #8]
 4326 000e 051C     		mov	r5, r0
 636:../Dave/Generated/src/FEE001/FEE001.c ****    BlkIdx = Fee_lGetUsrBlockIndex(BlockNumber);
 4327              		.loc 1 636 0
 4328 0010 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 4329              	.LVL494:
 634:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4330              		.loc 1 634 0
 4331 0014 3468     		ldr	r4, [r6]
 4332              	.LVL495:
 639:../Dave/Generated/src/FEE001/FEE001.c ****    BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 4333              		.loc 1 639 0
 4334 0016 7268     		ldr	r2, [r6, #4]
 4335 0018 8100     		lsl	r1, r0, #2
 4336 001a 5718     		add	r7, r2, r1
 642:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4337              		.loc 1 642 0
 4338 001c 217E     		ldrb	r1, [r4, #24]
 4339 001e 0223     		mov	r3, #2
 639:../Dave/Generated/src/FEE001/FEE001.c ****    BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 4340              		.loc 1 639 0
 4341 0020 7A88     		ldrh	r2, [r7, #2]
 4342              	.LVL496:
 644:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_UNINITIALIZED;
 4343              		.loc 1 644 0
 4344 0022 1E1C     		mov	r6, r3
 642:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4345              		.loc 1 642 0
 4346 0024 1942     		tst	r1, r3
 4347 0026 37D0     		beq	.L420
 647:../Dave/Generated/src/FEE001/FEE001.c ****    else if(BlkIdx == FEE001_LOG_BLOCK_NOT_FOUND)
 4348              		.loc 1 647 0
 4349 0028 FF28     		cmp	r0, #255
 4350 002a 34D0     		beq	.L424
 653:../Dave/Generated/src/FEE001/FEE001.c ****    else if  ((DataBufferPtr == (uint8_t*) NULL_PTR) ||
 4351              		.loc 1 653 0
 4352 002c 0298     		ldr	r0, [sp, #8]
 4353              	.LVL497:
 4354 002e 0028     		cmp	r0, #0
 4355 0030 31D0     		beq	.L424
 654:../Dave/Generated/src/FEE001/FEE001.c ****             (((uint32_t)BlockOffset + Length) > BlkSize))
 4356              		.loc 1 654 0 discriminator 1
 4357 0032 039E     		ldr	r6, [sp, #12]
 4358 0034 019F     		ldr	r7, [sp, #4]
 4359 0036 F119     		add	r1, r6, r7
 649:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 4360              		.loc 1 649 0 discriminator 1
 4361 0038 0426     		mov	r6, #4
 653:../Dave/Generated/src/FEE001/FEE001.c ****    else if  ((DataBufferPtr == (uint8_t*) NULL_PTR) ||
 4362              		.loc 1 653 0 discriminator 1
 4363 003a 9142     		cmp	r1, r2
 4364 003c 2CD8     		bhi	.L420
 662:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 4365              		.loc 1 662 0
 4366 003e 221C     		mov	r2, r4
 4367              	.LVL498:
 4368 0040 FC32     		add	r2, r2, #252
 4369 0042 184E     		ldr	r6, .L431+4
 4370 0044 D06D     		ldr	r0, [r2, #92]
 4371 0046 8027     		mov	r7, #128
 4372 0048 3040     		and	r0, r6
 4373 004a 7900     		lsl	r1, r7, #1
 699:../Dave/Generated/src/FEE001/FEE001.c **** 	  ReturnValue = FEE001_OPER_NOT_ALLOWED;
 4374              		.loc 1 699 0
 4375 004c 0826     		mov	r6, #8
 662:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 4376              		.loc 1 662 0
 4377 004e 8842     		cmp	r0, r1
 4378 0050 22D1     		bne	.L420
 669:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockOffset = BlockOffset;
 4379              		.loc 1 669 0
 4380 0052 6A46     		mov	r2, sp
 4381 0054 9088     		ldrh	r0, [r2, #4]
 665:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_START;
 4382              		.loc 1 665 0
 4383 0056 144F     		ldr	r7, .L431+8
 670:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->DataBufferPtr = DataBufferPtr;
 4384              		.loc 1 670 0
 4385 0058 0299     		ldr	r1, [sp, #8]
 665:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_START;
 4386              		.loc 1 665 0
 4387 005a 0626     		mov	r6, #6
 4388 005c E655     		strb	r6, [r4, r7]
 671:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = Length;
 4389              		.loc 1 671 0
 4390 005e 6A46     		mov	r2, sp
 669:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockOffset = BlockOffset;
 4391              		.loc 1 669 0
 4392 0060 A081     		strh	r0, [r4, #12]
 671:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = Length;
 4393              		.loc 1 671 0
 4394 0062 0C20     		mov	r0, #12
 670:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->DataBufferPtr = DataBufferPtr;
 4395              		.loc 1 670 0
 4396 0064 2161     		str	r1, [r4, #16]
 671:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = Length;
 4397              		.loc 1 671 0
 4398 0066 815A     		ldrh	r1, [r0, r2]
 672:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 4399              		.loc 1 672 0
 4400 0068 AC22     		mov	r2, #172
 4401 006a 5000     		lsl	r0, r2, #1
 668:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockNumber = BlockNumber;
 4402              		.loc 1 668 0
 4403 006c 2575     		strb	r5, [r4, #20]
 671:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = Length;
 4404              		.loc 1 671 0
 4405 006e E181     		strh	r1, [r4, #14]
 673:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeJobResult = FEE001_JOB_PENDING;
 4406              		.loc 1 673 0
 4407 0070 A376     		strb	r3, [r4, #26]
 672:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 4408              		.loc 1 672 0
 4409 0072 2554     		strb	r5, [r4, r0]
 676:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lLocalRead((uint32_t)FEE001_NORM_READ);
 4410              		.loc 1 676 0
 4411 0074 0020     		mov	r0, #0
 4412 0076 FFF7FEFF 		bl	Fee_lLocalRead
 4413              	.LVL499:
 678:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeJobResult == FEE001_JOB_FAILED)
 4414              		.loc 1 678 0
 4415 007a A57E     		ldrb	r5, [r4, #26]
 4416 007c 012D     		cmp	r5, #1
 4417 007e 06D0     		beq	.L427
 682:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INCONSISTENT)
 4418              		.loc 1 682 0
 4419 0080 032D     		cmp	r5, #3
 4420 0082 05D0     		beq	.L421
 692:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_COMPLETE;
 4421              		.loc 1 692 0
 4422 0084 0026     		mov	r6, #0
 686:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INVALID)
 4423              		.loc 1 686 0
 4424 0086 042D     		cmp	r5, #4
 4425 0088 02D1     		bne	.L421
 688:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INVALID;
 4426              		.loc 1 688 0
 4427 008a 0726     		mov	r6, #7
 4428 008c 00E0     		b	.L421
 4429              	.L427:
 680:../Dave/Generated/src/FEE001/FEE001.c ****           ReturnValue = FEE001_ERROR;
 4430              		.loc 1 680 0
 4431 008e 0526     		mov	r6, #5
 4432              	.L421:
 4433              	.LVL500:
 695:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 4434              		.loc 1 695 0
 4435 0090 0123     		mov	r3, #1
 4436 0092 E355     		strb	r3, [r4, r7]
 4437 0094 00E0     		b	.L420
 4438              	.LVL501:
 4439              	.L424:
 649:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 4440              		.loc 1 649 0
 4441 0096 0426     		mov	r6, #4
 4442              	.LVL502:
 4443              	.L420:
 703:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_Read */
 4444              		.loc 1 703 0
 4445 0098 301C     		mov	r0, r6
 4446 009a 05B0     		add	sp, sp, #20
 4447              		@ sp needed for prologue
 4448              	.LVL503:
 4449              	.LVL504:
 4450 009c F0BD     		pop	{r4, r5, r6, r7, pc}
 4451              	.L432:
 4452 009e C046     		.align	2
 4453              	.L431:
 4454 00a0 00000000 		.word	FEE001_CfgPtr
 4455 00a4 00FFFF00 		.word	16776960
 4456 00a8 59010000 		.word	345
 4457              		.cfi_endproc
 4458              	.LFE41:
 4460              		.section	.text.FEE001_StartGarbageCollection,"ax",%progbits
 4461              		.align	1
 4462              		.global	FEE001_StartGarbageCollection
 4463              		.code	16
 4464              		.thumb_func
 4466              	FEE001_StartGarbageCollection:
 4467              	.LFB42:
 725:../Dave/Generated/src/FEE001/FEE001.c **** {
 4468              		.loc 1 725 0
 4469              		.cfi_startproc
 4470              	.LVL505:
 4471 0000 38B5     		push	{r3, r4, r5, lr}
 4472              	.LCFI25:
 4473              		.cfi_def_cfa_offset 16
 4474              		.cfi_offset 3, -16
 4475              		.cfi_offset 4, -12
 4476              		.cfi_offset 5, -8
 4477              		.cfi_offset 14, -4
 730:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4478              		.loc 1 730 0
 4479 0002 0E4B     		ldr	r3, .L439
 4480 0004 1868     		ldr	r0, [r3]
 4481 0006 0468     		ldr	r4, [r0]
 4482              	.LVL506:
 735:../Dave/Generated/src/FEE001/FEE001.c ****      Status = FEE001_UNINITIALIZED;
 4483              		.loc 1 735 0
 4484 0008 0220     		mov	r0, #2
 733:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4485              		.loc 1 733 0
 4486 000a 217E     		ldrb	r1, [r4, #24]
 4487 000c 0142     		tst	r1, r0
 4488 000e 14D0     		beq	.L434
 741:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 4489              		.loc 1 741 0
 4490 0010 221C     		mov	r2, r4
 4491 0012 FC32     		add	r2, r2, #252
 4492 0014 D56D     		ldr	r5, [r2, #92]
 4493 0016 0A4B     		ldr	r3, .L439+4
 4494 0018 8021     		mov	r1, #128
 4495 001a 1D40     		and	r5, r3
 760:../Dave/Generated/src/FEE001/FEE001.c **** 	   Status = FEE001_OPER_NOT_ALLOWED;
 4496              		.loc 1 760 0
 4497 001c 0820     		mov	r0, #8
 741:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 4498              		.loc 1 741 0
 4499 001e 4A00     		lsl	r2, r1, #1
 4500 0020 9542     		cmp	r5, r2
 4501 0022 0AD1     		bne	.L434
 744:../Dave/Generated/src/FEE001/FEE001.c ****      StateDataPtr->FeeGcState = FEE001_GC_REQUESTED;
 4502              		.loc 1 744 0
 4503 0024 AD20     		mov	r0, #173
 4504 0026 4500     		lsl	r5, r0, #1
 4505 0028 0423     		mov	r3, #4
 4506 002a 6355     		strb	r3, [r4, r5]
 747:../Dave/Generated/src/FEE001/FEE001.c ****      Fee_lGarbageCollection();
 4507              		.loc 1 747 0
 4508 002c FFF7FEFF 		bl	Fee_lGarbageCollection
 4509              	.LVL507:
 749:../Dave/Generated/src/FEE001/FEE001.c ****      if(StateDataPtr->FeeGcState == FEE001_GC_FAIL)
 4510              		.loc 1 749 0
 4511 0030 645D     		ldrb	r4, [r4, r5]
 4512              	.LVL508:
 755:../Dave/Generated/src/FEE001/FEE001.c ****         Status = FEE001_COMPLETE;
 4513              		.loc 1 755 0
 4514 0032 0020     		mov	r0, #0
 749:../Dave/Generated/src/FEE001/FEE001.c ****      if(StateDataPtr->FeeGcState == FEE001_GC_FAIL)
 4515              		.loc 1 749 0
 4516 0034 092C     		cmp	r4, #9
 4517 0036 00D1     		bne	.L434
 751:../Dave/Generated/src/FEE001/FEE001.c ****      	Status = FEE001_ERROR;
 4518              		.loc 1 751 0
 4519 0038 0520     		mov	r0, #5
 4520              	.L434:
 4521              	.LVL509:
 764:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_StartGarbageCollection */
 4522              		.loc 1 764 0
 4523              		@ sp needed for prologue
 4524 003a 38BD     		pop	{r3, r4, r5, pc}
 4525              	.L440:
 4526              		.align	2
 4527              	.L439:
 4528 003c 00000000 		.word	FEE001_CfgPtr
 4529 0040 00FFFF00 		.word	16776960
 4530              		.cfi_endproc
 4531              	.LFE42:
 4533              		.section	.text.FEE001_GetStatus,"ax",%progbits
 4534              		.align	1
 4535              		.global	FEE001_GetStatus
 4536              		.code	16
 4537              		.thumb_func
 4539              	FEE001_GetStatus:
 4540              	.LFB43:
 784:../Dave/Generated/src/FEE001/FEE001.c **** {
 4541              		.loc 1 784 0
 4542              		.cfi_startproc
 788:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4543              		.loc 1 788 0
 4544 0000 084B     		ldr	r3, .L446
 793:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeGcState == FEE001_GC_FAIL)
 4545              		.loc 1 793 0
 4546 0002 AD22     		mov	r2, #173
 788:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4547              		.loc 1 788 0
 4548 0004 1868     		ldr	r0, [r3]
 793:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeGcState == FEE001_GC_FAIL)
 4549              		.loc 1 793 0
 4550 0006 5300     		lsl	r3, r2, #1
 788:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4551              		.loc 1 788 0
 4552 0008 0168     		ldr	r1, [r0]
 4553              	.LVL510:
 795:../Dave/Generated/src/FEE001/FEE001.c **** 	   ReturnStatus = FEE001_GC_FAILED;
 4554              		.loc 1 795 0
 4555 000a 0320     		mov	r0, #3
 793:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeGcState == FEE001_GC_FAIL)
 4556              		.loc 1 793 0
 4557 000c CA5C     		ldrb	r2, [r1, r3]
 4558 000e 092A     		cmp	r2, #9
 4559 0010 07D0     		beq	.L442
 798:../Dave/Generated/src/FEE001/FEE001.c ****    else if(StateDataPtr->FeePendReqStatus != FEE001_NO_REQ_PENDING)
 4560              		.loc 1 798 0
 4561 0012 0548     		ldr	r0, .L446+4
 4562 0014 0B5C     		ldrb	r3, [r1, r0]
 800:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnStatus = FEE001_BUSY;
 4563              		.loc 1 800 0
 4564 0016 0220     		mov	r0, #2
 798:../Dave/Generated/src/FEE001/FEE001.c ****    else if(StateDataPtr->FeePendReqStatus != FEE001_NO_REQ_PENDING)
 4565              		.loc 1 798 0
 4566 0018 012B     		cmp	r3, #1
 4567 001a 02D1     		bne	.L442
 803:../Dave/Generated/src/FEE001/FEE001.c ****    else if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4568              		.loc 1 803 0
 4569 001c 097E     		ldrb	r1, [r1, #24]
 4570              	.LVL511:
 4571 001e 4808     		lsr	r0, r1, #1
 795:../Dave/Generated/src/FEE001/FEE001.c **** 	   ReturnStatus = FEE001_GC_FAILED;
 4572              		.loc 1 795 0
 4573 0020 1840     		and	r0, r3
 4574              	.L442:
 4575              	.LVL512:
 814:../Dave/Generated/src/FEE001/FEE001.c **** }/*End of FEE01_GetStatus */
 4576              		.loc 1 814 0
 4577              		@ sp needed for prologue
 4578 0022 7047     		bx	lr
 4579              	.L447:
 4580              		.align	2
 4581              	.L446:
 4582 0024 00000000 		.word	FEE001_CfgPtr
 4583 0028 59010000 		.word	345
 4584              		.cfi_endproc
 4585              	.LFE43:
 4587              		.section	.text.FEE001_ReadBlockWithCRC,"ax",%progbits
 4588              		.align	1
 4589              		.global	FEE001_ReadBlockWithCRC
 4590              		.code	16
 4591              		.thumb_func
 4593              	FEE001_ReadBlockWithCRC:
 4594              	.LFB44:
 842:../Dave/Generated/src/FEE001/FEE001.c **** {
 4595              		.loc 1 842 0
 4596              		.cfi_startproc
 4597              	.LVL513:
 4598 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 4599              	.LCFI26:
 4600              		.cfi_def_cfa_offset 32
 4601              		.cfi_offset 0, -32
 4602              		.cfi_offset 1, -28
 4603              		.cfi_offset 2, -24
 4604              		.cfi_offset 4, -20
 4605              		.cfi_offset 5, -16
 4606              		.cfi_offset 6, -12
 4607              		.cfi_offset 7, -8
 4608              		.cfi_offset 14, -4
 842:../Dave/Generated/src/FEE001/FEE001.c **** {
 4609              		.loc 1 842 0
 4610 0002 051C     		mov	r5, r0
 4611 0004 0191     		str	r1, [sp, #4]
 851:../Dave/Generated/src/FEE001/FEE001.c ****    BlkIdx = Fee_lGetUsrBlockIndex(BlockNumber);
 4612              		.loc 1 851 0
 4613 0006 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 4614              	.LVL514:
 849:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4615              		.loc 1 849 0
 4616 000a 244E     		ldr	r6, .L461
 857:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4617              		.loc 1 857 0
 4618 000c 0222     		mov	r2, #2
 849:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4619              		.loc 1 849 0
 4620 000e 3768     		ldr	r7, [r6]
 851:../Dave/Generated/src/FEE001/FEE001.c ****    BlkIdx = Fee_lGetUsrBlockIndex(BlockNumber);
 4621              		.loc 1 851 0
 4622 0010 011C     		mov	r1, r0
 849:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4623              		.loc 1 849 0
 4624 0012 3C68     		ldr	r4, [r7]
 4625              	.LVL515:
 859:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_UNINITIALIZED;
 4626              		.loc 1 859 0
 4627 0014 101C     		mov	r0, r2
 4628              	.LVL516:
 857:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4629              		.loc 1 857 0
 4630 0016 237E     		ldrb	r3, [r4, #24]
 4631 0018 1342     		tst	r3, r2
 4632 001a 3ED0     		beq	.L449
 862:../Dave/Generated/src/FEE001/FEE001.c ****    else if(BlkIdx == FEE001_LOG_BLOCK_NOT_FOUND)
 4633              		.loc 1 862 0
 4634 001c FF29     		cmp	r1, #255
 4635 001e 3BD0     		beq	.L453
 867:../Dave/Generated/src/FEE001/FEE001.c ****    else if ( DataBufferPtr == (uint8_t*) NULL_PTR )
 4636              		.loc 1 867 0
 4637 0020 0198     		ldr	r0, [sp, #4]
 4638 0022 0028     		cmp	r0, #0
 4639 0024 38D0     		beq	.L453
 875:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 4640              		.loc 1 875 0
 4641 0026 231C     		mov	r3, r4
 4642 0028 FC33     		add	r3, r3, #252
 4643 002a D86D     		ldr	r0, [r3, #92]
 4644 002c 1C4B     		ldr	r3, .L461+4
 4645 002e 1840     		and	r0, r3
 4646 0030 8446     		mov	ip, r0
 4647 0032 8023     		mov	r3, #128
 924:../Dave/Generated/src/FEE001/FEE001.c **** 	  ReturnValue = FEE001_OPER_NOT_ALLOWED;
 4648              		.loc 1 924 0
 4649 0034 0820     		mov	r0, #8
 875:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 4650              		.loc 1 875 0
 4651 0036 5B00     		lsl	r3, r3, #1
 4652 0038 9C45     		cmp	ip, r3
 4653 003a 2ED1     		bne	.L449
 878:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_START;
 4654              		.loc 1 878 0
 4655 003c 194B     		ldr	r3, .L461+8
 4656 003e 0620     		mov	r0, #6
 4657 0040 E054     		strb	r0, [r4, r3]
 881:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockNumber = BlockNumber;
 4658              		.loc 1 881 0
 4659 0042 2575     		strb	r5, [r4, #20]
 884:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 4660              		.loc 1 884 0
 4661 0044 7F68     		ldr	r7, [r7, #4]
 4662              	.LVL517:
 883:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->DataBufferPtr = DataBufferPtr;
 4663              		.loc 1 883 0
 4664 0046 0198     		ldr	r0, [sp, #4]
 882:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockOffset = 0U;
 4665              		.loc 1 882 0
 4666 0048 0023     		mov	r3, #0
 884:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 4667              		.loc 1 884 0
 4668 004a 9140     		lsl	r1, r1, r2
 4669              	.LVL518:
 882:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->BlockOffset = 0U;
 4670              		.loc 1 882 0
 4671 004c A381     		strh	r3, [r4, #12]
 883:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->DataBufferPtr = DataBufferPtr;
 4672              		.loc 1 883 0
 4673 004e 2061     		str	r0, [r4, #16]
 884:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 4674              		.loc 1 884 0
 4675 0050 7918     		add	r1, r7, r1
 4676 0052 4888     		ldrh	r0, [r1, #2]
 885:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 4677              		.loc 1 885 0
 4678 0054 AC27     		mov	r7, #172
 4679 0056 7900     		lsl	r1, r7, #1
 884:../Dave/Generated/src/FEE001/FEE001.c ****       PendReqPtr->Length = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 4680              		.loc 1 884 0
 4681 0058 E081     		strh	r0, [r4, #14]
 886:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeJobResult = FEE001_JOB_PENDING;
 4682              		.loc 1 886 0
 4683 005a A276     		strb	r2, [r4, #26]
 885:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 4684              		.loc 1 885 0
 4685 005c 6554     		strb	r5, [r4, r1]
 890:../Dave/Generated/src/FEE001/FEE001.c ****       Fee_lLocalRead((uint32_t)FEE001_NORM_READ);
 4686              		.loc 1 890 0
 4687 005e 181C     		mov	r0, r3
 4688 0060 FFF7FEFF 		bl	Fee_lLocalRead
 4689              	.LVL519:
 893:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeJobResult == FEE001_JOB_FAILED)
 4690              		.loc 1 893 0
 4691 0064 A57E     		ldrb	r5, [r4, #26]
 4692 0066 0F4A     		ldr	r2, .L461+8
 4693 0068 012D     		cmp	r5, #1
 4694 006a 0FD0     		beq	.L455
 897:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INCONSISTENT)
 4695              		.loc 1 897 0
 4696 006c 032D     		cmp	r5, #3
 4697 006e 0FD0     		beq	.L456
 903:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INVALID;
 4698              		.loc 1 903 0
 4699 0070 0720     		mov	r0, #7
 901:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INVALID)
 4700              		.loc 1 901 0
 4701 0072 042D     		cmp	r5, #4
 4702 0074 0DD0     		beq	.L450
 4703              	.LVL520:
 4704              	.LBB67:
 4705              	.LBB68:
4495:../Dave/Generated/src/FEE001/FEE001.c **** 
4496:../Dave/Generated/src/FEE001/FEE001.c **** 
4497:../Dave/Generated/src/FEE001/FEE001.c **** 
4498:../Dave/Generated/src/FEE001/FEE001.c **** /*******************************************************************************
4499:../Dave/Generated/src/FEE001/FEE001.c **** ** Syntax          : static void Fee_lReadVerifyCRC(uint8_t BlockNumber,      **
4500:../Dave/Generated/src/FEE001/FEE001.c **** **                                     uint8_t* DataBufferPtr,uint32_t Size)  **
4501:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4502:../Dave/Generated/src/FEE001/FEE001.c **** ** Sync /Async     : Synchronous                                              **
4503:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4504:../Dave/Generated/src/FEE001/FEE001.c **** ** Reentrant       : Non reentrant                                            **
4505:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4506:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(IN)  : None                                                     **
4507:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4508:../Dave/Generated/src/FEE001/FEE001.c **** ** Parameters(OUT) : None                                                     **
4509:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4510:../Dave/Generated/src/FEE001/FEE001.c **** ** Return value    : None                                                     **
4511:../Dave/Generated/src/FEE001/FEE001.c **** **                                                                            **
4512:../Dave/Generated/src/FEE001/FEE001.c **** ** Description     : This routine will perform the read operation on DFLASH   **
4513:../Dave/Generated/src/FEE001/FEE001.c **** *******************************************************************************/
4514:../Dave/Generated/src/FEE001/FEE001.c **** 
4515:../Dave/Generated/src/FEE001/FEE001.c **** static void Fee_lReadVerifyCRC(uint8_t BlockNumber, uint8_t* DataBufferPtr,
4516:../Dave/Generated/src/FEE001/FEE001.c **** 		                       uint32_t Size)
4517:../Dave/Generated/src/FEE001/FEE001.c **** {
4518:../Dave/Generated/src/FEE001/FEE001.c ****     #if( FEE001_CRC_ENABLE == 1U)
4519:../Dave/Generated/src/FEE001/FEE001.c ****     status_t           Status;
4520:../Dave/Generated/src/FEE001/FEE001.c **** 	uint32_t           CRCBuffer;
4521:../Dave/Generated/src/FEE001/FEE001.c **** 	uint32_t           ActualAddr;
4522:../Dave/Generated/src/FEE001/FEE001.c **** 	uint8_t            BlockIndex;
4523:../Dave/Generated/src/FEE001/FEE001.c ****     uint32_t           localCRCBuffer;
4524:../Dave/Generated/src/FEE001/FEE001.c ****     #endif
4525:../Dave/Generated/src/FEE001/FEE001.c **** 	FEE001_StateDataType  *StateDataPtr;
4526:../Dave/Generated/src/FEE001/FEE001.c **** 	StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4706              		.loc 1 4526 0
 4707 0076 3668     		ldr	r6, [r6]
 4708              	.LVL521:
4527:../Dave/Generated/src/FEE001/FEE001.c **** 
4528:../Dave/Generated/src/FEE001/FEE001.c ****     #if( FEE001_CRC_ENABLE == 1U)
4529:../Dave/Generated/src/FEE001/FEE001.c **** 
4530:../Dave/Generated/src/FEE001/FEE001.c **** 	BlockIndex = Fee_lGetUsrBlockIndex(BlockNumber);
4531:../Dave/Generated/src/FEE001/FEE001.c **** 
4532:../Dave/Generated/src/FEE001/FEE001.c ****     /* if CRC is enabled for the block calculate CRC for the read data block
4533:../Dave/Generated/src/FEE001/FEE001.c ****      * else load the dummy 16 bit CRC
4534:../Dave/Generated/src/FEE001/FEE001.c ****      */
4535:../Dave/Generated/src/FEE001/FEE001.c ****     if(StateDataPtr->FeeBlockInfo[BlockIndex].Status.Crc == 1U)
4536:../Dave/Generated/src/FEE001/FEE001.c ****     {
4537:../Dave/Generated/src/FEE001/FEE001.c ****     	CRC001_EngineContextType CRCContext = {0U};
4538:../Dave/Generated/src/FEE001/FEE001.c ****         localCRCBuffer =0U;
4539:../Dave/Generated/src/FEE001/FEE001.c **** 
4540:../Dave/Generated/src/FEE001/FEE001.c ****         StateDataPtr->FeeUserReadDestPtr = (uint8_t*)(void*)&localCRCBuffer;
4541:../Dave/Generated/src/FEE001/FEE001.c **** 
4542:../Dave/Generated/src/FEE001/FEE001.c ****     	/* calculate actual address where data is needed to be read */
4543:../Dave/Generated/src/FEE001/FEE001.c ****         ActualAddr = StateDataPtr->FeeBlockInfo[BlockIndex].Address +
4544:../Dave/Generated/src/FEE001/FEE001.c ****       		                                               FEE001_CRC_OFFSET;
4545:../Dave/Generated/src/FEE001/FEE001.c **** 
4546:../Dave/Generated/src/FEE001/FEE001.c ****     	/* Clear all error status flags before flash operation*/
4547:../Dave/Generated/src/FEE001/FEE001.c ****         FLASH003_ClearStatus();
4548:../Dave/Generated/src/FEE001/FEE001.c **** 
4549:../Dave/Generated/src/FEE001/FEE001.c ****         /* Read the CRC 16 bit data from flash for the particular block */
4550:../Dave/Generated/src/FEE001/FEE001.c ****         (void) FLASH003_ReadBytes((uint32_t)ActualAddr,StateDataPtr->
4551:../Dave/Generated/src/FEE001/FEE001.c ****                                 FeeUserReadDestPtr,(uint32_t)FEE001_CRC_OFFSET);
4552:../Dave/Generated/src/FEE001/FEE001.c **** 
4553:../Dave/Generated/src/FEE001/FEE001.c **** 
4554:../Dave/Generated/src/FEE001/FEE001.c ****     	Status = CRC001_CalculateCRC( &CRC001EnginePtr0,
4555:../Dave/Generated/src/FEE001/FEE001.c ****     			                         DataBufferPtr, Size, &CRCContext);
4556:../Dave/Generated/src/FEE001/FEE001.c **** 
4557:../Dave/Generated/src/FEE001/FEE001.c ****     	if(Status == (uint32_t)DAVEApp_SUCCESS)
4558:../Dave/Generated/src/FEE001/FEE001.c ****     	{
4559:../Dave/Generated/src/FEE001/FEE001.c ****     		Status = CRC001_GetCRC( &CRC001EnginePtr0, &CRCContext, &CRCBuffer);
4560:../Dave/Generated/src/FEE001/FEE001.c ****         	if(Status == (uint32_t)DAVEApp_SUCCESS)
4561:../Dave/Generated/src/FEE001/FEE001.c ****         	{
4562:../Dave/Generated/src/FEE001/FEE001.c ****         	    /* Check the validity of CRC for the particular block */
4563:../Dave/Generated/src/FEE001/FEE001.c ****         	    if(CRCBuffer == (localCRCBuffer))
4564:../Dave/Generated/src/FEE001/FEE001.c ****         	    {
4565:../Dave/Generated/src/FEE001/FEE001.c ****         	      StateDataPtr->FeeJobResult = FEE001_JOB_OK;
4566:../Dave/Generated/src/FEE001/FEE001.c ****         	    }
4567:../Dave/Generated/src/FEE001/FEE001.c ****         	    else
4568:../Dave/Generated/src/FEE001/FEE001.c ****         	    {
4569:../Dave/Generated/src/FEE001/FEE001.c ****         	      StateDataPtr->FeeJobResult = FEE001_JOB_CRC_FAILED;
4570:../Dave/Generated/src/FEE001/FEE001.c ****         	    }
4571:../Dave/Generated/src/FEE001/FEE001.c ****         	}
4572:../Dave/Generated/src/FEE001/FEE001.c ****         	else
4573:../Dave/Generated/src/FEE001/FEE001.c ****         	{
4574:../Dave/Generated/src/FEE001/FEE001.c ****         		StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
4575:../Dave/Generated/src/FEE001/FEE001.c ****         	}
4576:../Dave/Generated/src/FEE001/FEE001.c ****     	}
4577:../Dave/Generated/src/FEE001/FEE001.c ****     	else
4578:../Dave/Generated/src/FEE001/FEE001.c ****     	{
4579:../Dave/Generated/src/FEE001/FEE001.c ****     		StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
4580:../Dave/Generated/src/FEE001/FEE001.c ****     	}
4581:../Dave/Generated/src/FEE001/FEE001.c ****     }
4582:../Dave/Generated/src/FEE001/FEE001.c ****     else
4583:../Dave/Generated/src/FEE001/FEE001.c ****     #endif
4584:../Dave/Generated/src/FEE001/FEE001.c ****     {
4585:../Dave/Generated/src/FEE001/FEE001.c **** 	    StateDataPtr->FeeJobResult = FEE001_JOB_OK;
 4709              		.loc 1 4585 0
 4710 0078 0020     		mov	r0, #0
 4711 007a 3368     		ldr	r3, [r6]
 4712              	.LBE68:
 4713              	.LBE67:
 912:../Dave/Generated/src/FEE001/FEE001.c ****     		  ReturnValue = FEE001_COMPLETE;
 4714              		.loc 1 912 0
 4715 007c 0921     		mov	r1, #9
 4716              	.LBB70:
 4717              	.LBB69:
 4718              		.loc 1 4585 0
 4719 007e 9876     		strb	r0, [r3, #26]
 4720              	.LBE69:
 4721              	.LBE70:
 910:../Dave/Generated/src/FEE001/FEE001.c ****     	  if(StateDataPtr->FeeJobResult == FEE001_JOB_OK)
 4722              		.loc 1 910 0
 4723 0080 A77E     		ldrb	r7, [r4, #26]
 912:../Dave/Generated/src/FEE001/FEE001.c ****     		  ReturnValue = FEE001_COMPLETE;
 4724              		.loc 1 912 0
 4725 0082 7B1E     		sub	r3, r7, #1
 4726 0084 9F41     		sbc	r7, r7, r3
 4727 0086 7842     		neg	r0, r7
 4728 0088 0840     		and	r0, r1
 4729 008a 02E0     		b	.L450
 4730              	.LVL522:
 4731              	.L455:
 895:../Dave/Generated/src/FEE001/FEE001.c ****           ReturnValue = FEE001_ERROR;
 4732              		.loc 1 895 0
 4733 008c 0520     		mov	r0, #5
 4734 008e 00E0     		b	.L450
 4735              	.L456:
 899:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INCONSISTENT;
 4736              		.loc 1 899 0
 4737 0090 0620     		mov	r0, #6
 4738              	.L450:
 4739              	.LVL523:
 920:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 4740              		.loc 1 920 0
 4741 0092 0125     		mov	r5, #1
 4742 0094 A554     		strb	r5, [r4, r2]
 4743 0096 00E0     		b	.L449
 4744              	.LVL524:
 4745              	.L453:
 864:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 4746              		.loc 1 864 0
 4747 0098 0420     		mov	r0, #4
 4748              	.LVL525:
 4749              	.L449:
 928:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_Read */
 4750              		.loc 1 928 0
 4751              		@ sp needed for prologue
 4752              	.LVL526:
 4753 009a FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 4754              	.L462:
 4755              		.align	2
 4756              	.L461:
 4757 009c 00000000 		.word	FEE001_CfgPtr
 4758 00a0 00FFFF00 		.word	16776960
 4759 00a4 59010000 		.word	345
 4760              		.cfi_endproc
 4761              	.LFE44:
 4763              		.section	.text.FEE001_GetPreviousData,"ax",%progbits
 4764              		.align	1
 4765              		.global	FEE001_GetPreviousData
 4766              		.code	16
 4767              		.thumb_func
 4769              	FEE001_GetPreviousData:
 4770              	.LFB45:
 960:../Dave/Generated/src/FEE001/FEE001.c **** {
 4771              		.loc 1 960 0
 4772              		.cfi_startproc
 4773              	.LVL527:
 4774 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4775              	.LCFI27:
 4776              		.cfi_def_cfa_offset 20
 4777              		.cfi_offset 4, -20
 4778              		.cfi_offset 5, -16
 4779              		.cfi_offset 6, -12
 4780              		.cfi_offset 7, -8
 4781              		.cfi_offset 14, -4
 4782 0002 89B0     		sub	sp, sp, #36
 4783              	.LCFI28:
 4784              		.cfi_def_cfa_offset 56
 960:../Dave/Generated/src/FEE001/FEE001.c **** {
 4785              		.loc 1 960 0
 4786 0004 0393     		str	r3, [sp, #12]
 967:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4787              		.loc 1 967 0
 4788 0006 464B     		ldr	r3, .L486
 4789              	.LVL528:
 960:../Dave/Generated/src/FEE001/FEE001.c **** {
 4790              		.loc 1 960 0
 4791 0008 0191     		str	r1, [sp, #4]
 967:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4792              		.loc 1 967 0
 4793 000a 1E68     		ldr	r6, [r3]
 960:../Dave/Generated/src/FEE001/FEE001.c **** {
 4794              		.loc 1 960 0
 4795 000c 0292     		str	r2, [sp, #8]
 4796 000e 051C     		mov	r5, r0
 969:../Dave/Generated/src/FEE001/FEE001.c ****    BlkIdx = Fee_lGetUsrBlockIndex(BlockNumber);
 4797              		.loc 1 969 0
 4798 0010 FFF7FEFF 		bl	Fee_lGetUsrBlockIndex
 4799              	.LVL529:
 967:../Dave/Generated/src/FEE001/FEE001.c ****    StateDataPtr = FEE001_CfgPtr->FeeStatePtr;
 4800              		.loc 1 967 0
 4801 0014 3468     		ldr	r4, [r6]
 4802              	.LVL530:
 972:../Dave/Generated/src/FEE001/FEE001.c ****    BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 4803              		.loc 1 972 0
 4804 0016 7268     		ldr	r2, [r6, #4]
 4805 0018 8100     		lsl	r1, r0, #2
 975:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4806              		.loc 1 975 0
 4807 001a 267E     		ldrb	r6, [r4, #24]
 972:../Dave/Generated/src/FEE001/FEE001.c ****    BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 4808              		.loc 1 972 0
 4809 001c 5718     		add	r7, r2, r1
 977:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue = FEE001_UNINITIALIZED;
 4810              		.loc 1 977 0
 4811 001e 0223     		mov	r3, #2
 972:../Dave/Generated/src/FEE001/FEE001.c ****    BlkSize = FEE001_CfgPtr->FeeBlockConfigPtr[BlkIdx].Size;
 4812              		.loc 1 972 0
 4813 0020 7A88     		ldrh	r2, [r7, #2]
 4814              	.LVL531:
 975:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeInitAPICalled == 0U)
 4815              		.loc 1 975 0
 4816 0022 1E42     		tst	r6, r3
 4817 0024 78D0     		beq	.L464
 980:../Dave/Generated/src/FEE001/FEE001.c ****    else if(BlkIdx == FEE001_LOG_BLOCK_NOT_FOUND)
 4818              		.loc 1 980 0
 4819 0026 FF28     		cmp	r0, #255
 4820 0028 75D0     		beq	.L477
 986:../Dave/Generated/src/FEE001/FEE001.c ****    else if  ((DataBufferPtr == (uint8_t*) NULL_PTR) ||
 4821              		.loc 1 986 0
 4822 002a 0298     		ldr	r0, [sp, #8]
 4823              	.LVL532:
 4824 002c 0028     		cmp	r0, #0
 4825 002e 72D0     		beq	.L477
 987:../Dave/Generated/src/FEE001/FEE001.c ****             (((uint32_t)BlockOffset + Length) > BlkSize))
 4826              		.loc 1 987 0 discriminator 1
 4827 0030 039B     		ldr	r3, [sp, #12]
 4828 0032 0199     		ldr	r1, [sp, #4]
 4829 0034 5F18     		add	r7, r3, r1
 982:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 4830              		.loc 1 982 0 discriminator 1
 4831 0036 0423     		mov	r3, #4
 986:../Dave/Generated/src/FEE001/FEE001.c ****    else if  ((DataBufferPtr == (uint8_t*) NULL_PTR) ||
 4832              		.loc 1 986 0 discriminator 1
 4833 0038 9742     		cmp	r7, r2
 4834 003a 6DD8     		bhi	.L464
 995:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 4835              		.loc 1 995 0
 4836 003c 201C     		mov	r0, r4
 4837 003e FC30     		add	r0, r0, #252
 4838 0040 C76D     		ldr	r7, [r0, #92]
 4839 0042 384B     		ldr	r3, .L486+4
 4840 0044 8021     		mov	r1, #128
 4841 0046 1F40     		and	r7, r3
 4842 0048 4800     		lsl	r0, r1, #1
1036:../Dave/Generated/src/FEE001/FEE001.c **** 	  ReturnValue = FEE001_OPER_NOT_ALLOWED;
 4843              		.loc 1 1036 0
 4844 004a 0823     		mov	r3, #8
 995:../Dave/Generated/src/FEE001/FEE001.c ****    else if((StateDataPtr->FeePendReqStatus == FEE001_NO_REQ_PENDING )&&
 4845              		.loc 1 995 0
 4846 004c 8742     		cmp	r7, r0
 4847 004e 63D1     		bne	.L464
 4848              	.LVL533:
 4849              	.LBB73:
 4850              	.LBB74:
1082:../Dave/Generated/src/FEE001/FEE001.c ****    ExptdBlockCnt = Fee_lGetDFLASHPhysicalBlocks(BlkSize);
 4851              		.loc 1 1082 0
 4852 0050 101C     		mov	r0, r2
 4853 0052 FFF7FEFF 		bl	Fee_lGetDFLASHPhysicalBlocks
 4854              	.LVL534:
1084:../Dave/Generated/src/FEE001/FEE001.c ****    ReadBlockAddr = StateDataPtr->FeeNextFreeBlockAddr;
 4855              		.loc 1 1084 0
 4856 0056 E26A     		ldr	r2, [r4, #44]
1082:../Dave/Generated/src/FEE001/FEE001.c ****    ExptdBlockCnt = Fee_lGetDFLASHPhysicalBlocks(BlkSize);
 4857              		.loc 1 1082 0
 4858 0058 0090     		str	r0, [sp]
 4859              	.LVL535:
1084:../Dave/Generated/src/FEE001/FEE001.c ****    ReadBlockAddr = StateDataPtr->FeeNextFreeBlockAddr;
 4860              		.loc 1 1084 0
 4861 005a 0592     		str	r2, [sp, #20]
 4862              	.LVL536:
1086:../Dave/Generated/src/FEE001/FEE001.c ****    if(StateDataPtr->FeeStatusFlags.FeeCurrBank == 0U)
 4863              		.loc 1 1086 0
 4864 005c F207     		lsl	r2, r6, #31
 4865 005e 01D4     		bmi	.L480
1088:../Dave/Generated/src/FEE001/FEE001.c ****      EndAddr = FEE001_DFLASH_BANK0_BASE + FEE001_FIRST_DATA_BLOCK_OFFSET;
 4866              		.loc 1 1088 0
 4867 0060 314E     		ldr	r6, .L486+8
 4868 0062 00E0     		b	.L465
 4869              	.L480:
1092:../Dave/Generated/src/FEE001/FEE001.c ****      EndAddr = FEE001_DFLASH_BANK1_BASE + FEE001_FIRST_DATA_BLOCK_OFFSET;
 4870              		.loc 1 1092 0
 4871 0064 314E     		ldr	r6, .L486+12
 4872              	.L465:
 4873              	.LVL537:
1096:../Dave/Generated/src/FEE001/FEE001.c ****    RetVal = Fee_lSrchCopy(EndAddr, &ReadBlockAddr, BlockNumber);
 4874              		.loc 1 1096 0
 4875 0066 301C     		mov	r0, r6
 4876              	.LVL538:
 4877 0068 05A9     		add	r1, sp, #20
 4878 006a 2A1C     		mov	r2, r5
 4879 006c FFF7FEFF 		bl	Fee_lSrchCopy
 4880              	.LVL539:
1099:../Dave/Generated/src/FEE001/FEE001.c ****    if(RetVal == FEE001_SUCCESS)
 4881              		.loc 1 1099 0
 4882 0070 0028     		cmp	r0, #0
 4883 0072 2ED1     		bne	.L466
1102:../Dave/Generated/src/FEE001/FEE001.c ****       RetVal = Fee_lTraverseCopy(EndAddr,&ReadBlockAddr,&BlkRslt, BlockNumber);
 4884              		.loc 1 1102 0
 4885 0074 06AF     		add	r7, sp, #24
 4886 0076 301C     		mov	r0, r6
 4887              	.LVL540:
 4888 0078 05A9     		add	r1, sp, #20
 4889 007a 3A1C     		mov	r2, r7
 4890 007c 2B1C     		mov	r3, r5
 4891 007e FFF7FEFF 		bl	Fee_lTraverseCopy
 4892              	.LVL541:
1104:../Dave/Generated/src/FEE001/FEE001.c ****       if(RetVal == FEE001_SUCCESS)
 4893              		.loc 1 1104 0
 4894 0082 0028     		cmp	r0, #0
 4895 0084 25D1     		bne	.L466
1107:../Dave/Generated/src/FEE001/FEE001.c ****          RetVal = Fee_lSrchCopy(EndAddr,&ReadBlockAddr,BlockNumber);
 4896              		.loc 1 1107 0
 4897 0086 301C     		mov	r0, r6
 4898              	.LVL542:
 4899 0088 05A9     		add	r1, sp, #20
 4900 008a 2A1C     		mov	r2, r5
 4901 008c FFF7FEFF 		bl	Fee_lSrchCopy
 4902              	.LVL543:
1110:../Dave/Generated/src/FEE001/FEE001.c ****          if (RetVal == FEE001_SUCCESS)
 4903              		.loc 1 1110 0
 4904 0090 0028     		cmp	r0, #0
 4905 0092 1ED1     		bne	.L466
1118:../Dave/Generated/src/FEE001/FEE001.c ****            (void) Fee_lTraverseCopy(EndAddr,
 4906              		.loc 1 1118 0
 4907 0094 05A9     		add	r1, sp, #20
 4908 0096 2B1C     		mov	r3, r5
 4909 0098 301C     		mov	r0, r6
 4910              	.LVL544:
 4911 009a 3A1C     		mov	r2, r7
 4912 009c FFF7FEFF 		bl	Fee_lTraverseCopy
 4913              	.LVL545:
1122:../Dave/Generated/src/FEE001/FEE001.c ****            if((BlkRslt.Status & FEE001_BLK_ECC_ERROR) == FEE001_BLK_ECC_ERROR)
 4914              		.loc 1 1122 0
 4915 00a0 3979     		ldrb	r1, [r7, #4]
 4916              	.LBE74:
 4917 00a2 0123     		mov	r3, #1
 4918              	.LBB75:
 4919 00a4 1942     		tst	r1, r3
 4920 00a6 15D1     		bne	.L485
 4921              	.L469:
 4922              	.LBE75:
1127:../Dave/Generated/src/FEE001/FEE001.c ****            else if ((BlkRslt.Status & FEE001_BLK_INVALID) == FEE001_BLK_INVALID)
 4923              		.loc 1 1127 0
 4924 00a8 0223     		mov	r3, #2
 4925              	.LBB76:
 4926 00aa 1942     		tst	r1, r3
 4927 00ac 01D0     		beq	.L471
1129:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeJobResult = FEE001_JOB_INVALID;
 4928              		.loc 1 1129 0
 4929 00ae 0423     		mov	r3, #4
 4930 00b0 10E0     		b	.L485
 4931              	.L471:
1132:../Dave/Generated/src/FEE001/FEE001.c ****            else if (BlkRslt.BlockCnt != ExptdBlockCnt)
 4932              		.loc 1 1132 0
 4933 00b2 3A68     		ldr	r2, [r7]
 4934 00b4 0098     		ldr	r0, [sp]
 4935 00b6 8242     		cmp	r2, r0
 4936 00b8 01D0     		beq	.L472
1134:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeJobResult = FEE001_JOB_INCONSISTENT;
 4937              		.loc 1 1134 0
 4938 00ba 0323     		mov	r3, #3
 4939 00bc 0AE0     		b	.L485
 4940              	.L472:
1142:../Dave/Generated/src/FEE001/FEE001.c ****               PendReqPtr->BlkStartAddr=ReadBlockAddr + FEE001_DFLASH_BLOCK_SIZE;
 4941              		.loc 1 1142 0
 4942 00be 059E     		ldr	r6, [sp, #20]
 4943              	.LVL546:
1143:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_START;
 4944              		.loc 1 1143 0
 4945 00c0 1B49     		ldr	r1, .L486+16
1144:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 4946              		.loc 1 1144 0
 4947 00c2 AC22     		mov	r2, #172
1142:../Dave/Generated/src/FEE001/FEE001.c ****               PendReqPtr->BlkStartAddr=ReadBlockAddr + FEE001_DFLASH_BLOCK_SIZE;
 4948              		.loc 1 1142 0
 4949 00c4 1036     		add	r6, r6, #16
1143:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_START;
 4950              		.loc 1 1143 0
 4951 00c6 0627     		mov	r7, #6
1144:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 4952              		.loc 1 1144 0
 4953 00c8 5000     		lsl	r0, r2, #1
1142:../Dave/Generated/src/FEE001/FEE001.c ****               PendReqPtr->BlkStartAddr=ReadBlockAddr + FEE001_DFLASH_BLOCK_SIZE;
 4954              		.loc 1 1142 0
 4955 00ca A660     		str	r6, [r4, #8]
1143:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeePendReqStatus = FEE001_READ_REQ_START;
 4956              		.loc 1 1143 0
 4957 00cc 6754     		strb	r7, [r4, r1]
1144:../Dave/Generated/src/FEE001/FEE001.c ****               StateDataPtr->FeeCurrReqBlockNum = BlockNumber;
 4958              		.loc 1 1144 0
 4959 00ce 2554     		strb	r5, [r4, r0]
 4960 00d0 00E0     		b	.L485
 4961              	.LVL547:
 4962              	.L466:
1160:../Dave/Generated/src/FEE001/FEE001.c **** 	   StateDataPtr->FeeJobResult = FEE001_JOB_FAILED;
 4963              		.loc 1 1160 0
 4964 00d2 0123     		mov	r3, #1
 4965              	.LVL548:
 4966              	.L485:
 4967 00d4 A376     		strb	r3, [r4, #26]
 4968              	.LBE76:
 4969              	.LBE73:
1003:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeJobResult == FEE001_JOB_PENDING)
 4970              		.loc 1 1003 0
 4971 00d6 A37E     		ldrb	r3, [r4, #26]
 4972 00d8 022B     		cmp	r3, #2
 4973 00da 0BD1     		bne	.L473
1006:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->BlockNumber = BlockNumber;
 4974              		.loc 1 1006 0
 4975 00dc 2575     		strb	r5, [r4, #20]
1009:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->Length = Length;
 4976              		.loc 1 1009 0
 4977 00de 0C21     		mov	r1, #12
1007:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->BlockOffset = BlockOffset;
 4978              		.loc 1 1007 0
 4979 00e0 6D46     		mov	r5, sp
 4980              	.LVL549:
1009:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->Length = Length;
 4981              		.loc 1 1009 0
 4982 00e2 485B     		ldrh	r0, [r1, r5]
1007:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->BlockOffset = BlockOffset;
 4983              		.loc 1 1007 0
 4984 00e4 AE88     		ldrh	r6, [r5, #4]
1008:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->DataBufferPtr = DataBufferPtr;
 4985              		.loc 1 1008 0
 4986 00e6 029F     		ldr	r7, [sp, #8]
1009:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->Length = Length;
 4987              		.loc 1 1009 0
 4988 00e8 E081     		strh	r0, [r4, #14]
1007:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->BlockOffset = BlockOffset;
 4989              		.loc 1 1007 0
 4990 00ea A681     		strh	r6, [r4, #12]
1008:../Dave/Generated/src/FEE001/FEE001.c ****         PendReqPtr->DataBufferPtr = DataBufferPtr;
 4991              		.loc 1 1008 0
 4992 00ec 2761     		str	r7, [r4, #16]
1012:../Dave/Generated/src/FEE001/FEE001.c ****         Fee_lLocalRead((uint32_t)FEE001_PREV_READ);
 4993              		.loc 1 1012 0
 4994 00ee 0120     		mov	r0, #1
 4995 00f0 FFF7FEFF 		bl	Fee_lLocalRead
 4996              	.LVL550:
 4997              	.L473:
1015:../Dave/Generated/src/FEE001/FEE001.c ****       if(StateDataPtr->FeeJobResult == FEE001_JOB_FAILED)
 4998              		.loc 1 1015 0
 4999 00f4 A57E     		ldrb	r5, [r4, #26]
 5000 00f6 012D     		cmp	r5, #1
 5001 00f8 06D0     		beq	.L481
1019:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INCONSISTENT)
 5002              		.loc 1 1019 0
 5003 00fa 032D     		cmp	r5, #3
 5004 00fc 06D0     		beq	.L482
1029:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_COMPLETE;
 5005              		.loc 1 1029 0
 5006 00fe 0023     		mov	r3, #0
1023:../Dave/Generated/src/FEE001/FEE001.c ****       else if(StateDataPtr->FeeJobResult == FEE001_JOB_INVALID)
 5007              		.loc 1 1023 0
 5008 0100 042D     		cmp	r5, #4
 5009 0102 04D1     		bne	.L474
1025:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INVALID;
 5010              		.loc 1 1025 0
 5011 0104 0723     		mov	r3, #7
 5012 0106 02E0     		b	.L474
 5013              	.L481:
1017:../Dave/Generated/src/FEE001/FEE001.c ****           ReturnValue = FEE001_ERROR;
 5014              		.loc 1 1017 0
 5015 0108 0523     		mov	r3, #5
 5016 010a 00E0     		b	.L474
 5017              	.L482:
1021:../Dave/Generated/src/FEE001/FEE001.c ****     	  ReturnValue = FEE001_BLOCK_INCONSISTENT;
 5018              		.loc 1 1021 0
 5019 010c 0623     		mov	r3, #6
 5020              	.L474:
 5021              	.LVL551:
1032:../Dave/Generated/src/FEE001/FEE001.c ****       StateDataPtr->FeePendReqStatus = FEE001_NO_REQ_PENDING;
 5022              		.loc 1 1032 0
 5023 010e 084F     		ldr	r7, .L486+16
 5024 0110 0126     		mov	r6, #1
 5025 0112 E655     		strb	r6, [r4, r7]
 5026 0114 00E0     		b	.L464
 5027              	.LVL552:
 5028              	.L477:
 982:../Dave/Generated/src/FEE001/FEE001.c ****       ReturnValue =  FEE001_INVALID_PARAM;
 5029              		.loc 1 982 0
 5030 0116 0423     		mov	r3, #4
 5031              	.LVL553:
 5032              	.L464:
1040:../Dave/Generated/src/FEE001/FEE001.c **** }/* End of FEE001_GetPreviousData */
 5033              		.loc 1 1040 0
 5034 0118 181C     		mov	r0, r3
 5035 011a 09B0     		add	sp, sp, #36
 5036              		@ sp needed for prologue
 5037              	.LVL554:
 5038 011c F0BD     		pop	{r4, r5, r6, r7, pc}
 5039              	.L487:
 5040 011e C046     		.align	2
 5041              	.L486:
 5042 0120 00000000 		.word	FEE001_CfgPtr
 5043 0124 00FFFF00 		.word	16776960
 5044 0128 00810010 		.word	268468480
 5045 012c 00890010 		.word	268470528
 5046 0130 59010000 		.word	345
 5047              		.cfi_endproc
 5048              	.LFE45:
 5050              		.text
 5051              	.Letext0:
 5052              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 5053              		.file 3 "C:\\DAVE3_workspace\\first\\RGB_LED_Shield_XMC1200_tmp_flash\\Dave\\Generated\\inc\\DAVES
 5054              		.file 4 "../Dave/Generated/src/FEE001/../../inc/FEE001/FEE001.h"
 5055              		.file 5 "../Dave/Generated/src/FEE001/../../inc/FEE001/../../inc/FLASH003/FLASH003.h"
DEFINED SYMBOLS
                            *ABS*:00000000 FEE001.c
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:18     .text.Fee_lGetUsrBlockIndex:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:22     .text.Fee_lGetUsrBlockIndex:00000000 Fee_lGetUsrBlockIndex
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:83     .text.Fee_lGetUsrBlockIndex:00000030 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:88     .text.Fee_lGetFreeDFLASHBlocks:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:92     .text.Fee_lGetFreeDFLASHBlocks:00000000 Fee_lGetFreeDFLASHBlocks
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:128    .text.Fee_lGetFreeDFLASHBlocks:00000020 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:135    .text.Fee_lUpdateCurrBankInfo:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:139    .text.Fee_lUpdateCurrBankInfo:00000000 Fee_lUpdateCurrBankInfo
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:194    .text.Fee_lUpdateCurrBankInfo:00000030 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:203    .text.Fee_lSetMarkerBlockBuffer:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:207    .text.Fee_lSetMarkerBlockBuffer:00000000 Fee_lSetMarkerBlockBuffer
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:240    .text.Fee_lSetMarkerBlockBuffer:00000018 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:245    .text.Fee_lSetMarkerPageBuffer:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:249    .text.Fee_lSetMarkerPageBuffer:00000000 Fee_lSetMarkerPageBuffer
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:339    .text.Fee_lSetMarkerPageBuffer:00000044 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:344    .text.Fee_lSrchCopy:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:348    .text.Fee_lSrchCopy:00000000 Fee_lSrchCopy
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:434    .text.Fee_lSrchCopy:00000040 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:439    .text.Fee_lTraverseCopy:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:443    .text.Fee_lTraverseCopy:00000000 Fee_lTraverseCopy
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:582    .text.Fee_lTraverseCopy:00000078 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:587    .text.Fee_lLocalRead:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:591    .text.Fee_lLocalRead:00000000 Fee_lLocalRead
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:964    .text.Fee_lLocalRead:00000184 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:971    .text.Fee_lReadVerifyMarker:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:975    .text.Fee_lReadVerifyMarker:00000000 Fee_lReadVerifyMarker
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1068   .text.Fee_lReadVerifyMarker:00000050 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1074   .text.Fee_lEraseBank:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1078   .text.Fee_lEraseBank:00000000 Fee_lEraseBank
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1136   .text.Fee_lEraseBank:0000002c $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1141   .text.Fee_lGCWrite:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1145   .text.Fee_lGCWrite:00000000 Fee_lGCWrite
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1206   .text.Fee_lGCWrite:00000030 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1211   .text.Fee_lPrepareDFlash:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1215   .text.Fee_lPrepareDFlash:00000000 Fee_lPrepareDFlash
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1241   .text.Fee_lPrepareDFlash:00000018 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1368   .text.Fee_lPrepareDFlash:000000ac $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1374   .text.Fee_lGetDFLASHPhysicalBlocks:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1378   .text.Fee_lGetDFLASHPhysicalBlocks:00000000 Fee_lGetDFLASHPhysicalBlocks
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1426   .text.Fee_lUpdateCache:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1430   .text.Fee_lUpdateCache:00000000 Fee_lUpdateCache
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1900   .text.Fee_lUpdateCache:000001f8 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1908   .text.Fee_lInitllegalStateMachine:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1912   .text.Fee_lInitllegalStateMachine:00000000 Fee_lInitllegalStateMachine
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1964   .text.Fee_lInitllegalStateMachine:00000030 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1969   .text.Fee_lGarbageCollection:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1973   .text.Fee_lGarbageCollection:00000000 Fee_lGarbageCollection
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:2007   .text.Fee_lGarbageCollection:0000001c $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:2015   .text.Fee_lGarbageCollection:00000024 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:2448   .text.Fee_lGarbageCollection:000001f4 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:2453   .text.Fee_lInitDirtyStateMachine:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:2457   .text.Fee_lInitDirtyStateMachine:00000000 Fee_lInitDirtyStateMachine
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:2649   .text.Fee_lInitDirtyStateMachine:000000e8 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:2655   .text.Fee_lLocalWrite:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:2659   .text.Fee_lLocalWrite:00000000 Fee_lLocalWrite
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:3184   .text.Fee_lLocalWrite:00000218 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:3191   .text.FEE001_Init:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:3196   .text.FEE001_Init:00000000 FEE001_Init
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:3921   .text.FEE001_Init:00000340 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:3928   .text.FEE001_Init:00000354 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4024   .text.FEE001_Init:000003bc $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4029   .text.FEE001_Write:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4034   .text.FEE001_Write:00000000 FEE001_Write
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4163   .text.FEE001_Write:0000007c $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4171   .text.FEE001_InvalidateBlock:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4176   .text.FEE001_InvalidateBlock:00000000 FEE001_InvalidateBlock
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4286   .text.FEE001_InvalidateBlock:0000006c $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4294   .text.FEE001_Read:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4299   .text.FEE001_Read:00000000 FEE001_Read
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4454   .text.FEE001_Read:000000a0 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4461   .text.FEE001_StartGarbageCollection:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4466   .text.FEE001_StartGarbageCollection:00000000 FEE001_StartGarbageCollection
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4528   .text.FEE001_StartGarbageCollection:0000003c $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4534   .text.FEE001_GetStatus:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4539   .text.FEE001_GetStatus:00000000 FEE001_GetStatus
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4582   .text.FEE001_GetStatus:00000024 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4588   .text.FEE001_ReadBlockWithCRC:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4593   .text.FEE001_ReadBlockWithCRC:00000000 FEE001_ReadBlockWithCRC
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4757   .text.FEE001_ReadBlockWithCRC:0000009c $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4764   .text.FEE001_GetPreviousData:00000000 $t
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:4769   .text.FEE001_GetPreviousData:00000000 FEE001_GetPreviousData
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:5042   .text.FEE001_GetPreviousData:00000120 $d
                     .debug_frame:00000010 $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1246   .text.Fee_lPrepareDFlash:0000001d $d
C:\Users\ChiaJiaY\AppData\Local\Temp\ccIcXPXH.s:1246   .text.Fee_lPrepareDFlash:0000001e $t
                           .group:00000000 wm4.1.e09b9dd5224853206c418479f14d6963
                           .group:00000000 wm4.uc_id.h.35.62dcba5f6261c1436e3866a751c1a98b
                           .group:00000000 wm4.XMC1200.h.45.4c899b4822ac22c0f00d6fd7f173cc96
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1200.h.122.96b58b1204def4c9f76341a4e21abaf6
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.BCCUDIM01_Conf.h.46.1e3ffd6581cbd401bcc28a6ce60f19f0
                           .group:00000000 wm4.BCCUCH01_Conf.h.48.2ce679450068d1645a9e0c3a7937e697
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP003_Conf.h.49.a3ea83c25b3af429e78acb0f2dc45bd4
                           .group:00000000 wm4.PWMSP003.h.103.903071678b9af5683776405c5b299fbb
                           .group:00000000 wm4.IO002_Conf.h.51.9fc2eb43e77e0a2c02912a3744f3ec9d
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.NVIC002_Conf.h.62.64042456dc7f2eb96fc713abacb4c5d4
                           .group:00000000 wm4.DMX512RD01_Conf.h.49.036b57ce74a404ea8f8ade310b364436
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.Usic.h.40.f6a4fed014760114cf5039d398d6dd2c
                           .group:00000000 wm4.I2C003_Conf.h.50.5fb7c255d386301836868ba2fd78b91f
                           .group:00000000 wm4.FLASH003.h.97.0e4570cae4de3fc62b4b447e6d75bbc9
                           .group:00000000 wm4.FLASH003_Conf.h.72.6d366060eda228c6c8843c467361c30c
                           .group:00000000 wm4.FEE001_Conf.h.70.ead447049f1b404ef80ce24c9a9d7933

UNDEFINED SYMBOLS
FEE001_CfgPtr
FLASH003_ClearStatus
FLASH003_ReadBytes
FLASH003_ReadBlock
FLASH003_ErasePage
FLASH003_WriteBlock
__gnu_thumb1_case_uqi
FLASH003_ReadWord
FLASH003_ProgVerifyPage
