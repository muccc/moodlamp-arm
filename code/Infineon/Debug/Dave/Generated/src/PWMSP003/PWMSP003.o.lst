   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWMSP003.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PWMSP003_lSetCompareEdgeAlign,"ax",%progbits
  18              		.align	1
  19              		.global	PWMSP003_lSetCompareEdgeAlign
  20              		.code	16
  21              		.thumb_func
  23              	PWMSP003_lSetCompareEdgeAlign:
  24              	.LFB38:
  25              		.file 1 "../Dave/Generated/src/PWMSP003/PWMSP003.c"
   1:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /*CODE_BLOCK_BEGIN[pwmsp003.c]*/
   2:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
   3:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /*******************************************************************************
   4:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
   5:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
   6:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** Copyright (C) 2013 Infineon Technologies AG. All rights reserved.          **
   7:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
   8:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** Infineon Technologies AG (Infineon) is supplying this software for use     **
   9:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** with Infineon's microcontrollers.                                          **
  10:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** This file can be freely distributed within development tools that are      **
  11:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** supporting such microcontrollers.                                          **
  12:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
  13:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED **
  14:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF         **
  15:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS         **
  16:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** SOFTWARE. INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR          **
  17:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.  **
  18:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
  19:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ********************************************************************************
  20:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
  21:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  22:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
  23:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** COMPILER : Compiler Independent                                            **
  24:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
  25:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** AUTHOR   : App Developer                                                   **
  26:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
  27:../Dave/Generated/src/PWMSP003/PWMSP003.c **** *******************************************************************************/
  28:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
  29:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /*******************************************************************************
  30:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                      Revision History                                      **
  31:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ********************************************************************************
  32:../Dave/Generated/src/PWMSP003/PWMSP003.c ****    1.0.4  31-Jan-2014   1. Initial version
  33:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                         2. Minor updates to remove warnings
  34:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                         3. Document automation by DaveDocGen script
  35:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                         4. XMC1000 VQFN package support added
  36:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                            XMC4000 Device support extended for XMC4500 AC step
  37:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                            XMC4400 AB Step and XMC4200 AB Step.
  38:../Dave/Generated/src/PWMSP003/PWMSP003.c **** *******************************************************************************/
  39:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
  40:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /*******************************************************************************
  41:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                      Author(s) Identity                                    **
  42:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ********************************************************************************
  43:../Dave/Generated/src/PWMSP003/PWMSP003.c **** **                                                                            **
  44:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** Initials     Name                                                          **
  45:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** ---------------------------------------------------------------------------**
  46:../Dave/Generated/src/PWMSP003/PWMSP003.c **** ** SSAM         Sridhar Sampath                                               **
  47:../Dave/Generated/src/PWMSP003/PWMSP003.c **** *******************************************************************************/
  48:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
  49:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
  50:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @file  PWMSP003.c
  51:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @brief This file contains App parameter data as per GUI configurations
  52:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
  53:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
  54:../Dave/Generated/src/PWMSP003/PWMSP003.c **** #include "../../inc/PWMSP003/PWMSP003.h"
  55:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
  56:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /*******************************************************************************
  57:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  **                 Private Function declarations                             **
  58:../Dave/Generated/src/PWMSP003/PWMSP003.c **** *******************************************************************************/
  59:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
  60:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @cond INTERNAL_DOCS
  61:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
  62:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
  63:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @ingroup PWMSP003_privatefunc
  64:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @{
  65:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
  66:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
  67:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  /**
  68:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
  69:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @param[in]  HandlePtr Pointer to PWMSP003_HandleType structure
  70:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @return status_t status
  71:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
  72:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_lInit(const PWMSP003_HandleType* HandlePtr);
  73:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
  74:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @brief This function will set duty cycle if edge aligned mode
  75:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  *        without timer concatenation is selected.
  76:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @param[in]  HandlePtr Pointer to PWMSP003_HandleType structure
  77:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @param[in]  Compare This is duty cycle in percentage
  78:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @return status_t void
  79:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
  80:../Dave/Generated/src/PWMSP003/PWMSP003.c **** void PWMSP003_lSetCompareEdgeAlign( void* Handle, uint32_t Compare);
  81:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
  82:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
  83:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @param[in]  HandlePtr Pointer to PWMSP003_HandleType structure
  84:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @param[in]  Compare This is duty cycle in percentage
  85:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @return status_t void
  86:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
  87:../Dave/Generated/src/PWMSP003/PWMSP003.c **** void PWMSP003_lSetCompareCenterAlign(void* Handle, uint32_t Compare);
  88:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
  89:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @brief This function will set duty cycle if edge aligned mode without
  90:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  *        timer concatenation is selected.
  91:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @param[in]  HandlePtr Pointer to PWMSP003_HandleType structure
  92:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @param[in]  Duty This is duty cycle in percentage
  93:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @return status_t void
  94:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
  95:../Dave/Generated/src/PWMSP003/PWMSP003.c **** void PWMSP003_lSetDutyEdgeAlign( void* Handle, float Duty);
  96:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
  97:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
  98:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @param[in]  HandlePtr Pointer to PWMSP003_HandleType structure
  99:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @param[in]  Duty This is duty cycle in percentage
 100:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @return status_t void
 101:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 102:../Dave/Generated/src/PWMSP003/PWMSP003.c **** void PWMSP003_lSetDutyCenterAlign(void* Handle, float Duty);
 103:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  /**
 104:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @}
 105:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 106:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 107:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  /*******************************************************************************
 108:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  **                 Function definitions                                      **
 109:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  ******************************************************************************/
 110:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 111:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @ingroup PWMSP003_funcdefines
 112:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * @{
 113:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 114:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 115:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 116:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function is used to change the compare register value
 117:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * in edge-aligned mode.
 118:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 119:../Dave/Generated/src/PWMSP003/PWMSP003.c **** void PWMSP003_lSetCompareEdgeAlign( void* Handle, uint32_t Compare)
 120:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
  26              		.loc 1 120 0
  27              		.cfi_startproc
  28              	.LVL0:
 121:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp1;
 122:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp2;
 123:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   PWMSP003_HandleType* HandlePtr = (PWMSP003_HandleType*)Handle;
 124:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 125:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
  29              		.loc 1 125 0
  30 0000 C369     		ldr	r3, [r0, #28]
  31 0002 89B2     		uxth	r1, r1
  32              	.LVL1:
  33 0004 D963     		str	r1, [r3, #60]
  34              	.LVL2:
 126:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 127:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   /* Request shadow transfer */
 128:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp2 = (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 129:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 130:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
  35              		.loc 1 130 0
  36 0006 8369     		ldr	r3, [r0, #24]
 128:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp2 = (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
  37              		.loc 1 128 0
  38 0008 5830     		add	r0, r0, #88
  39              	.LVL3:
  40 000a 0278     		ldrb	r2, [r0]
  41              		.loc 1 130 0
  42 000c 0120     		mov	r0, #1
  43              	.LVL4:
 128:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp2 = (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
  44              		.loc 1 128 0
  45 000e 9200     		lsl	r2, r2, #2
  46              	.LVL5:
  47              		.loc 1 130 0
  48 0010 1969     		ldr	r1, [r3, #16]
  49 0012 9040     		lsl	r0, r0, r2
  50 0014 021C     		mov	r2, r0
  51              	.LVL6:
  52 0016 0A43     		orr	r2, r1
  53 0018 1A61     		str	r2, [r3, #16]
 131:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
  54              		.loc 1 131 0
  55              		@ sp needed for prologue
  56 001a 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE38:
  60              		.section	.text.PWMSP003_lSetCompareCenterAlign,"ax",%progbits
  61              		.align	1
  62              		.global	PWMSP003_lSetCompareCenterAlign
  63              		.code	16
  64              		.thumb_func
  66              	PWMSP003_lSetCompareCenterAlign:
  67              	.LFB39:
 132:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 133:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 134:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function is used to change the compare register value
 135:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * in center-aligned mode.
 136:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 137:../Dave/Generated/src/PWMSP003/PWMSP003.c **** void PWMSP003_lSetCompareCenterAlign(void* Handle, uint32_t Compare)
 138:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
  68              		.loc 1 138 0
  69              		.cfi_startproc
  70              	.LVL7:
 139:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp1;
 140:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 141:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   PWMSP003_HandleType* HandlePtr = (PWMSP003_HandleType*)Handle;
 142:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 143:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
  71              		.loc 1 143 0
  72 0000 C369     		ldr	r3, [r0, #28]
  73 0002 89B2     		uxth	r1, r1
  74              	.LVL8:
  75 0004 D963     		str	r1, [r3, #60]
  76              	.LVL9:
 144:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 145:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   /* Request shadow transfer */
 146:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos +\
 147:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                           (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice));
 148:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
  77              		.loc 1 148 0
  78 0006 8369     		ldr	r3, [r0, #24]
 147:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                           (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice));
  79              		.loc 1 147 0
  80 0008 5830     		add	r0, r0, #88
  81              	.LVL10:
  82 000a 0278     		ldrb	r2, [r0]
  83              		.loc 1 148 0
  84 000c 0120     		mov	r0, #1
  85              	.LVL11:
 146:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos +\
  86              		.loc 1 146 0
  87 000e 9200     		lsl	r2, r2, #2
  88              	.LVL12:
  89              		.loc 1 148 0
  90 0010 1969     		ldr	r1, [r3, #16]
  91 0012 9040     		lsl	r0, r0, r2
  92 0014 021C     		mov	r2, r0
  93              	.LVL13:
  94 0016 0A43     		orr	r2, r1
  95 0018 1A61     		str	r2, [r3, #16]
 149:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
  96              		.loc 1 149 0
  97              		@ sp needed for prologue
  98 001a 7047     		bx	lr
  99              		.cfi_endproc
 100              	.LFE39:
 102              		.global	__aeabi_ui2f
 103              		.global	__aeabi_fsub
 104              		.global	__aeabi_fdiv
 105              		.global	__aeabi_fmul
 106              		.global	__aeabi_f2uiz
 107              		.section	.text.PWMSP003_lSetDutyEdgeAlign,"ax",%progbits
 108              		.align	1
 109              		.global	PWMSP003_lSetDutyEdgeAlign
 110              		.code	16
 111              		.thumb_func
 113              	PWMSP003_lSetDutyEdgeAlign:
 114              	.LFB40:
 150:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 151:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 152:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function is used to change the duty cycle of the PWM waveform
 153:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * in edge-aligned mode
 154:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 155:../Dave/Generated/src/PWMSP003/PWMSP003.c **** void PWMSP003_lSetDutyEdgeAlign( void* Handle, float Duty)
 156:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 115              		.loc 1 156 0
 116              		.cfi_startproc
 117              	.LVL14:
 118 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 119              	.LCFI0:
 120              		.cfi_def_cfa_offset 24
 121              		.cfi_offset 3, -24
 122              		.cfi_offset 4, -20
 123              		.cfi_offset 5, -16
 124              		.cfi_offset 6, -12
 125              		.cfi_offset 7, -8
 126              		.cfi_offset 14, -4
 157:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t CompareVal = (uint32_t)0;
 158:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp1;
 159:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   float fDuty, fPRS ;
 160:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   PWMSP003_HandleType* HandlePtr = (PWMSP003_HandleType*)Handle;
 161:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fDuty = Duty;
 162:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 163:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 164:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 165:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 166:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 127              		.loc 1 166 0
 128 0002 C569     		ldr	r5, [r0, #28]
 156:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 129              		.loc 1 156 0
 130 0004 041C     		mov	r4, r0
 131              		.loc 1 166 0
 132 0006 686B     		ldr	r0, [r5, #52]
 133              	.LVL15:
 156:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 134              		.loc 1 156 0
 135 0008 0F1C     		add	r7, r1, #0
 136              	.LVL16:
 137              		.loc 1 166 0
 138 000a 0130     		add	r0, r0, #1
 139              	.LVL17:
 140 000c FFF7FEFF 		bl	__aeabi_ui2f
 141              	.LVL18:
 165:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 142              		.loc 1 165 0
 143 0010 391C     		add	r1, r7, #0
 144              		.loc 1 166 0
 145 0012 061C     		add	r6, r0, #0
 165:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 146              		.loc 1 165 0
 147 0014 0C48     		ldr	r0, .L4
 148 0016 FFF7FEFF 		bl	__aeabi_fsub
 149              	.LVL19:
 150 001a 0B49     		ldr	r1, .L4
 151 001c FFF7FEFF 		bl	__aeabi_fdiv
 152              	.LVL20:
 153 0020 011C     		add	r1, r0, #0
 167:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   CompareVal = (uint32_t)( fPRS * fDuty);
 154              		.loc 1 167 0
 155 0022 301C     		add	r0, r6, #0
 156 0024 FFF7FEFF 		bl	__aeabi_fmul
 157              	.LVL21:
 158 0028 FFF7FEFF 		bl	__aeabi_f2uiz
 159              	.LVL22:
 168:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yRegsPtr->CRS = CompareVal  & 0xFFFFU;
 160              		.loc 1 168 0
 161 002c 80B2     		uxth	r0, r0
 162 002e E863     		str	r0, [r5, #60]
 163              	.LVL23:
 169:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 170:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   /*Shadow transfer */
 171:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos +\
 172:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                 ((uint32_t)PWMSP003_NO_OF_SLICES *(uint32_t)HandlePtr->Slice));
 173:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |=\
 164              		.loc 1 173 0
 165 0030 A369     		ldr	r3, [r4, #24]
 172:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                 ((uint32_t)PWMSP003_NO_OF_SLICES *(uint32_t)HandlePtr->Slice));
 166              		.loc 1 172 0
 167 0032 5834     		add	r4, r4, #88
 168              	.LVL24:
 169 0034 2278     		ldrb	r2, [r4]
 174:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                  (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 170              		.loc 1 174 0
 171 0036 0127     		mov	r7, #1
 172              	.LVL25:
 171:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos +\
 173              		.loc 1 171 0
 174 0038 9400     		lsl	r4, r2, #2
 175              	.LVL26:
 173:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |=\
 176              		.loc 1 173 0
 177 003a 1969     		ldr	r1, [r3, #16]
 178              		.loc 1 174 0
 179 003c A740     		lsl	r7, r7, r4
 180 003e 3D1C     		mov	r5, r7
 173:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |=\
 181              		.loc 1 173 0
 182 0040 0D43     		orr	r5, r1
 183 0042 1D61     		str	r5, [r3, #16]
 175:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 176:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 184              		.loc 1 176 0
 185              		@ sp needed for prologue
 186              	.LVL27:
 187 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 188              	.L5:
 189 0046 C046     		.align	2
 190              	.L4:
 191 0048 0000C842 		.word	1120403456
 192              		.cfi_endproc
 193              	.LFE40:
 195              		.section	.text.PWMSP003_lSetDutyCenterAlign,"ax",%progbits
 196              		.align	1
 197              		.global	PWMSP003_lSetDutyCenterAlign
 198              		.code	16
 199              		.thumb_func
 201              	PWMSP003_lSetDutyCenterAlign:
 202              	.LFB41:
 177:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 178:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 179:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function is used to change the duty cycle of the PWM waveform
 180:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * in center-aligned mode
 181:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 182:../Dave/Generated/src/PWMSP003/PWMSP003.c **** void PWMSP003_lSetDutyCenterAlign(void* Handle, float Duty)
 183:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 203              		.loc 1 183 0
 204              		.cfi_startproc
 205              	.LVL28:
 206 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 207              	.LCFI1:
 208              		.cfi_def_cfa_offset 24
 209              		.cfi_offset 3, -24
 210              		.cfi_offset 4, -20
 211              		.cfi_offset 5, -16
 212              		.cfi_offset 6, -12
 213              		.cfi_offset 7, -8
 214              		.cfi_offset 14, -4
 184:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t CompareVal = (uint32_t)0x00;
 185:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp1;
 186:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   float fDuty, fPRS ;
 187:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   PWMSP003_HandleType* HandlePtr = (PWMSP003_HandleType*)Handle;
 188:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fDuty = Duty;
 189:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 190:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 191:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 215              		.loc 1 191 0
 216 0002 C569     		ldr	r5, [r0, #28]
 183:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 217              		.loc 1 183 0
 218 0004 041C     		mov	r4, r0
 219              		.loc 1 191 0
 220 0006 686B     		ldr	r0, [r5, #52]
 221              	.LVL29:
 183:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 222              		.loc 1 183 0
 223 0008 0F1C     		add	r7, r1, #0
 224              	.LVL30:
 225              		.loc 1 191 0
 226 000a FFF7FEFF 		bl	__aeabi_ui2f
 227              	.LVL31:
 190:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 228              		.loc 1 190 0
 229 000e 391C     		add	r1, r7, #0
 230              		.loc 1 191 0
 231 0010 061C     		add	r6, r0, #0
 190:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 232              		.loc 1 190 0
 233 0012 0C48     		ldr	r0, .L7
 234 0014 FFF7FEFF 		bl	__aeabi_fsub
 235              	.LVL32:
 236 0018 0A49     		ldr	r1, .L7
 237 001a FFF7FEFF 		bl	__aeabi_fdiv
 238              	.LVL33:
 239 001e 011C     		add	r1, r0, #0
 192:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   CompareVal = (uint32_t)( fPRS * fDuty);
 240              		.loc 1 192 0
 241 0020 301C     		add	r0, r6, #0
 242 0022 FFF7FEFF 		bl	__aeabi_fmul
 243              	.LVL34:
 244 0026 FFF7FEFF 		bl	__aeabi_f2uiz
 245              	.LVL35:
 193:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)CompareVal  & 0xFFFFU;
 246              		.loc 1 193 0
 247 002a 80B2     		uxth	r0, r0
 248 002c E863     		str	r0, [r5, #60]
 249              	.LVL36:
 194:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 195:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   /*shadow transfer */
 196:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos +\
 197:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                          (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice));
 198:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |=\
 250              		.loc 1 198 0
 251 002e A369     		ldr	r3, [r4, #24]
 197:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                          (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice));
 252              		.loc 1 197 0
 253 0030 5834     		add	r4, r4, #88
 254              	.LVL37:
 255 0032 2278     		ldrb	r2, [r4]
 199:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                  (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 256              		.loc 1 199 0
 257 0034 0127     		mov	r7, #1
 258              	.LVL38:
 196:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos +\
 259              		.loc 1 196 0
 260 0036 9400     		lsl	r4, r2, #2
 261              	.LVL39:
 198:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |=\
 262              		.loc 1 198 0
 263 0038 1969     		ldr	r1, [r3, #16]
 264              		.loc 1 199 0
 265 003a A740     		lsl	r7, r7, r4
 266 003c 3D1C     		mov	r5, r7
 198:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |=\
 267              		.loc 1 198 0
 268 003e 0D43     		orr	r5, r1
 269 0040 1D61     		str	r5, [r3, #16]
 200:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 270              		.loc 1 200 0
 271              		@ sp needed for prologue
 272              	.LVL40:
 273 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 274              	.L8:
 275              		.align	2
 276              	.L7:
 277 0044 0000C842 		.word	1120403456
 278              		.cfi_endproc
 279              	.LFE41:
 281              		.section	.text.PWMSP003_lInit,"ax",%progbits
 282              		.align	1
 283              		.global	PWMSP003_lInit
 284              		.code	16
 285              		.thumb_func
 287              	PWMSP003_lInit:
 288              	.LFB43:
 201:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 202:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 203:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function initializes the app
 204:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 205:../Dave/Generated/src/PWMSP003/PWMSP003.c **** void PWMSP003_Init(void)
 206:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 207:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Error = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 208:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint8_t HandleNum;
 209:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 210:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   for(HandleNum = 0; HandleNum < PWMSP003_NUM_INSTANCES; HandleNum++)
 211:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 212:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Error = PWMSP003_lInit((PWMSP003_HandleType*)PWMSP003_HandleArr[HandleNum]);
 213:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 214:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Start the app if "Start after initialization" is checked */
 215:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(Error == (uint32_t)DAVEApp_SUCCESS)
 216:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 217:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if (PWMSP003_HandleArr[HandleNum]->StartControl == (uint8_t)SET)
 218:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 219:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         Error = PWMSP003_Start((PWMSP003_HandleType*)
 220:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                             PWMSP003_HandleArr[HandleNum]);
 221:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 222:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 223:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 224:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 225:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 226:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 227:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function initializes an instance of the app
 228:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 229:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_lInit(const PWMSP003_HandleType* HandlePtr)
 230:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 289              		.loc 1 230 0
 290              		.cfi_startproc
 291              	.LVL41:
 292 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 293              	.LCFI2:
 294              		.cfi_def_cfa_offset 20
 295              		.cfi_offset 4, -20
 296              		.cfi_offset 5, -16
 297              		.cfi_offset 6, -12
 298              		.cfi_offset 7, -8
 299              		.cfi_offset 14, -4
 300 0002 021C     		mov	r2, r0
 231:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 232:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp;
 233:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   PWMSP003_EdgeTriggerType EdgeSelection = PWMSP003_NO_TRIGGER;
 234:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   PWMSP003_ActiveLevelType LevelSelection = PWMSP003_ACTIVE_ON_HIGH;
 235:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 236:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   do
 237:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 238:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 301              		.loc 1 238 0
 302 0004 C06D     		ldr	r0, [r0, #92]
 303              	.LVL42:
 230:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 304              		.loc 1 230 0
 305 0006 85B0     		sub	sp, sp, #20
 306              	.LCFI3:
 307              		.cfi_def_cfa_offset 40
 308              		.loc 1 238 0
 309 0008 0390     		str	r0, [sp, #12]
 310 000a 0378     		ldrb	r3, [r0]
 231:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 311              		.loc 1 231 0
 312 000c 0120     		mov	r0, #1
 313              		.loc 1 238 0
 314 000e 002B     		cmp	r3, #0
 315 0010 00D0     		beq	.LCB278
 316 0012 14E2     		b	.L68	@long jump
 317              	.LCB278:
 239:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 240:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       break;
 241:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 242:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP003_SLICE_CLEAR;
 318              		.loc 1 242 0
 319 0014 D369     		ldr	r3, [r2, #28]
 320 0016 0721     		mov	r1, #7
 321 0018 1961     		str	r1, [r3, #16]
 243:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 244:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(HandlePtr->kEvent0Function != PWMSP003_NO_FUNCTION)
 322              		.loc 1 244 0
 323 001a 541D     		add	r4, r2, #5
 324 001c E57F     		ldrb	r5, [r4, #31]
 325 001e 69B2     		sxtb	r1, r5
 326 0020 4C1C     		add	r4, r1, #1
 327 0022 4FD0     		beq	.L12
 245:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 246:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(HandlePtr->kEvent0Function == PWMSP003_EXTERNAL_START)
 328              		.loc 1 246 0
 329 0024 002D     		cmp	r5, #0
 330 0026 04D1     		bne	.L13
 247:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 248:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kStartEdge;
 331              		.loc 1 248 0
 332 0028 101C     		mov	r0, r2
 333 002a 4330     		add	r0, r0, #67
 334 002c 0078     		ldrb	r0, [r0]
 335              	.LVL43:
 234:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   PWMSP003_ActiveLevelType LevelSelection = PWMSP003_ACTIVE_ON_HIGH;
 336              		.loc 1 234 0
 337 002e 2C1C     		mov	r4, r5
 338 0030 1FE0     		b	.L14
 339              	.LVL44:
 340              	.L13:
 249:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 250:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent0Function == PWMSP003_EXTERNAL_STOP)
 341              		.loc 1 250 0
 342 0032 0229     		cmp	r1, #2
 343 0034 02D1     		bne	.L15
 251:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 252:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kStopEdge;
 344              		.loc 1 252 0
 345 0036 161C     		mov	r6, r2
 346 0038 4436     		add	r6, r6, #68
 347 003a 08E0     		b	.L75
 348              	.L15:
 253:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 254:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent0Function == PWMSP003_EXTERNAL_LOAD)
 349              		.loc 1 254 0
 350 003c 0C29     		cmp	r1, #12
 351 003e 02D1     		bne	.L17
 255:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 256:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kLoadEventEdge;
 352              		.loc 1 256 0
 353 0040 161C     		mov	r6, r2
 354 0042 4036     		add	r6, r6, #64
 355 0044 03E0     		b	.L75
 356              	.L17:
 257:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 258:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent0Function == PWMSP003_EXTERNAL_COUNT)
 357              		.loc 1 258 0
 358 0046 0E29     		cmp	r1, #14
 359 0048 03D1     		bne	.L18
 259:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 260:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kCountEventEdge;
 360              		.loc 1 260 0
 361 004a 161C     		mov	r6, r2
 362 004c 3F36     		add	r6, r6, #63
 363              	.L75:
 364 004e 3078     		ldrb	r0, [r6]
 365              	.LVL45:
 366 0050 09E0     		b	.L20
 367              	.LVL46:
 368              	.L18:
 261:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 262:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else
 263:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 264:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = PWMSP003_RISING_EDGE;
 265:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 266:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 267:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(HandlePtr->kEvent0Function == PWMSP003_EXTERNAL_COUNT_DIRECTION)
 369              		.loc 1 267 0
 370 0052 0A29     		cmp	r1, #10
 371 0054 02D1     		bne	.L51
 268:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 269:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kCntDirActiveLevel;
 372              		.loc 1 269 0
 373 0056 171C     		mov	r7, r2
 374 0058 3637     		add	r7, r7, #54
 375 005a 09E0     		b	.L76
 376              	.L51:
 270:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 271:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent0Function == PWMSP003_EXTERNAL_MODULATION)
 377              		.loc 1 271 0
 378 005c 1229     		cmp	r1, #18
 379 005e 02D1     		bne	.L20
 272:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 273:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kModulationActiveLevel;
 380              		.loc 1 273 0
 381 0060 171C     		mov	r7, r2
 382 0062 3337     		add	r7, r7, #51
 383 0064 04E0     		b	.L76
 384              	.LVL47:
 385              	.L20:
 234:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   PWMSP003_ActiveLevelType LevelSelection = PWMSP003_ACTIVE_ON_HIGH;
 386              		.loc 1 234 0
 387 0066 0024     		mov	r4, #0
 274:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 275:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent0Function == PWMSP003_EXTERNAL_GATING)
 388              		.loc 1 275 0
 389 0068 0829     		cmp	r1, #8
 390 006a 02D1     		bne	.L14
 276:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 277:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kGateEventActiveLevel;
 391              		.loc 1 277 0
 392 006c 171C     		mov	r7, r2
 393 006e 3E37     		add	r7, r7, #62
 394              	.L76:
 395 0070 3C78     		ldrb	r4, [r7]
 396              	.LVL48:
 397              	.L14:
 278:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 279:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else
 280:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 281:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         /** */
 282:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 283:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 284:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV0EM_Msk,\
 398              		.loc 1 284 0
 399 0072 C026     		mov	r6, #192
 400 0074 B602     		lsl	r6, r6, #10
 401 0076 0004     		lsl	r0, r0, #16
 402 0078 1F68     		ldr	r7, [r3]
 403 007a 3040     		and	r0, r6
 404 007c 774E     		ldr	r6, .L83
 285:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_INS_EV0EM_Pos, (uint32_t)EdgeSelection);
 286:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 287:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV0LM_Msk,\
 405              		.loc 1 287 0
 406 007e A405     		lsl	r4, r4, #22
 407              	.LVL49:
 284:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV0EM_Msk,\
 408              		.loc 1 284 0
 409 0080 3E40     		and	r6, r7
 410 0082 3043     		orr	r0, r6
 411 0084 1860     		str	r0, [r3]
 412              		.loc 1 287 0
 413 0086 8020     		mov	r0, #128
 414 0088 1F68     		ldr	r7, [r3]
 415 008a C603     		lsl	r6, r0, #15
 416 008c 7448     		ldr	r0, .L83+4
 417 008e 3440     		and	r4, r6
 418 0090 0740     		and	r7, r0
 419 0092 3C43     		orr	r4, r7
 420 0094 1C60     		str	r4, [r3]
 288:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_INS_EV0LM_Pos, (uint32_t)LevelSelection);
 289:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 290:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_LPF0M_Msk,\
 421              		.loc 1 290 0
 422 0096 141C     		mov	r4, r2
 423 0098 3034     		add	r4, r4, #48
 424 009a 2678     		ldrb	r6, [r4]
 425 009c C020     		mov	r0, #192
 426 009e 1F68     		ldr	r7, [r3]
 427 00a0 7406     		lsl	r4, r6, #25
 428 00a2 C604     		lsl	r6, r0, #19
 429 00a4 6F48     		ldr	r0, .L83+8
 430 00a6 3440     		and	r4, r6
 431 00a8 3840     		and	r0, r7
 432 00aa 2043     		orr	r0, r4
 433 00ac 1860     		str	r0, [r3]
 291:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_INS_LPF0M_Pos, HandlePtr->kEvent0_lpfconfig);
 292:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 293:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(HandlePtr->kEvent0Function != PWMSP003_EXTERNAL_START)
 434              		.loc 1 293 0
 435 00ae 002D     		cmp	r5, #0
 436 00b0 08D0     		beq	.L12
 294:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 295:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         WR_REG(HandlePtr->CC4yRegsPtr->CMC,\
 437              		.loc 1 295 0
 438 00b2 5C68     		ldr	r4, [r3, #4]
 439 00b4 0327     		mov	r7, #3
 440 00b6 0125     		mov	r5, #1
 441 00b8 8F40     		lsl	r7, r7, r1
 442 00ba 8D40     		lsl	r5, r5, r1
 443 00bc BC43     		bic	r4, r7
 444 00be 2F40     		and	r7, r5
 445 00c0 2743     		orr	r7, r4
 446 00c2 5F60     		str	r7, [r3, #4]
 447              	.L12:
 448              	.LVL50:
 296:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)(CCU4_CC4_CMC_STRTS_Msk << HandlePtr->kEvent0Function),\
 297:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)(CCU4_CC4_CMC_STRTS_Pos + HandlePtr->kEvent0Function),\
 298:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                PWMSP003_EVENT_0);
 299:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 300:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 301:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 302:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Reset to default */
 303:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     EdgeSelection = PWMSP003_NO_TRIGGER;
 304:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     LevelSelection = PWMSP003_ACTIVE_ON_HIGH;
 305:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 306:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(HandlePtr->kEvent1Function != PWMSP003_NO_FUNCTION)
 449              		.loc 1 306 0
 450 00c4 961D     		add	r6, r2, #6
 451 00c6 F47F     		ldrb	r4, [r6, #31]
 452 00c8 674D     		ldr	r5, .L83+12
 453 00ca 61B2     		sxtb	r1, r4
 454 00cc 4F1C     		add	r7, r1, #1
 455 00ce 5ED0     		beq	.L48
 307:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 308:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_START)
 456              		.loc 1 308 0
 457 00d0 002C     		cmp	r4, #0
 458 00d2 04D1     		bne	.L23
 309:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 310:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kStartEdge;
 459              		.loc 1 310 0
 460 00d4 171C     		mov	r7, r2
 461 00d6 4337     		add	r7, r7, #67
 462 00d8 3F78     		ldrb	r7, [r7]
 463              	.LVL51:
 304:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     LevelSelection = PWMSP003_ACTIVE_ON_HIGH;
 464              		.loc 1 304 0
 465 00da 201C     		mov	r0, r4
 466 00dc 27E0     		b	.L24
 467              	.LVL52:
 468              	.L23:
 311:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 312:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_STOP)
 469              		.loc 1 312 0
 470 00de 0229     		cmp	r1, #2
 471 00e0 02D1     		bne	.L25
 313:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 314:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kStopEdge;
 472              		.loc 1 314 0
 473 00e2 161C     		mov	r6, r2
 474 00e4 4436     		add	r6, r6, #68
 475 00e6 08E0     		b	.L77
 476              	.L25:
 315:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 316:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_LOAD)
 477              		.loc 1 316 0
 478 00e8 0C29     		cmp	r1, #12
 479 00ea 02D1     		bne	.L27
 317:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 318:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kLoadEventEdge;
 480              		.loc 1 318 0
 481 00ec 161C     		mov	r6, r2
 482 00ee 4036     		add	r6, r6, #64
 483 00f0 03E0     		b	.L77
 484              	.L27:
 319:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 320:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_COUNT)
 485              		.loc 1 320 0
 486 00f2 0E29     		cmp	r1, #14
 487 00f4 03D1     		bne	.L28
 321:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 322:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kCountEventEdge;
 488              		.loc 1 322 0
 489 00f6 161C     		mov	r6, r2
 490 00f8 3F36     		add	r6, r6, #63
 491              	.L77:
 492 00fa 3778     		ldrb	r7, [r6]
 493              	.LVL53:
 494 00fc 11E0     		b	.L31
 495              	.LVL54:
 496              	.L28:
 323:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 324:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else
 325:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 326:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = PWMSP003_RISING_EDGE;
 327:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 328:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 329:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_COUNT_DIRECTION)
 497              		.loc 1 329 0
 498 00fe 0A29     		cmp	r1, #10
 499 0100 04D1     		bne	.L53
 330:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 331:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kCntDirActiveLevel;
 500              		.loc 1 331 0
 501 0102 101C     		mov	r0, r2
 502 0104 3630     		add	r0, r0, #54
 503 0106 0078     		ldrb	r0, [r0]
 504              	.LVL55:
 326:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = PWMSP003_RISING_EDGE;
 505              		.loc 1 326 0
 506 0108 0127     		mov	r7, #1
 507 010a 10E0     		b	.L24
 508              	.LVL56:
 509              	.L53:
 510 010c 0127     		mov	r7, #1
 332:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 333:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_MODULATION)
 511              		.loc 1 333 0
 512 010e 1229     		cmp	r1, #18
 513 0110 02D1     		bne	.L30
 334:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 335:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kModulationActiveLevel;
 514              		.loc 1 335 0
 515 0112 101C     		mov	r0, r2
 516 0114 3330     		add	r0, r0, #51
 517 0116 09E0     		b	.L78
 518              	.L30:
 336:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 337:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_OVERRIDE)
 519              		.loc 1 337 0
 520 0118 1029     		cmp	r1, #16
 521 011a 02D1     		bne	.L31
 338:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 339:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kOverrideActiveLevel;
 522              		.loc 1 339 0
 523 011c 101C     		mov	r0, r2
 524 011e 4230     		add	r0, r0, #66
 525 0120 04E0     		b	.L78
 526              	.LVL57:
 527              	.L31:
 304:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     LevelSelection = PWMSP003_ACTIVE_ON_HIGH;
 528              		.loc 1 304 0
 529 0122 0020     		mov	r0, #0
 340:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 341:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_GATING)
 530              		.loc 1 341 0
 531 0124 0829     		cmp	r1, #8
 532 0126 02D1     		bne	.L24
 342:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 343:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kGateEventActiveLevel;
 533              		.loc 1 343 0
 534 0128 101C     		mov	r0, r2
 535 012a 3E30     		add	r0, r0, #62
 536              	.L78:
 537 012c 0078     		ldrb	r0, [r0]
 538              	.LVL58:
 539              	.L24:
 344:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 345:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else
 346:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 347:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         /** */
 348:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 349:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 350:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV1EM_Msk,\
 540              		.loc 1 350 0
 541 012e 1E68     		ldr	r6, [r3]
 542 0130 BF04     		lsl	r7, r7, #18
 543 0132 B446     		mov	ip, r6
 544 0134 C026     		mov	r6, #192
 545 0136 3603     		lsl	r6, r6, #12
 546 0138 3E40     		and	r6, r7
 547 013a 4C4F     		ldr	r7, .L83+16
 548 013c 0296     		str	r6, [sp, #8]
 549 013e 6646     		mov	r6, ip
 550 0140 3740     		and	r7, r6
 551 0142 029E     		ldr	r6, [sp, #8]
 351:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_INS_EV1EM_Pos, (uint32_t)EdgeSelection);
 352:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 353:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV1LM_Msk,\
 552              		.loc 1 353 0
 553 0144 C005     		lsl	r0, r0, #23
 554              	.LVL59:
 350:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV1EM_Msk,\
 555              		.loc 1 350 0
 556 0146 3743     		orr	r7, r6
 557 0148 1F60     		str	r7, [r3]
 558              		.loc 1 353 0
 559 014a 8027     		mov	r7, #128
 560 014c 3F04     		lsl	r7, r7, #16
 561 014e 1E68     		ldr	r6, [r3]
 562 0150 3840     		and	r0, r7
 563 0152 474F     		ldr	r7, .L83+20
 564 0154 3E40     		and	r6, r7
 565 0156 3043     		orr	r0, r6
 354:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_INS_EV1LM_Pos, (uint32_t)LevelSelection);
 355:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 356:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_LPF1M_Msk,\
 566              		.loc 1 356 0
 567 0158 161C     		mov	r6, r2
 353:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV1LM_Msk,\
 568              		.loc 1 353 0
 569 015a 1860     		str	r0, [r3]
 570              		.loc 1 356 0
 571 015c 3136     		add	r6, r6, #49
 572 015e 3078     		ldrb	r0, [r6]
 573 0160 1F68     		ldr	r7, [r3]
 574 0162 C606     		lsl	r6, r0, #27
 575 0164 C020     		mov	r0, #192
 576 0166 4005     		lsl	r0, r0, #21
 577 0168 3040     		and	r0, r6
 578 016a 424E     		ldr	r6, .L83+24
 579 016c 3E40     		and	r6, r7
 580 016e 0643     		orr	r6, r0
 581 0170 1E60     		str	r6, [r3]
 357:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_INS_LPF1M_Pos, HandlePtr->kEvent1_lpfconfig);
 358:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 359:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(HandlePtr->kEvent1Function != PWMSP003_EXTERNAL_START)
 582              		.loc 1 359 0
 583 0172 002C     		cmp	r4, #0
 584 0174 0BD0     		beq	.L48
 360:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 361:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         /* Override Config in CMC Register is only one bit each */
 362:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         /* START/STOP etc. are 2 bits each */
 363:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_OVERRIDE)
 585              		.loc 1 363 0
 586 0176 1029     		cmp	r1, #16
 587 0178 00D1     		bne	.LCB552
 588 017a 4FE1     		b	.L82	@long jump
 589              	.LCB552:
 590              	.L74:
 591              	.LVL60:
 364:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 365:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           /* Mask for Trap, 1 bit */
 366:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Temp = PWMSP003_OVERRIDEEVENT_BITMASK;
 367:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 368:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         else
 369:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 370:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           /* Mask for START,STOP etc. functions, 2 bits */
 371:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Temp = PWMSP003_STARTEVENT_BITMASK;
 372:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 373:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 374:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         if(HandlePtr->kEvent1Function == PWMSP003_EXTERNAL_OVERRIDE)
 375:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 376:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           WR_REG(HandlePtr->CC4yRegsPtr->CMC,\
 377:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)((CCU4_CC4_CMC_STRTS_Msk & Temp) <<\
 378:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               HandlePtr->kEvent1Function),\
 379:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)(CCU4_CC4_CMC_STRTS_Pos + HandlePtr->kEvent1Function),\
 380:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               0x01U);
 381:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 382:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         else
 383:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 384:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           WR_REG(HandlePtr->CC4yRegsPtr->CMC,\
 592              		.loc 1 384 0
 593 017c 5C68     		ldr	r4, [r3, #4]
 594 017e 0327     		mov	r7, #3
 595 0180 0220     		mov	r0, #2
 596 0182 8F40     		lsl	r7, r7, r1
 597 0184 8840     		lsl	r0, r0, r1
 598 0186 BC43     		bic	r4, r7
 599 0188 0740     		and	r7, r0
 600 018a 3C43     		orr	r4, r7
 601 018c 5C60     		str	r4, [r3, #4]
 602              	.LVL61:
 603              	.L48:
 385:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)((CCU4_CC4_CMC_STRTS_Msk & Temp) <<\
 386:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               HandlePtr->kEvent1Function),\
 387:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)(CCU4_CC4_CMC_STRTS_Pos + HandlePtr->kEvent1Function),\
 388:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               PWMSP003_EVENT_1);
 389:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 390:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 391:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 392:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 393:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Reset to default */
 394:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     EdgeSelection = PWMSP003_NO_TRIGGER;
 395:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     LevelSelection = PWMSP003_ACTIVE_ON_HIGH;
 396:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 397:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(HandlePtr->kEvent2Function != PWMSP003_NO_FUNCTION)
 604              		.loc 1 397 0
 605 018e D01D     		add	r0, r2, #7
 606 0190 C47F     		ldrb	r4, [r0, #31]
 607 0192 394E     		ldr	r6, .L83+28
 608 0194 61B2     		sxtb	r1, r4
 609 0196 B446     		mov	ip, r6
 610 0198 4E1C     		add	r6, r1, #1
 611 019a 79D0     		beq	.L49
 398:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 399:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_START)
 612              		.loc 1 399 0
 613 019c 002C     		cmp	r4, #0
 614 019e 04D1     		bne	.L35
 400:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 401:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kStartEdge;
 615              		.loc 1 401 0
 616 01a0 171C     		mov	r7, r2
 617 01a2 4337     		add	r7, r7, #67
 618 01a4 3F78     		ldrb	r7, [r7]
 619              	.LVL62:
 395:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     LevelSelection = PWMSP003_ACTIVE_ON_HIGH;
 620              		.loc 1 395 0
 621 01a6 201C     		mov	r0, r4
 622 01a8 2BE0     		b	.L36
 623              	.LVL63:
 624              	.L35:
 402:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 403:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_STOP)
 625              		.loc 1 403 0
 626 01aa 0229     		cmp	r1, #2
 627 01ac 02D1     		bne	.L37
 404:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 405:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kStopEdge;
 628              		.loc 1 405 0
 629 01ae 161C     		mov	r6, r2
 630 01b0 4436     		add	r6, r6, #68
 631 01b2 08E0     		b	.L79
 632              	.L37:
 406:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 407:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_LOAD)
 633              		.loc 1 407 0
 634 01b4 0C29     		cmp	r1, #12
 635 01b6 02D1     		bne	.L39
 408:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 409:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kLoadEventEdge;
 636              		.loc 1 409 0
 637 01b8 161C     		mov	r6, r2
 638 01ba 4036     		add	r6, r6, #64
 639 01bc 03E0     		b	.L79
 640              	.L39:
 410:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 411:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_COUNT)
 641              		.loc 1 411 0
 642 01be 0E29     		cmp	r1, #14
 643 01c0 03D1     		bne	.L40
 412:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 413:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = HandlePtr->kCountEventEdge;
 644              		.loc 1 413 0
 645 01c2 161C     		mov	r6, r2
 646 01c4 3F36     		add	r6, r6, #63
 647              	.L79:
 648 01c6 3778     		ldrb	r7, [r6]
 649              	.LVL64:
 650 01c8 15E0     		b	.L44
 651              	.LVL65:
 652              	.L40:
 414:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 415:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else
 416:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 417:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = PWMSP003_RISING_EDGE;
 418:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 419:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 420:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_COUNT_DIRECTION)
 653              		.loc 1 420 0
 654 01ca 0A29     		cmp	r1, #10
 655 01cc 04D1     		bne	.L55
 421:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 422:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kCntDirActiveLevel;
 656              		.loc 1 422 0
 657 01ce 101C     		mov	r0, r2
 658 01d0 3630     		add	r0, r0, #54
 659 01d2 0078     		ldrb	r0, [r0]
 660              	.LVL66:
 417:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         EdgeSelection = PWMSP003_RISING_EDGE;
 661              		.loc 1 417 0
 662 01d4 0127     		mov	r7, #1
 663 01d6 14E0     		b	.L36
 664              	.LVL67:
 665              	.L55:
 666 01d8 0127     		mov	r7, #1
 423:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 424:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_TRAP)
 667              		.loc 1 424 0
 668 01da 1129     		cmp	r1, #17
 669 01dc 01D1     		bne	.L42
 425:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 426:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kTrapLevel;
 670              		.loc 1 426 0
 671 01de 907C     		ldrb	r0, [r2, #18]
 672              	.LVL68:
 673 01e0 0FE0     		b	.L36
 674              	.LVL69:
 675              	.L42:
 427:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 428:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_MODULATION)
 676              		.loc 1 428 0
 677 01e2 1229     		cmp	r1, #18
 678 01e4 02D1     		bne	.L43
 429:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 430:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kModulationActiveLevel;
 679              		.loc 1 430 0
 680 01e6 101C     		mov	r0, r2
 681 01e8 3330     		add	r0, r0, #51
 682 01ea 09E0     		b	.L80
 683              	.L43:
 431:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 432:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_OVERRIDE)
 684              		.loc 1 432 0
 685 01ec 1029     		cmp	r1, #16
 686 01ee 02D1     		bne	.L44
 433:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 434:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kOverrideActiveLevel;
 687              		.loc 1 434 0
 688 01f0 101C     		mov	r0, r2
 689 01f2 4230     		add	r0, r0, #66
 690 01f4 04E0     		b	.L80
 691              	.LVL70:
 692              	.L44:
 395:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     LevelSelection = PWMSP003_ACTIVE_ON_HIGH;
 693              		.loc 1 395 0
 694 01f6 0020     		mov	r0, #0
 435:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 436:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_GATING)
 695              		.loc 1 436 0
 696 01f8 0829     		cmp	r1, #8
 697 01fa 02D1     		bne	.L36
 437:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 438:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         LevelSelection = HandlePtr->kGateEventActiveLevel;
 698              		.loc 1 438 0
 699 01fc 101C     		mov	r0, r2
 700 01fe 3E30     		add	r0, r0, #62
 701              	.L80:
 702 0200 0078     		ldrb	r0, [r0]
 703              	.LVL71:
 704              	.L36:
 439:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 440:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else
 441:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 442:../Dave/Generated/src/PWMSP003/PWMSP003.c ****        /** */
 443:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 444:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 445:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV2EM_Msk,\
 705              		.loc 1 445 0
 706 0202 1E68     		ldr	r6, [r3]
 707 0204 3F05     		lsl	r7, r7, #20
 708 0206 0296     		str	r6, [sp, #8]
 709 0208 C026     		mov	r6, #192
 710 020a B603     		lsl	r6, r6, #14
 711 020c 3E40     		and	r6, r7
 712 020e 0196     		str	r6, [sp, #4]
 713 0210 1A4F     		ldr	r7, .L83+32
 714 0212 029E     		ldr	r6, [sp, #8]
 446:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_INS_EV2EM_Pos, (uint32_t)EdgeSelection);
 447:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 448:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV2LM_Msk,\
 715              		.loc 1 448 0
 716 0214 0006     		lsl	r0, r0, #24
 717              	.LVL72:
 445:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV2EM_Msk,\
 718              		.loc 1 445 0
 719 0216 3740     		and	r7, r6
 720 0218 019E     		ldr	r6, [sp, #4]
 721 021a 3743     		orr	r7, r6
 722 021c 1F60     		str	r7, [r3]
 723              		.loc 1 448 0
 724 021e 8027     		mov	r7, #128
 725 0220 1E68     		ldr	r6, [r3]
 726 0222 7F04     		lsl	r7, r7, #17
 727 0224 3840     		and	r0, r7
 728 0226 6746     		mov	r7, ip
 729 0228 3E40     		and	r6, r7
 730 022a 3043     		orr	r0, r6
 449:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_INS_EV2LM_Pos, (uint32_t)LevelSelection);
 450:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 451:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_LPF2M_Msk,\
 731              		.loc 1 451 0
 732 022c 161C     		mov	r6, r2
 448:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->INS, (uint32_t)CCU4_CC4_INS_EV2LM_Msk,\
 733              		.loc 1 448 0
 734 022e 1860     		str	r0, [r3]
 735              		.loc 1 451 0
 736 0230 3236     		add	r6, r6, #50
 737 0232 3078     		ldrb	r0, [r6]
 738 0234 1F68     		ldr	r7, [r3]
 739 0236 4607     		lsl	r6, r0, #29
 740 0238 C020     		mov	r0, #192
 741 023a C005     		lsl	r0, r0, #23
 742 023c 3040     		and	r0, r6
 743 023e 104E     		ldr	r6, .L83+36
 744 0240 3E40     		and	r6, r7
 745 0242 0643     		orr	r6, r0
 746 0244 1E60     		str	r6, [r3]
 452:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_INS_LPF2M_Pos, HandlePtr->kEvent2_lpfconfig);
 453:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 454:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(HandlePtr->kEvent2Function != PWMSP003_EXTERNAL_START)
 747              		.loc 1 454 0
 748 0246 002C     		cmp	r4, #0
 749 0248 22D0     		beq	.L49
 455:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 456:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         /* Trap and Override Config in CMC Register is only one bit each */
 457:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         /* START/STOP etc. are 2 bits each */
 458:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_OVERRIDE)
 750              		.loc 1 458 0
 751 024a 1029     		cmp	r1, #16
 752 024c 1AD0     		beq	.L45
 459:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 460:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           /* Mask for Trap, 1 bit */
 461:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Temp = PWMSP003_OVERRIDEEVENT_BITMASK;
 462:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 463:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         else if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_TRAP)
 464:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 465:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           /* Mask for Trap, 1 bit */
 466:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Temp = PWMSP003_TRAPEVENT_BITMASK;
 467:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 468:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         else
 469:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 470:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           /* Mask for START,STOP etc. functions, 2 bits */
 471:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Temp = PWMSP003_STARTEVENT_BITMASK;
 753              		.loc 1 471 0
 754 024e 0327     		mov	r7, #3
 463:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         else if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_TRAP)
 755              		.loc 1 463 0
 756 0250 1129     		cmp	r1, #17
 757 0252 00D0     		beq	.LCB722
 758 0254 E9E0     		b	.L46	@long jump
 759              	.LCB722:
 466:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Temp = PWMSP003_TRAPEVENT_BITMASK;
 760              		.loc 1 466 0
 761 0256 0127     		mov	r7, #1
 762 0258 E7E0     		b	.L46
 763              	.L84:
 764 025a C046     		.align	2
 765              	.L83:
 766 025c FFFFFCFF 		.word	-196609
 767 0260 FFFFBFFF 		.word	-4194305
 768 0264 FFFFFFF9 		.word	-100663297
 769 0268 FFFFFEFF 		.word	-65537
 770 026c FFFFF3FF 		.word	-786433
 771 0270 FFFF7FFF 		.word	-8388609
 772 0274 FFFFFFE7 		.word	-402653185
 773 0278 FFFFFFFE 		.word	-16777217
 774 027c FFFFCFFF 		.word	-3145729
 775 0280 FFFFFF9F 		.word	-1610612737
 776              	.L45:
 777              	.LVL73:
 472:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 473:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 474:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         if(HandlePtr->kEvent2Function == PWMSP003_EXTERNAL_OVERRIDE)
 475:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 476:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           WR_REG(HandlePtr->CC4yRegsPtr->CMC,\
 778              		.loc 1 476 0
 779 0284 5E68     		ldr	r6, [r3, #4]
 780 0286 8027     		mov	r7, #128
 781 0288 2E40     		and	r6, r5
 782 028a 7C02     		lsl	r4, r7, #9
 783 028c 2643     		orr	r6, r4
 784 028e 5E60     		str	r6, [r3, #4]
 785              	.LVL74:
 786              	.L49:
 477:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)((CCU4_CC4_CMC_STRTS_Msk & Temp) <<\
 478:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               HandlePtr->kEvent2Function),\
 479:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)(CCU4_CC4_CMC_STRTS_Pos + HandlePtr->kEvent2Function),\
 480:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               0x01U);
 481:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 482:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         else
 483:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 484:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           WR_REG(HandlePtr->CC4yRegsPtr->CMC,\
 485:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)((CCU4_CC4_CMC_STRTS_Msk & Temp) <<\
 486:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               HandlePtr->kEvent2Function),\
 487:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)(CCU4_CC4_CMC_STRTS_Pos + HandlePtr->kEvent2Function),\
 488:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               PWMSP003_EVENT_2);
 489:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 490:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 491:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 492:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 493:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Slice Timer Control */
 494:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->TC &= ~(CCU4_CC4_TC_TCM_Msk |\
 787              		.loc 1 494 0
 788 0290 5869     		ldr	r0, [r3, #20]
 789 0292 6C49     		ldr	r1, .L85
 495:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       CCU4_CC4_TC_TSSM_Msk | CCU4_CC4_TC_CMOD_Msk |\
 496:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk | CCU4_CC4_TC_DITHE_Msk);
 497:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 498:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Timer control configurations */
 499:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType <<\
 790              		.loc 1 499 0
 791 0294 171C     		mov	r7, r2
 494:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->TC &= ~(CCU4_CC4_TC_TCM_Msk |\
 792              		.loc 1 494 0
 793 0296 0140     		and	r1, r0
 794 0298 5961     		str	r1, [r3, #20]
 795              		.loc 1 499 0
 796 029a 5637     		add	r7, r7, #86
 500:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TC_TCM_Pos) & CCU4_CC4_TC_TCM_Msk) |\
 797              		.loc 1 500 0
 798 029c 3C78     		ldrb	r4, [r7]
 499:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType <<\
 799              		.loc 1 499 0
 800 029e 5E69     		ldr	r6, [r3, #20]
 501:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         (((uint32_t)HandlePtr->kTimerMode  << CCU4_CC4_TC_TSSM_Pos) &\
 801              		.loc 1 501 0
 802 02a0 107B     		ldrb	r0, [r2, #12]
 500:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TC_TCM_Pos) & CCU4_CC4_TC_TCM_Msk) |\
 803              		.loc 1 500 0
 804 02a2 0121     		mov	r1, #1
 805 02a4 0C40     		and	r4, r1
 502:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP003_COMPARE_MODE <<\
 806              		.loc 1 502 0
 807 02a6 3443     		orr	r4, r6
 501:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         (((uint32_t)HandlePtr->kTimerMode  << CCU4_CC4_TC_TSSM_Pos) &\
 808              		.loc 1 501 0
 809 02a8 8840     		lsl	r0, r0, r1
 810 02aa 0226     		mov	r6, #2
 503:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TC_CMOD_Pos)& CCU4_CC4_TC_CMOD_Msk) |\
 504:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         (((uint32_t)HandlePtr->ExtStartConfigType <<CCU4_CC4_TC_STRM_Pos) &\
 811              		.loc 1 504 0
 812 02ac 171C     		mov	r7, r2
 501:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         (((uint32_t)HandlePtr->kTimerMode  << CCU4_CC4_TC_TSSM_Pos) &\
 813              		.loc 1 501 0
 814 02ae 3040     		and	r0, r6
 815              		.loc 1 504 0
 816 02b0 5437     		add	r7, r7, #84
 503:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TC_CMOD_Pos)& CCU4_CC4_TC_CMOD_Msk) |\
 817              		.loc 1 503 0
 818 02b2 2043     		orr	r0, r4
 819              		.loc 1 504 0
 820 02b4 3C78     		ldrb	r4, [r7]
 821 02b6 8021     		mov	r1, #128
 822 02b8 A702     		lsl	r7, r4, #10
 823 02ba C900     		lsl	r1, r1, #3
 824 02bc 3940     		and	r1, r7
 505:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 825              		.loc 1 505 0
 826 02be 0143     		orr	r1, r0
 827 02c0 101C     		mov	r0, r2
 828 02c2 5530     		add	r0, r0, #85
 829 02c4 0478     		ldrb	r4, [r0]
 506:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TC_ENDM_Pos)& CCU4_CC4_TC_ENDM_Msk);
 830              		.loc 1 506 0
 831 02c6 C020     		mov	r0, #192
 505:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 832              		.loc 1 505 0
 833 02c8 2702     		lsl	r7, r4, #8
 834              		.loc 1 506 0
 835 02ca B040     		lsl	r0, r0, r6
 836 02cc 3840     		and	r0, r7
 499:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType <<\
 837              		.loc 1 499 0
 838 02ce 0143     		orr	r1, r0
 839 02d0 5961     		str	r1, [r3, #20]
 507:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 508:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /*Set the dither mode setting*/
 509:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC,(uint32_t)CCU4_CC4_TC_DITHE_Msk,\
 840              		.loc 1 509 0
 841 02d2 511C     		add	r1, r2, #1
 842 02d4 CC7F     		ldrb	r4, [r1, #31]
 843 02d6 5E69     		ldr	r6, [r3, #20]
 844 02d8 6703     		lsl	r7, r4, #13
 845 02da C020     		mov	r0, #192
 846 02dc 5A4C     		ldr	r4, .L85+4
 847 02de C101     		lsl	r1, r0, #7
 848 02e0 3440     		and	r4, r6
 849 02e2 3940     		and	r1, r7
 850 02e4 2143     		orr	r1, r4
 851 02e6 5961     		str	r1, [r3, #20]
 510:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       (uint32_t)CCU4_CC4_TC_DITHE_Pos, HandlePtr->kDitherSetting);
 511:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 512:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Set the floating point prescaler mode */
 513:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC,(uint32_t)CCU4_CC4_TC_FPE_Msk,\
 852              		.loc 1 513 0
 853 02e8 161D     		add	r6, r2, #4
 854 02ea F07F     		ldrb	r0, [r6, #31]
 855 02ec 5F69     		ldr	r7, [r3, #20]
 856 02ee 8024     		mov	r4, #128
 857 02f0 0104     		lsl	r1, r0, #16
 858 02f2 6602     		lsl	r6, r4, #9
 859 02f4 3D40     		and	r5, r7
 860 02f6 0E40     		and	r6, r1
 861 02f8 2E43     		orr	r6, r5
 862 02fa 5E61     		str	r6, [r3, #20]
 514:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       (uint32_t)CCU4_CC4_TC_FPE_Pos, HandlePtr->kPrescalerMode);
 515:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 516:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 863              		.loc 1 516 0
 864 02fc 1F6A     		ldr	r7, [r3, #32]
 865 02fe 557B     		ldrb	r5, [r2, #13]
 866 0300 0F21     		mov	r1, #15
 867 0302 0D40     		and	r5, r1
 868 0304 8F43     		bic	r7, r1
 869 0306 2F43     		orr	r7, r5
 870 0308 1F62     		str	r7, [r3, #32]
 517:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 518:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 519:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Configure Trap mode */
 520:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,\
 871              		.loc 1 520 0
 872 030a D47C     		ldrb	r4, [r2, #19]
 873 030c 8025     		mov	r5, #128
 874 030e 6705     		lsl	r7, r4, #21
 875 0310 AC03     		lsl	r4, r5, #14
 876 0312 5E69     		ldr	r6, [r3, #20]
 877 0314 3C40     		and	r4, r7
 878 0316 4D4F     		ldr	r7, .L85+8
 521:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 522:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 523:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Configure Trap exit mode */
 524:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,\
 879              		.loc 1 524 0
 880 0318 8025     		mov	r5, #128
 520:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,\
 881              		.loc 1 520 0
 882 031a 3740     		and	r7, r6
 883 031c 2743     		orr	r7, r4
 884 031e 5F61     		str	r7, [r3, #20]
 885              		.loc 1 524 0
 886 0320 167D     		ldrb	r6, [r2, #20]
 887 0322 5C69     		ldr	r4, [r3, #20]
 888 0324 B705     		lsl	r7, r6, #22
 889 0326 4A4E     		ldr	r6, .L85+12
 890 0328 8D40     		lsl	r5, r5, r1
 891 032a 3440     		and	r4, r6
 892 032c 3D40     		and	r5, r7
 893 032e 2543     		orr	r5, r4
 525:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 526:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 527:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* External modulation sync  */
 528:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_EMS_Msk,\
 894              		.loc 1 528 0
 895 0330 171C     		mov	r7, r2
 524:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,\
 896              		.loc 1 524 0
 897 0332 5D61     		str	r5, [r3, #20]
 898              		.loc 1 528 0
 899 0334 3537     		add	r7, r7, #53
 900 0336 3D78     		ldrb	r5, [r7]
 901 0338 8027     		mov	r7, #128
 902 033a EE05     		lsl	r6, r5, #23
 903 033c 3D04     		lsl	r5, r7, #16
 904 033e 5C69     		ldr	r4, [r3, #20]
 905 0340 3540     		and	r5, r6
 906 0342 444E     		ldr	r6, .L85+16
 907 0344 3440     		and	r4, r6
 908 0346 2543     		orr	r5, r4
 529:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           (uint32_t)CCU4_CC4_TC_EMS_Pos, HandlePtr->kModulationSync);
 530:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 531:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* External modulation type  */
 532:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_EMT_Msk,\
 909              		.loc 1 532 0
 910 0348 141C     		mov	r4, r2
 528:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_EMS_Msk,\
 911              		.loc 1 528 0
 912 034a 5D61     		str	r5, [r3, #20]
 913              		.loc 1 532 0
 914 034c 3434     		add	r4, r4, #52
 915 034e 2578     		ldrb	r5, [r4]
 916 0350 8024     		mov	r4, #128
 917 0352 5F69     		ldr	r7, [r3, #20]
 918 0354 2E06     		lsl	r6, r5, #24
 919 0356 6504     		lsl	r5, r4, #17
 920 0358 3540     		and	r5, r6
 921 035a 6646     		mov	r6, ip
 922 035c 3740     		and	r7, r6
 923 035e 3D43     		orr	r5, r7
 924 0360 5D61     		str	r5, [r3, #20]
 533:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           (uint32_t)CCU4_CC4_TC_EMT_Pos, HandlePtr->kModulationMode);
 534:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 535:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Set the prescaler divider and passive level of the o/p signal */
 536:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 925              		.loc 1 536 0
 926 0362 5F6A     		ldr	r7, [r3, #36]
 927 0364 941C     		add	r4, r2, #2
 928 0366 E57F     		ldrb	r5, [r4, #31]
 929 0368 8F43     		bic	r7, r1
 930 036a 0D40     		and	r5, r1
 931 036c 391C     		mov	r1, r7
 932 036e 2943     		orr	r1, r5
 933 0370 5962     		str	r1, [r3, #36]
 537:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescaler);
 538:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 539:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* if Selected prescaler is Floating Prescaler, set FP register */
 540:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(HandlePtr->kPrescalerMode ==
 934              		.loc 1 540 0
 935 0372 0128     		cmp	r0, #1
 936 0374 02D1     		bne	.L47
 541:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                         (PWMSP003_PrescalerModeType)PWMSP003_FLOATING_PRESCALER)
 542:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 543:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yRegsPtr->FPCS =\
 544:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                         (uint32_t)HandlePtr->kFloatingPrescalepcmpvalue;
 937              		.loc 1 544 0
 938 0376 D01C     		add	r0, r2, #3
 939 0378 C67F     		ldrb	r6, [r0, #31]
 543:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yRegsPtr->FPCS =\
 940              		.loc 1 543 0
 941 037a DE62     		str	r6, [r3, #44]
 942              	.L47:
 545:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 546:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 547:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 548:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Setting period register's value */
 549:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 943              		.loc 1 549 0
 944 037c 4824     		mov	r4, #72
 546:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 945              		.loc 1 546 0
 946 037e 177C     		ldrb	r7, [r2, #16]
 947              		.loc 1 549 0
 948 0380 A55A     		ldrh	r5, [r4, r2]
 550:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /*Setting compare register's value*/
 551:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue &0xFFFFU);
 949              		.loc 1 551 0
 950 0382 1189     		ldrh	r1, [r2, #8]
 552:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP003_ALL_CCU4_INTR_CLEAR;
 951              		.loc 1 552 0
 952 0384 1E1C     		mov	r6, r3
 546:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 953              		.loc 1 546 0
 954 0386 9F61     		str	r7, [r3, #24]
 955              		.loc 1 552 0
 956 0388 B036     		add	r6, r6, #176
 549:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 957              		.loc 1 549 0
 958 038a 5D63     		str	r5, [r3, #52]
 551:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue &0xFFFFU);
 959              		.loc 1 551 0
 960 038c D963     		str	r1, [r3, #60]
 961              		.loc 1 552 0
 962 038e 3068     		ldr	r0, [r6]
 963 0390 314F     		ldr	r7, .L85+20
 553:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 554:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Applying Interrupt settings */
 555:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 964              		.loc 1 555 0
 965 0392 146D     		ldr	r4, [r2, #80]
 552:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP003_ALL_CCU4_INTR_CLEAR;
 966              		.loc 1 552 0
 967 0394 3843     		orr	r0, r7
 968 0396 3060     		str	r0, [r6]
 969              		.loc 1 555 0
 970 0398 0C3E     		sub	r6, r6, #12
 971 039a 3568     		ldr	r5, [r6]
 556:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 557:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Request SW shadow transfer for period, compare, dither and prescaler */
 558:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |=\
 559:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     (((uint32_t)0x1U << (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice)) |\
 972              		.loc 1 559 0
 973 039c 101C     		mov	r0, r2
 555:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 974              		.loc 1 555 0
 975 039e 2543     		orr	r5, r4
 976 03a0 3560     		str	r5, [r6]
 977              		.loc 1 559 0
 978 03a2 5830     		add	r0, r0, #88
 558:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |=\
 979              		.loc 1 558 0
 980 03a4 9169     		ldr	r1, [r2, #24]
 981              		.loc 1 559 0
 982 03a6 0478     		ldrb	r4, [r0]
 983 03a8 0120     		mov	r0, #1
 558:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |=\
 984              		.loc 1 558 0
 985 03aa 0E69     		ldr	r6, [r1, #16]
 986              		.loc 1 559 0
 987 03ac A500     		lsl	r5, r4, #2
 988 03ae 071C     		mov	r7, r0
 989 03b0 AF40     		lsl	r7, r7, r5
 990 03b2 3743     		orr	r7, r6
 991 03b4 0297     		str	r7, [sp, #8]
 560:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     ((uint32_t)0x1U <<\
 561:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     ((PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice) + (uint32_t)0x1U)) |\
 992              		.loc 1 561 0
 993 03b6 2E18     		add	r6, r5, r0
 560:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     ((uint32_t)0x1U <<\
 994              		.loc 1 560 0
 995 03b8 071C     		mov	r7, r0
 996 03ba B740     		lsl	r7, r7, r6
 997 03bc BC46     		mov	ip, r7
 998              		.loc 1 561 0
 999 03be 029F     		ldr	r7, [sp, #8]
 1000 03c0 6646     		mov	r6, ip
 1001 03c2 3743     		orr	r7, r6
 562:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     ((uint32_t)0x1U <<\
 563:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     ((PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice) + (uint32_t)0x2U)));
 1002              		.loc 1 563 0
 1003 03c4 0235     		add	r5, r5, #2
 562:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     ((uint32_t)0x1U <<\
 1004              		.loc 1 562 0
 1005 03c6 061C     		mov	r6, r0
 1006 03c8 AE40     		lsl	r6, r6, r5
 558:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |=\
 1007              		.loc 1 558 0
 1008 03ca 3D1C     		mov	r5, r7
 1009 03cc 3543     		orr	r5, r6
 564:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 565:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Multi channel shadow transfer enable or disable */
 566:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC,  (uint32_t)CCU4_CC4_TC_MCME_Msk,\
 1010              		.loc 1 566 0
 1011 03ce 161C     		mov	r6, r2
 558:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |=\
 1012              		.loc 1 558 0
 1013 03d0 0D61     		str	r5, [r1, #16]
 1014              		.loc 1 566 0
 1015 03d2 3736     		add	r6, r6, #55
 1016 03d4 3578     		ldrb	r5, [r6]
 1017 03d6 5F69     		ldr	r7, [r3, #20]
 1018 03d8 6E06     		lsl	r6, r5, #25
 1019 03da 8025     		mov	r5, #128
 1020 03dc AD04     		lsl	r5, r5, #18
 1021 03de 2E40     		and	r6, r5
 1022 03e0 1E4D     		ldr	r5, .L85+24
 1023 03e2 3D40     		and	r5, r7
 1024 03e4 3543     		orr	r5, r6
 567:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                         (uint32_t)CCU4_CC4_TC_MCME_Pos, HandlePtr->kMCMode);
 568:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 569:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Multi channel shadow transfer source select */
 570:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yKernRegsPtr->GCTRL,
 1025              		.loc 1 570 0
 1026 03e6 161C     		mov	r6, r2
 566:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC,  (uint32_t)CCU4_CC4_TC_MCME_Msk,\
 1027              		.loc 1 566 0
 1028 03e8 5D61     		str	r5, [r3, #20]
 1029              		.loc 1 570 0
 1030 03ea 3836     		add	r6, r6, #56
 1031 03ec 8023     		mov	r3, #128
 1032 03ee DF00     		lsl	r7, r3, #3
 1033 03f0 3378     		ldrb	r3, [r6]
 1034 03f2 0D68     		ldr	r5, [r1]
 1035 03f4 A740     		lsl	r7, r7, r4
 1036 03f6 0A34     		add	r4, r4, #10
 1037 03f8 A340     		lsl	r3, r3, r4
 1038 03fa BD43     		bic	r5, r7
 1039 03fc 1F40     		and	r7, r3
 1040 03fe 2F43     		orr	r7, r5
 1041 0400 0F60     		str	r7, [r1]
 571:../Dave/Generated/src/PWMSP003/PWMSP003.c ****             (uint32_t)(CCU4_GCTRL_MSE0_Msk << HandlePtr->Slice),\
 572:../Dave/Generated/src/PWMSP003/PWMSP003.c ****             (uint32_t)(CCU4_GCTRL_MSE0_Pos + HandlePtr->Slice),\
 573:../Dave/Generated/src/PWMSP003/PWMSP003.c ****             (uint32_t)HandlePtr->kMCModeShadowRequest);
 574:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 575:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Multi channel shadow transfer configuration */
 576:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yKernRegsPtr->GCTRL,
 1042              		.loc 1 576 0
 1043 0402 3932     		add	r2, r2, #57
 1044              	.LVL75:
 1045 0404 1278     		ldrb	r2, [r2]
 1046              	.LVL76:
 1047 0406 0F68     		ldr	r7, [r1]
 1048 0408 154B     		ldr	r3, .L85+28
 1049 040a 9507     		lsl	r5, r2, #30
 1050 040c 2E0C     		lsr	r6, r5, #16
 1051              	.LVL77:
 1052 040e 3B40     		and	r3, r7
 1053 0410 3343     		orr	r3, r6
 1054 0412 0B60     		str	r3, [r1]
 1055              	.LVL78:
 577:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (uint32_t)CCU4_GCTRL_MSDE_Msk,\
 578:../Dave/Generated/src/PWMSP003/PWMSP003.c ****             (uint32_t)CCU4_GCTRL_MSDE_Pos,
 579:../Dave/Generated/src/PWMSP003/PWMSP003.c ****             (uint32_t)HandlePtr->kMCModeShadowConfig);
 580:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 581:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 582:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->DynamicDataType->StateType = PWMSP003_INITIALIZED;
 1056              		.loc 1 582 0
 1057 0414 0399     		ldr	r1, [sp, #12]
 1058 0416 0870     		strb	r0, [r1]
 581:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1059              		.loc 1 581 0
 1060 0418 0020     		mov	r0, #0
 1061 041a 10E0     		b	.L68
 1062              	.LVL79:
 1063              	.L82:
 376:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           WR_REG(HandlePtr->CC4yRegsPtr->CMC,\
 1064              		.loc 1 376 0
 1065 041c 5E68     		ldr	r6, [r3, #4]
 1066 041e 8027     		mov	r7, #128
 1067 0420 2E40     		and	r6, r5
 1068 0422 7C02     		lsl	r4, r7, #9
 1069 0424 2643     		orr	r6, r4
 1070 0426 5E60     		str	r6, [r3, #4]
 1071 0428 B1E6     		b	.L48
 1072              	.LVL80:
 1073              	.L46:
 484:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           WR_REG(HandlePtr->CC4yRegsPtr->CMC,\
 1074              		.loc 1 484 0
 1075 042a 0320     		mov	r0, #3
 1076 042c 5C68     		ldr	r4, [r3, #4]
 1077 042e 8840     		lsl	r0, r0, r1
 1078 0430 8F40     		lsl	r7, r7, r1
 1079              	.LVL81:
 1080 0432 011C     		mov	r1, r0
 1081 0434 BC43     		bic	r4, r7
 1082 0436 3940     		and	r1, r7
 1083 0438 0C43     		orr	r4, r1
 1084 043a 5C60     		str	r4, [r3, #4]
 1085 043c 28E7     		b	.L49
 1086              	.LVL82:
 1087              	.L68:
 583:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   } while (0);
 584:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 585:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 586:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1088              		.loc 1 586 0
 1089 043e 05B0     		add	sp, sp, #20
 1090              		@ sp needed for prologue
 1091 0440 F0BD     		pop	{r4, r5, r6, r7, pc}
 1092              	.L86:
 1093 0442 C046     		.align	2
 1094              	.L85:
 1095 0444 F498FFFF 		.word	-26380
 1096 0448 FF9FFFFF 		.word	-24577
 1097 044c FFFFDFFF 		.word	-2097153
 1098 0450 FFFFBFFF 		.word	-4194305
 1099 0454 FFFF7FFF 		.word	-8388609
 1100 0458 0F0F0000 		.word	3855
 1101 045c FFFFFFFD 		.word	-33554433
 1102 0460 FF3FFFFF 		.word	-49153
 1103              		.cfi_endproc
 1104              	.LFE43:
 1106              		.section	.text.PWMSP003_Start,"ax",%progbits
 1107              		.align	1
 1108              		.global	PWMSP003_Start
 1109              		.code	16
 1110              		.thumb_func
 1112              	PWMSP003_Start:
 1113              	.LFB44:
 587:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 588:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 589:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function starts the app.
 590:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function should be called even if external start is configured.
 591:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 592:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_Start(const PWMSP003_HandleType* HandlePtr)
 593:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1114              		.loc 1 593 0
 1115              		.cfi_startproc
 1116              	.LVL83:
 1117 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1118              	.LCFI4:
 1119              		.cfi_def_cfa_offset 20
 1120              		.cfi_offset 4, -20
 1121              		.cfi_offset 5, -16
 1122              		.cfi_offset 6, -12
 1123              		.cfi_offset 7, -8
 1124              		.cfi_offset 14, -4
 594:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 595:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 596:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   do
 597:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 598:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if((HandlePtr->DynamicDataType->StateType == PWMSP003_UNINITIALIZED) ||
 1125              		.loc 1 598 0
 1126 0002 C46D     		ldr	r4, [r0, #92]
 593:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1127              		.loc 1 593 0
 1128 0004 021C     		mov	r2, r0
 1129              		.loc 1 598 0
 1130 0006 2378     		ldrb	r3, [r4]
 594:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1131              		.loc 1 594 0
 1132 0008 0120     		mov	r0, #1
 1133              	.LVL84:
 1134              		.loc 1 598 0
 1135 000a 002B     		cmp	r3, #0
 1136 000c 30D0     		beq	.L88
 1137              		.loc 1 598 0 is_stmt 0 discriminator 1
 1138 000e 022B     		cmp	r3, #2
 1139 0010 2ED0     		beq	.L88
 599:../Dave/Generated/src/PWMSP003/PWMSP003.c ****        (HandlePtr->DynamicDataType->StateType == PWMSP003_RUNNING))
 600:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 601:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       break;
 602:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 603:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 604:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP003_ALL_CCU4_INTR_CLEAR;
 1140              		.loc 1 604 0 is_stmt 1
 1141 0012 D369     		ldr	r3, [r2, #28]
 1142 0014 174D     		ldr	r5, .L94
 1143 0016 191C     		mov	r1, r3
 1144 0018 B031     		add	r1, r1, #176
 1145 001a 0D60     		str	r5, [r1]
 605:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 606:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Start the Prescaler */
 607:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLC |=\
 1146              		.loc 1 607 0
 1147 001c 9169     		ldr	r1, [r2, #24]
 1148 001e 8027     		mov	r7, #128
 1149 0020 CE68     		ldr	r6, [r1, #12]
 1150 0022 8740     		lsl	r7, r7, r0
 1151 0024 3743     		orr	r7, r6
 608:../Dave/Generated/src/PWMSP003/PWMSP003.c ****             ((uint32_t)0x1U << ((uint32_t)CCU4_GIDLC_SPRB_Pos));
 609:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 610:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Start the timer slice */
 611:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLC |=\
 612:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         ((uint32_t)0x1U << ((uint32_t)CCU4_GIDLC_CS0I_Pos +\
 613:../Dave/Generated/src/PWMSP003/PWMSP003.c ****             (uint32_t)HandlePtr->Slice));
 1152              		.loc 1 613 0
 1153 0026 151C     		mov	r5, r2
 607:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLC |=\
 1154              		.loc 1 607 0
 1155 0028 CF60     		str	r7, [r1, #12]
 1156              		.loc 1 613 0
 1157 002a 5835     		add	r5, r5, #88
 612:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         ((uint32_t)0x1U << ((uint32_t)CCU4_GIDLC_CS0I_Pos +\
 1158              		.loc 1 612 0
 1159 002c 2D78     		ldrb	r5, [r5]
 1160 002e 071C     		mov	r7, r0
 611:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLC |=\
 1161              		.loc 1 611 0
 1162 0030 CE68     		ldr	r6, [r1, #12]
 612:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         ((uint32_t)0x1U << ((uint32_t)CCU4_GIDLC_CS0I_Pos +\
 1163              		.loc 1 612 0
 1164 0032 AF40     		lsl	r7, r7, r5
 1165 0034 3D1C     		mov	r5, r7
 611:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLC |=\
 1166              		.loc 1 611 0
 1167 0036 3543     		orr	r5, r6
 1168 0038 CD60     		str	r5, [r1, #12]
 614:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 615:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->TC, CCU4_CC4_TC_TRAPE_Msk,\
 1169              		.loc 1 615 0
 1170 003a 517C     		ldrb	r1, [r2, #17]
 1171 003c 8025     		mov	r5, #128
 1172 003e 5E69     		ldr	r6, [r3, #20]
 1173 0040 4F04     		lsl	r7, r1, #17
 1174 0042 A902     		lsl	r1, r5, #10
 1175 0044 0C4D     		ldr	r5, .L94+4
 1176 0046 0F40     		and	r7, r1
 1177 0048 3540     		and	r5, r6
 1178 004a 3D43     		orr	r5, r7
 1179 004c 5D61     		str	r5, [r3, #20]
 616:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 617:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 618:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Set run bit of slices if external start is not configured */
 619:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if (HandlePtr->kStartEvent == PWMSP003_NO_EVENT)
 1180              		.loc 1 619 0
 1181 004e 0832     		add	r2, r2, #8
 1182              	.LVL85:
 1183 0050 D67F     		ldrb	r6, [r2, #31]
 1184 0052 002E     		cmp	r6, #0
 1185 0054 03D1     		bne	.L89
 620:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 621:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)0x1U;
 1186              		.loc 1 621 0
 1187 0056 D968     		ldr	r1, [r3, #12]
 1188 0058 0843     		orr	r0, r1
 1189 005a D860     		str	r0, [r3, #12]
 1190 005c 05E0     		b	.L90
 1191              	.L89:
 622:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 623:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else
 624:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 625:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->CMC,\
 1192              		.loc 1 625 0
 1193 005e 5868     		ldr	r0, [r3, #4]
 1194 0060 0322     		mov	r2, #3
 1195              	.LVL86:
 1196 0062 1640     		and	r6, r2
 1197 0064 9043     		bic	r0, r2
 1198 0066 0643     		orr	r6, r0
 1199 0068 5E60     		str	r6, [r3, #4]
 1200              	.L90:
 626:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_CMC_STRTS_Msk,\
 627:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                (uint32_t)CCU4_CC4_CMC_STRTS_Pos,\
 628:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                HandlePtr->kStartEvent);
 629:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 630:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 631:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->DynamicDataType->StateType = PWMSP003_RUNNING;
 1201              		.loc 1 631 0
 1202 006a 0223     		mov	r3, #2
 1203 006c 2370     		strb	r3, [r4]
 1204              	.LVL87:
 632:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1205              		.loc 1 632 0
 1206 006e 0020     		mov	r0, #0
 1207              	.LVL88:
 1208              	.L88:
 633:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   } while (0);
 634:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 635:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 636:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1209              		.loc 1 636 0
 1210              		@ sp needed for prologue
 1211 0070 F0BD     		pop	{r4, r5, r6, r7, pc}
 1212              	.L95:
 1213 0072 C046     		.align	2
 1214              	.L94:
 1215 0074 0F0F0000 		.word	3855
 1216 0078 FFFFFDFF 		.word	-131073
 1217              		.cfi_endproc
 1218              	.LFE44:
 1220              		.section	.text.PWMSP003_Init,"ax",%progbits
 1221              		.align	1
 1222              		.global	PWMSP003_Init
 1223              		.code	16
 1224              		.thumb_func
 1226              	PWMSP003_Init:
 1227              	.LFB42:
 206:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1228              		.loc 1 206 0
 1229              		.cfi_startproc
 1230              	.LVL89:
 1231 0000 38B5     		push	{r3, r4, r5, lr}
 1232              	.LCFI5:
 1233              		.cfi_def_cfa_offset 16
 1234              		.cfi_offset 3, -16
 1235              		.cfi_offset 4, -12
 1236              		.cfi_offset 5, -8
 1237              		.cfi_offset 14, -4
 206:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1238              		.loc 1 206 0
 1239 0002 0024     		mov	r4, #0
 1240              	.LVL90:
 1241              	.L98:
 212:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Error = PWMSP003_lInit((PWMSP003_HandleType*)PWMSP003_HandleArr[HandleNum]);
 1242              		.loc 1 212 0
 1243 0004 084D     		ldr	r5, .L100
 1244 0006 6519     		add	r5, r4, r5
 1245 0008 2868     		ldr	r0, [r5]
 1246 000a FFF7FEFF 		bl	PWMSP003_lInit
 1247              	.LVL91:
 215:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(Error == (uint32_t)DAVEApp_SUCCESS)
 1248              		.loc 1 215 0
 1249 000e 0028     		cmp	r0, #0
 1250 0010 05D1     		bne	.L97
 217:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if (PWMSP003_HandleArr[HandleNum]->StartControl == (uint8_t)SET)
 1251              		.loc 1 217 0
 1252 0012 2868     		ldr	r0, [r5]
 1253              	.LVL92:
 1254 0014 0378     		ldrb	r3, [r0]
 1255 0016 012B     		cmp	r3, #1
 1256 0018 01D1     		bne	.L97
 219:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         Error = PWMSP003_Start((PWMSP003_HandleType*)
 1257              		.loc 1 219 0
 1258 001a FFF7FEFF 		bl	PWMSP003_Start
 1259              	.LVL93:
 1260              	.L97:
 1261 001e 0434     		add	r4, r4, #4
 210:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   for(HandleNum = 0; HandleNum < PWMSP003_NUM_INSTANCES; HandleNum++)
 1262              		.loc 1 210 0
 1263 0020 0C2C     		cmp	r4, #12
 1264 0022 EFD1     		bne	.L98
 224:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1265              		.loc 1 224 0
 1266              		@ sp needed for prologue
 1267 0024 38BD     		pop	{r3, r4, r5, pc}
 1268              	.L101:
 1269 0026 C046     		.align	2
 1270              	.L100:
 1271 0028 00000000 		.word	PWMSP003_HandleArr
 1272              		.cfi_endproc
 1273              	.LFE42:
 1275              		.section	.text.PWMSP003_Deinit,"ax",%progbits
 1276              		.align	1
 1277              		.global	PWMSP003_Deinit
 1278              		.code	16
 1279              		.thumb_func
 1281              	PWMSP003_Deinit:
 1282              	.LFB45:
 637:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 638:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 639:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function will reset CCU4_CCy slice registers with default values.
 640:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 641:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_Deinit(const PWMSP003_HandleType* HandlePtr)
 642:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1283              		.loc 1 642 0
 1284              		.cfi_startproc
 1285              	.LVL94:
 1286 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1287              	.LCFI6:
 1288              		.cfi_def_cfa_offset 20
 1289              		.cfi_offset 4, -20
 1290              		.cfi_offset 5, -16
 1291              		.cfi_offset 6, -12
 1292              		.cfi_offset 7, -8
 1293              		.cfi_offset 14, -4
 643:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 644:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 645:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 1294              		.loc 1 645 0
 1295 0002 C46D     		ldr	r4, [r0, #92]
 642:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1296              		.loc 1 642 0
 1297 0004 011C     		mov	r1, r0
 1298              		.loc 1 645 0
 1299 0006 2378     		ldrb	r3, [r4]
 643:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1300              		.loc 1 643 0
 1301 0008 0120     		mov	r0, #1
 1302              	.LVL95:
 1303              		.loc 1 645 0
 1304 000a 002B     		cmp	r3, #0
 1305 000c 20D0     		beq	.L103
 646:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 647:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Stop and Clear the timer */
 648:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP003_SLICE_CLEAR;
 1306              		.loc 1 648 0
 1307 000e CA69     		ldr	r2, [r1, #28]
 1308 0010 0725     		mov	r5, #7
 1309 0012 1561     		str	r5, [r2, #16]
 649:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Clear the interrupts */
 650:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP003_ALL_CCU4_INTR_CLEAR;
 1310              		.loc 1 650 0
 1311 0014 0F4F     		ldr	r7, .L106
 1312 0016 161C     		mov	r6, r2
 651:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Disable all CCU4 Interrupts */
 652:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->INTE = RESET;
 1313              		.loc 1 652 0
 1314 0018 151C     		mov	r5, r2
 1315 001a 0023     		mov	r3, #0
 650:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP003_ALL_CCU4_INTR_CLEAR;
 1316              		.loc 1 650 0
 1317 001c B036     		add	r6, r6, #176
 1318              		.loc 1 652 0
 1319 001e A435     		add	r5, r5, #164
 650:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP003_ALL_CCU4_INTR_CLEAR;
 1320              		.loc 1 650 0
 1321 0020 3760     		str	r7, [r6]
 1322              		.loc 1 652 0
 1323 0022 2B60     		str	r3, [r5]
 653:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 654:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /*Set IDLE mode for selected slice*/
 655:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x1U <<\
 1324              		.loc 1 655 0
 1325 0024 8D69     		ldr	r5, [r1, #24]
 656:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                             ((uint32_t)CCU4_GIDLS_SS0I_Pos +\
 657:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                             (uint32_t)HandlePtr->Slice)) |\
 1326              		.loc 1 657 0
 1327 0026 5831     		add	r1, r1, #88
 1328              	.LVL96:
 655:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x1U <<\
 1329              		.loc 1 655 0
 1330 0028 AF68     		ldr	r7, [r5, #8]
 1331 002a 0978     		ldrb	r1, [r1]
 1332              	.LVL97:
 1333 002c C026     		mov	r6, #192
 1334 002e B600     		lsl	r6, r6, #2
 1335 0030 3E43     		orr	r6, r7
 1336 0032 8840     		lsl	r0, r0, r1
 1337 0034 071C     		mov	r7, r0
 1338 0036 301C     		mov	r0, r6
 1339 0038 3843     		orr	r0, r7
 1340 003a A860     		str	r0, [r5, #8]
 658:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                             ((uint32_t)0x1U << (uint32_t)CCU4_GIDLS_CPRB_Pos) |\
 659:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                             ((uint32_t)0x1U << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 660:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 661:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /*Clear all the registers*/
 662:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->INS = RESET;
 1341              		.loc 1 662 0
 1342 003c 1360     		str	r3, [r2]
 663:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->CMC = RESET;
 664:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->TC = RESET;
 665:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PSC = RESET;
 666:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PSL = RESET;
 667:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->DITS = RESET;
 668:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->CRS = RESET;
 669:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PRS = RESET;
 670:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 671:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->DynamicDataType->StateType = PWMSP003_UNINITIALIZED;
 672:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 673:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1343              		.loc 1 673 0
 1344 003e 181C     		mov	r0, r3
 663:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->CMC = RESET;
 1345              		.loc 1 663 0
 1346 0040 5360     		str	r3, [r2, #4]
 664:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->TC = RESET;
 1347              		.loc 1 664 0
 1348 0042 5361     		str	r3, [r2, #20]
 665:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PSC = RESET;
 1349              		.loc 1 665 0
 1350 0044 5362     		str	r3, [r2, #36]
 666:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PSL = RESET;
 1351              		.loc 1 666 0
 1352 0046 9361     		str	r3, [r2, #24]
 667:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->DITS = RESET;
 1353              		.loc 1 667 0
 1354 0048 1362     		str	r3, [r2, #32]
 668:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->CRS = RESET;
 1355              		.loc 1 668 0
 1356 004a D363     		str	r3, [r2, #60]
 669:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yRegsPtr->PRS = RESET;
 1357              		.loc 1 669 0
 1358 004c 5363     		str	r3, [r2, #52]
 671:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->DynamicDataType->StateType = PWMSP003_UNINITIALIZED;
 1359              		.loc 1 671 0
 1360 004e 2370     		strb	r3, [r4]
 1361              	.LVL98:
 1362              	.L103:
 674:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 675:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 676:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 677:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1363              		.loc 1 677 0
 1364              		@ sp needed for prologue
 1365 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 1366              	.L107:
 1367 0052 C046     		.align	2
 1368              	.L106:
 1369 0054 0F0F0000 		.word	3855
 1370              		.cfi_endproc
 1371              	.LFE45:
 1373              		.section	.text.PWMSP003_Stop,"ax",%progbits
 1374              		.align	1
 1375              		.global	PWMSP003_Stop
 1376              		.code	16
 1377              		.thumb_func
 1379              	PWMSP003_Stop:
 1380              	.LFB46:
 678:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 679:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 680:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function will stop the Single Phase PWM APP which will eventually
 681:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * stop the CCU4_CCy slice. This disables the interrupts and sets the IDLE mode
 682:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * of the CCU slice.
 683:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 684:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_Stop(const PWMSP003_HandleType* HandlePtr)
 685:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1381              		.loc 1 685 0
 1382              		.cfi_startproc
 1383              	.LVL99:
 1384 0000 30B5     		push	{r4, r5, lr}
 1385              	.LCFI7:
 1386              		.cfi_def_cfa_offset 12
 1387              		.cfi_offset 4, -12
 1388              		.cfi_offset 5, -8
 1389              		.cfi_offset 14, -4
 686:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 687:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp1;
 688:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp2;
 689:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 690:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   do
 691:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 692:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP003_RUNNING)
 1390              		.loc 1 692 0
 1391 0002 C26D     		ldr	r2, [r0, #92]
 685:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1392              		.loc 1 685 0
 1393 0004 031C     		mov	r3, r0
 1394              		.loc 1 692 0
 1395 0006 1178     		ldrb	r1, [r2]
 686:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1396              		.loc 1 686 0
 1397 0008 0120     		mov	r0, #1
 1398              	.LVL100:
 1399              		.loc 1 692 0
 1400 000a 0229     		cmp	r1, #2
 1401 000c 12D1     		bne	.L109
 693:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 694:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       break;
 695:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 696:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else
 697:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 698:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       /* Clear the timer run bits, Reset the Prescaler */
 699:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->Slice);
 1402              		.loc 1 699 0
 1403 000e 1C1C     		mov	r4, r3
 700:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 701:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP003_SLICE_CLEAR;
 1404              		.loc 1 701 0
 1405 0010 D969     		ldr	r1, [r3, #28]
 699:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->Slice);
 1406              		.loc 1 699 0
 1407 0012 5834     		add	r4, r4, #88
 1408 0014 2578     		ldrb	r5, [r4]
 1409              	.LVL101:
 702:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1410              		.loc 1 702 0
 1411 0016 9B69     		ldr	r3, [r3, #24]
 1412              	.LVL102:
 701:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP003_SLICE_CLEAR;
 1413              		.loc 1 701 0
 1414 0018 0724     		mov	r4, #7
 1415              	.LVL103:
 1416 001a 0C61     		str	r4, [r1, #16]
 1417              		.loc 1 702 0
 1418 001c 9968     		ldr	r1, [r3, #8]
 1419 001e 8024     		mov	r4, #128
 1420 0020 A400     		lsl	r4, r4, #2
 1421 0022 0C43     		orr	r4, r1
 1422 0024 011C     		mov	r1, r0
 1423 0026 A940     		lsl	r1, r1, r5
 1424 0028 201C     		mov	r0, r4
 1425 002a 0843     		orr	r0, r1
 703:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 704:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->DynamicDataType->StateType = PWMSP003_STOPPED;
 1426              		.loc 1 704 0
 1427 002c 0325     		mov	r5, #3
 1428              	.LVL104:
 702:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1429              		.loc 1 702 0
 1430 002e 9860     		str	r0, [r3, #8]
 1431              		.loc 1 704 0
 1432 0030 1570     		strb	r5, [r2]
 1433              	.LVL105:
 705:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1434              		.loc 1 705 0
 1435 0032 0020     		mov	r0, #0
 1436              	.LVL106:
 1437              	.L109:
 706:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 707:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   } while (0);
 708:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 709:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 710:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1438              		.loc 1 710 0
 1439              		@ sp needed for prologue
 1440 0034 30BD     		pop	{r4, r5, pc}
 1441              		.cfi_endproc
 1442              	.LFE46:
 1444              		.section	.text.PWMSP003_GetSliceIdleStatus,"ax",%progbits
 1445              		.align	1
 1446              		.global	PWMSP003_GetSliceIdleStatus
 1447              		.code	16
 1448              		.thumb_func
 1450              	PWMSP003_GetSliceIdleStatus:
 1451              	.LFB47:
 711:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 712:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 713:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function reads the idle status of the given CCU4 slice
 714:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 715:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_GetSliceIdleStatus(const PWMSP003_HandleType * HandlePtr,
 716:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                      uint32_t * State)
 717:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1452              		.loc 1 717 0
 1453              		.cfi_startproc
 1454              	.LVL107:
 1455              		.loc 1 717 0
 1456 0000 031C     		mov	r3, r0
 718:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 719:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 720:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if(HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 1457              		.loc 1 720 0
 1458 0002 C06D     		ldr	r0, [r0, #92]
 1459              	.LVL108:
 1460 0004 0278     		ldrb	r2, [r0]
 718:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1461              		.loc 1 718 0
 1462 0006 0120     		mov	r0, #1
 1463              		.loc 1 720 0
 1464 0008 002A     		cmp	r2, #0
 1465 000a 08D0     		beq	.L112
 721:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 722:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Get the slice idle status */
 723:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     *State = (uint32_t)RD_REG(HandlePtr->CC4yKernRegsPtr->GSTAT,\
 1466              		.loc 1 723 0
 1467 000c 9A69     		ldr	r2, [r3, #24]
 1468 000e 5833     		add	r3, r3, #88
 1469              	.LVL109:
 1470 0010 1B78     		ldrb	r3, [r3]
 1471              	.LVL110:
 1472 0012 5268     		ldr	r2, [r2, #4]
 1473 0014 9840     		lsl	r0, r0, r3
 1474 0016 1040     		and	r0, r2
 1475 0018 D840     		lsr	r0, r0, r3
 1476 001a 0860     		str	r0, [r1]
 1477              	.LVL111:
 724:../Dave/Generated/src/PWMSP003/PWMSP003.c ****              (uint32_t)(CCU4_GSTAT_S0I_Msk << (uint32_t)HandlePtr->Slice),\
 725:../Dave/Generated/src/PWMSP003/PWMSP003.c ****              (uint32_t)(CCU4_GSTAT_S0I_Pos + (uint32_t)HandlePtr->Slice));
 726:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 727:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1478              		.loc 1 727 0
 1479 001c 0020     		mov	r0, #0
 1480              	.LVL112:
 1481              	.L112:
 728:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 729:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 730:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 731:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1482              		.loc 1 731 0
 1483              		@ sp needed for prologue
 1484 001e 7047     		bx	lr
 1485              		.cfi_endproc
 1486              	.LFE47:
 1488              		.section	.text.PWMSP003_SetSliceIdleState,"ax",%progbits
 1489              		.align	1
 1490              		.global	PWMSP003_SetSliceIdleState
 1491              		.code	16
 1492              		.thumb_func
 1494              	PWMSP003_SetSliceIdleState:
 1495              	.LFB48:
 732:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 733:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 734:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function sets the given CCU4 slice to idle state
 735:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 736:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_SetSliceIdleState(const PWMSP003_HandleType * HandlePtr)
 737:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1496              		.loc 1 737 0
 1497              		.cfi_startproc
 1498              	.LVL113:
 738:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 739:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 740:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if(HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 1499              		.loc 1 740 0
 1500 0000 C36D     		ldr	r3, [r0, #92]
 1501 0002 1A78     		ldrb	r2, [r3]
 738:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1502              		.loc 1 738 0
 1503 0004 0123     		mov	r3, #1
 1504              		.loc 1 740 0
 1505 0006 002A     		cmp	r2, #0
 1506 0008 07D0     		beq	.L116
 741:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 742:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Set the slice idle state */
 743:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(CCU4_GIDLS_SS0I_Msk << \
 1507              		.loc 1 743 0
 1508 000a 8269     		ldr	r2, [r0, #24]
 744:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                              (uint32_t)HandlePtr->Slice);
 1509              		.loc 1 744 0
 1510 000c 5830     		add	r0, r0, #88
 1511              	.LVL114:
 743:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(CCU4_GIDLS_SS0I_Msk << \
 1512              		.loc 1 743 0
 1513 000e 0078     		ldrb	r0, [r0]
 1514              	.LVL115:
 1515 0010 9168     		ldr	r1, [r2, #8]
 1516 0012 8340     		lsl	r3, r3, r0
 1517 0014 0B43     		orr	r3, r1
 1518 0016 9360     		str	r3, [r2, #8]
 1519              	.LVL116:
 745:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 746:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1520              		.loc 1 746 0
 1521 0018 0023     		mov	r3, #0
 1522              	.LVL117:
 1523              	.L116:
 747:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 748:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 749:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 750:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1524              		.loc 1 750 0
 1525 001a 181C     		mov	r0, r3
 1526              		@ sp needed for prologue
 1527 001c 7047     		bx	lr
 1528              		.cfi_endproc
 1529              	.LFE48:
 1531              		.section	.text.PWMSP003_RemoveSliceIdleState,"ax",%progbits
 1532              		.align	1
 1533              		.global	PWMSP003_RemoveSliceIdleState
 1534              		.code	16
 1535              		.thumb_func
 1537              	PWMSP003_RemoveSliceIdleState:
 1538              	.LFB49:
 751:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 752:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 753:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function brings the given CCU4 slice out of idle state
 754:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 755:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_RemoveSliceIdleState(const PWMSP003_HandleType * HandlePtr)
 756:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1539              		.loc 1 756 0
 1540              		.cfi_startproc
 1541              	.LVL118:
 757:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 758:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 759:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if(HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 1542              		.loc 1 759 0
 1543 0000 C36D     		ldr	r3, [r0, #92]
 1544 0002 1A78     		ldrb	r2, [r3]
 757:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1545              		.loc 1 757 0
 1546 0004 0123     		mov	r3, #1
 1547              		.loc 1 759 0
 1548 0006 002A     		cmp	r2, #0
 1549 0008 07D0     		beq	.L120
 760:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 761:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Clear the slice idle state */
 762:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLC |= (uint32_t)(CCU4_GIDLC_CS0I_Msk << \
 1550              		.loc 1 762 0
 1551 000a 8269     		ldr	r2, [r0, #24]
 763:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                              (uint32_t)HandlePtr->Slice);
 1552              		.loc 1 763 0
 1553 000c 5830     		add	r0, r0, #88
 1554              	.LVL119:
 762:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     HandlePtr->CC4yKernRegsPtr->GIDLC |= (uint32_t)(CCU4_GIDLC_CS0I_Msk << \
 1555              		.loc 1 762 0
 1556 000e 0078     		ldrb	r0, [r0]
 1557              	.LVL120:
 1558 0010 D168     		ldr	r1, [r2, #12]
 1559 0012 8340     		lsl	r3, r3, r0
 1560 0014 0B43     		orr	r3, r1
 1561 0016 D360     		str	r3, [r2, #12]
 1562              	.LVL121:
 764:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1563              		.loc 1 764 0
 1564 0018 0023     		mov	r3, #0
 1565              	.LVL122:
 1566              	.L120:
 765:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 766:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 767:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 768:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1567              		.loc 1 768 0
 1568 001a 181C     		mov	r0, r3
 1569              		@ sp needed for prologue
 1570 001c 7047     		bx	lr
 1571              		.cfi_endproc
 1572              	.LFE49:
 1574              		.section	.text.PWMSP003_StartTimer,"ax",%progbits
 1575              		.align	1
 1576              		.global	PWMSP003_StartTimer
 1577              		.code	16
 1578              		.thumb_func
 1580              	PWMSP003_StartTimer:
 1581              	.LFB50:
 769:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 770:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 771:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function starts the timer
 772:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 773:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_StartTimer(const PWMSP003_HandleType * HandlePtr)
 774:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1582              		.loc 1 774 0
 1583              		.cfi_startproc
 1584              	.LVL123:
 775:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 776:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 777:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 1585              		.loc 1 777 0
 1586 0000 C36D     		ldr	r3, [r0, #92]
 1587 0002 1A78     		ldrb	r2, [r3]
 1588 0004 0123     		mov	r3, #1
 1589 0006 002A     		cmp	r2, #0
 1590 0008 04D0     		beq	.L124
 778:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 779:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->TCSET, CCU4_CC4_TCSET_TRBS_Pos);
 1591              		.loc 1 779 0
 1592 000a C069     		ldr	r0, [r0, #28]
 1593              	.LVL124:
 1594 000c C168     		ldr	r1, [r0, #12]
 1595 000e 0B43     		orr	r3, r1
 1596 0010 C360     		str	r3, [r0, #12]
 1597              	.LVL125:
 780:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1598              		.loc 1 780 0
 1599 0012 0023     		mov	r3, #0
 1600              	.LVL126:
 1601              	.L124:
 781:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 782:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 783:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 784:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1602              		.loc 1 784 0
 1603 0014 181C     		mov	r0, r3
 1604              		@ sp needed for prologue
 1605 0016 7047     		bx	lr
 1606              		.cfi_endproc
 1607              	.LFE50:
 1609              		.section	.text.PWMSP003_StopTimer,"ax",%progbits
 1610              		.align	1
 1611              		.global	PWMSP003_StopTimer
 1612              		.code	16
 1613              		.thumb_func
 1615              	PWMSP003_StopTimer:
 1616              	.LFB51:
 785:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 786:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 787:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function stops the timer of the given slice
 788:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 789:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_StopTimer(const PWMSP003_HandleType * HandlePtr)
 790:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1617              		.loc 1 790 0
 1618              		.cfi_startproc
 1619              	.LVL127:
 791:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 792:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 793:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP003_RUNNING)
 1620              		.loc 1 793 0
 1621 0000 C36D     		ldr	r3, [r0, #92]
 1622 0002 1A78     		ldrb	r2, [r3]
 1623 0004 0123     		mov	r3, #1
 1624 0006 022A     		cmp	r2, #2
 1625 0008 04D1     		bne	.L128
 794:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 795:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->TCCLR, CCU4_CC4_TCCLR_TRBC_Pos);
 1626              		.loc 1 795 0
 1627 000a C069     		ldr	r0, [r0, #28]
 1628              	.LVL128:
 1629 000c 0169     		ldr	r1, [r0, #16]
 1630 000e 0B43     		orr	r3, r1
 1631 0010 0361     		str	r3, [r0, #16]
 1632              	.LVL129:
 796:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1633              		.loc 1 796 0
 1634 0012 0023     		mov	r3, #0
 1635              	.LVL130:
 1636              	.L128:
 797:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 798:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 799:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 800:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1637              		.loc 1 800 0
 1638 0014 181C     		mov	r0, r3
 1639              		@ sp needed for prologue
 1640 0016 7047     		bx	lr
 1641              		.cfi_endproc
 1642              	.LFE51:
 1644              		.section	.text.PWMSP003_GetTimerValue,"ax",%progbits
 1645              		.align	1
 1646              		.global	PWMSP003_GetTimerValue
 1647              		.code	16
 1648              		.thumb_func
 1650              	PWMSP003_GetTimerValue:
 1651              	.LFB52:
 801:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 802:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 803:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function returns the timer registers of the given slice
 804:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 805:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_GetTimerValue(const PWMSP003_HandleType * HandlePtr,
 806:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                       PWMSP003_TimerRegsType* TimerRegs)
 807:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1652              		.loc 1 807 0
 1653              		.cfi_startproc
 1654              	.LVL131:
 1655              		.loc 1 807 0
 1656 0000 031C     		mov	r3, r0
 808:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 809:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 810:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 1657              		.loc 1 810 0
 1658 0002 C06D     		ldr	r0, [r0, #92]
 1659              	.LVL132:
 1660 0004 0278     		ldrb	r2, [r0]
 808:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1661              		.loc 1 808 0
 1662 0006 0120     		mov	r0, #1
 1663              		.loc 1 810 0
 1664 0008 002A     		cmp	r2, #0
 1665 000a 07D0     		beq	.L131
 811:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 812:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 1666              		.loc 1 812 0
 1667 000c DB69     		ldr	r3, [r3, #28]
 1668              	.LVL133:
 1669 000e 186F     		ldr	r0, [r3, #112]
 813:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
 814:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 815:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 1670              		.loc 1 815 0
 1671 0010 DA6B     		ldr	r2, [r3, #60]
 816:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 1672              		.loc 1 816 0
 1673 0012 5B6B     		ldr	r3, [r3, #52]
 812:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 1674              		.loc 1 812 0
 1675 0014 8880     		strh	r0, [r1, #4]
 815:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 1676              		.loc 1 815 0
 1677 0016 0A80     		strh	r2, [r1]
 1678              		.loc 1 816 0
 1679 0018 4B80     		strh	r3, [r1, #2]
 1680              	.LVL134:
 817:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 818:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1681              		.loc 1 818 0
 1682 001a 0020     		mov	r0, #0
 1683              	.LVL135:
 1684              	.L131:
 819:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 820:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 821:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1685              		.loc 1 821 0
 1686              		@ sp needed for prologue
 1687 001c 7047     		bx	lr
 1688              		.cfi_endproc
 1689              	.LFE52:
 1691              		.section	.text.PWMSP003_GetTimerStatus,"ax",%progbits
 1692              		.align	1
 1693              		.global	PWMSP003_GetTimerStatus
 1694              		.code	16
 1695              		.thumb_func
 1697              	PWMSP003_GetTimerStatus:
 1698              	.LFB53:
 822:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 823:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 824:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function returns the timer status - Running or Idle
 825:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 826:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_GetTimerStatus(const PWMSP003_HandleType * HandlePtr,
 827:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                  uint32_t* TimerStatus)
 828:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1699              		.loc 1 828 0
 1700              		.cfi_startproc
 1701              	.LVL136:
 829:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 830:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 831:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 1702              		.loc 1 831 0
 1703 0000 C36D     		ldr	r3, [r0, #92]
 1704 0002 1A78     		ldrb	r2, [r3]
 1705 0004 0123     		mov	r3, #1
 1706 0006 002A     		cmp	r2, #0
 1707 0008 04D0     		beq	.L135
 832:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 833:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 1708              		.loc 1 833 0
 1709 000a C069     		ldr	r0, [r0, #28]
 1710              	.LVL137:
 1711 000c 8268     		ldr	r2, [r0, #8]
 1712 000e 1340     		and	r3, r2
 1713 0010 0B60     		str	r3, [r1]
 1714              	.LVL138:
 834:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                               CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
 835:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 836:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1715              		.loc 1 836 0
 1716 0012 0023     		mov	r3, #0
 1717              	.LVL139:
 1718              	.L135:
 837:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 838:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 839:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 840:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1719              		.loc 1 840 0
 1720 0014 181C     		mov	r0, r3
 1721              		@ sp needed for prologue
 1722 0016 7047     		bx	lr
 1723              		.cfi_endproc
 1724              	.LFE53:
 1726              		.section	.text.PWMSP003_GetCompareMatchStatus,"ax",%progbits
 1727              		.align	1
 1728              		.global	PWMSP003_GetCompareMatchStatus
 1729              		.code	16
 1730              		.thumb_func
 1732              	PWMSP003_GetCompareMatchStatus:
 1733              	.LFB54:
 841:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 842:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 843:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function reads the compare match status (ST bit) of the given slice.
 844:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 845:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_GetCompareMatchStatus(const PWMSP003_HandleType * HandlePtr,
 846:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                         uint8_t * CompareMatchStatus)
 847:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1734              		.loc 1 847 0
 1735              		.cfi_startproc
 1736              	.LVL140:
 848:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 849:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 850:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 1737              		.loc 1 850 0
 1738 0000 C36D     		ldr	r3, [r0, #92]
 1739 0002 1A78     		ldrb	r2, [r3]
 848:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1740              		.loc 1 848 0
 1741 0004 0123     		mov	r3, #1
 1742              		.loc 1 850 0
 1743 0006 002A     		cmp	r2, #0
 1744 0008 0DD0     		beq	.L139
 851:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 852:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     *CompareMatchStatus = (uint32_t) RD_REG(HandlePtr->CC4yKernRegsPtr->GCST,\
 1745              		.loc 1 852 0
 1746 000a 8369     		ldr	r3, [r0, #24]
 1747 000c 5830     		add	r0, r0, #88
 1748              	.LVL141:
 1749 000e 9A69     		ldr	r2, [r3, #24]
 1750 0010 0378     		ldrb	r3, [r0]
 1751 0012 8020     		mov	r0, #128
 1752              	.LVL142:
 1753 0014 4002     		lsl	r0, r0, #9
 1754 0016 9840     		lsl	r0, r0, r3
 1755 0018 1040     		and	r0, r2
 1756 001a 1A1C     		mov	r2, r3
 1757 001c 1032     		add	r2, r2, #16
 1758 001e 031C     		mov	r3, r0
 1759 0020 D340     		lsr	r3, r3, r2
 1760 0022 0B70     		strb	r3, [r1]
 1761              	.LVL143:
 853:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                           (CCU4_GCST_CC40ST_Msk << (uint32_t)HandlePtr->Slice),\
 854:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                           (CCU4_GCST_CC40ST_Pos + (uint32_t)HandlePtr->Slice));
 855:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 856:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1762              		.loc 1 856 0
 1763 0024 0023     		mov	r3, #0
 1764              	.LVL144:
 1765              	.L139:
 857:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 858:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 859:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1766              		.loc 1 859 0
 1767 0026 181C     		mov	r0, r3
 1768              		@ sp needed for prologue
 1769 0028 7047     		bx	lr
 1770              		.cfi_endproc
 1771              	.LFE54:
 1773              		.section	.text.PWMSP003_UpdatePeriod,"ax",%progbits
 1774              		.align	1
 1775              		.global	PWMSP003_UpdatePeriod
 1776              		.code	16
 1777              		.thumb_func
 1779              	PWMSP003_UpdatePeriod:
 1780              	.LFB55:
 860:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 861:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 862:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function changes the PWM frequency.
 863:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * Input parameter is the period register value.
 864:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 865:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_UpdatePeriod(const PWMSP003_HandleType * HandlePtr,
 866:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                 uint32_t Period, uint8_t Recall)
 867:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1781              		.loc 1 867 0
 1782              		.cfi_startproc
 1783              	.LVL145:
 1784 0000 10B5     		push	{r4, lr}
 1785              	.LCFI8:
 1786              		.cfi_def_cfa_offset 8
 1787              		.cfi_offset 4, -8
 1788              		.cfi_offset 14, -4
 868:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 869:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp1;
 870:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 871:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED))
 1789              		.loc 1 871 0
 1790 0002 C36D     		ldr	r3, [r0, #92]
 1791 0004 1C78     		ldrb	r4, [r3]
 868:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1792              		.loc 1 868 0
 1793 0006 0123     		mov	r3, #1
 1794              		.loc 1 871 0
 1795 0008 002C     		cmp	r4, #0
 1796 000a 20D0     		beq	.L143
 872:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 873:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(Recall != TRUE)
 1797              		.loc 1 873 0
 1798 000c 9A42     		cmp	r2, r3
 1799 000e 14D0     		beq	.L144
 874:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 875:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(Period == (uint32_t)0)
 876:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 877:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         Status = (uint32_t)PWMSP003_INVALID_PARAM_ERROR;
 1800              		.loc 1 877 0
 1801 0010 0223     		mov	r3, #2
 875:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(Period == (uint32_t)0)
 1802              		.loc 1 875 0
 1803 0012 0029     		cmp	r1, #0
 1804 0014 1BD0     		beq	.L143
 878:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 879:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else
 880:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 881:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         if(Period > (uint32_t)HandlePtr->kMaxPeriodVal)
 1805              		.loc 1 881 0
 1806 0016 C26C     		ldr	r2, [r0, #76]
 1807              	.LVL146:
 1808 0018 9142     		cmp	r1, r2
 1809 001a 18D8     		bhi	.L143
 882:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 883:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Status = (uint32_t)PWMSP003_INVALID_PARAM_ERROR;
 884:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 885:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         else
 886:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         {
 887:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 888:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           HandlePtr->CC4yRegsPtr->PRS = (Period & 0xFFFFU);
 1810              		.loc 1 888 0
 1811 001c C369     		ldr	r3, [r0, #28]
 1812 001e 8CB2     		uxth	r4, r1
 1813 0020 5C63     		str	r4, [r3, #52]
 1814              	.LVL147:
 889:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 890:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           /*Request shadow transfer for the slice*/
 891:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos +\
 892:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                   ((uint32_t)PWMSP003_NO_OF_SLICES*(uint32_t)HandlePtr->Slice);
 893:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 894:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |=    ((uint32_t)0x01 << Temp1);
 1815              		.loc 1 894 0
 1816 0022 8369     		ldr	r3, [r0, #24]
 892:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                   ((uint32_t)PWMSP003_NO_OF_SLICES*(uint32_t)HandlePtr->Slice);
 1817              		.loc 1 892 0
 1818 0024 5830     		add	r0, r0, #88
 1819              	.LVL148:
 1820 0026 0078     		ldrb	r0, [r0]
 1821              	.LVL149:
 1822              		.loc 1 894 0
 1823 0028 0124     		mov	r4, #1
 891:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos +\
 1824              		.loc 1 891 0
 1825 002a 8200     		lsl	r2, r0, #2
 1826              	.LVL150:
 1827              		.loc 1 894 0
 1828 002c 1969     		ldr	r1, [r3, #16]
 1829              	.LVL151:
 1830 002e 9440     		lsl	r4, r4, r2
 1831 0030 201C     		mov	r0, r4
 1832 0032 0843     		orr	r0, r1
 1833 0034 1861     		str	r0, [r3, #16]
 1834              	.LVL152:
 895:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 896:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           Status = (uint32_t)DAVEApp_SUCCESS;
 1835              		.loc 1 896 0
 1836 0036 0023     		mov	r3, #0
 1837 0038 09E0     		b	.L143
 1838              	.LVL153:
 1839              	.L144:
 897:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         }
 898:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 899:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 900:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 901:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else
 902:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 903:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       /* Cancel any pending shadow transfer for the slice */
 904:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = (uint32_t)CCU4_GCSC_S0SC_Pos +\
 905:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               ((uint32_t)PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 906:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 907:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yKernRegsPtr->GCSC |=  ((uint32_t)0x01 << Temp1);
 1840              		.loc 1 907 0
 1841 003a 8269     		ldr	r2, [r0, #24]
 1842              	.LVL154:
 905:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               ((uint32_t)PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 1843              		.loc 1 905 0
 1844 003c 5830     		add	r0, r0, #88
 1845              	.LVL155:
 1846 003e 0178     		ldrb	r1, [r0]
 1847              	.LVL156:
 1848              		.loc 1 907 0
 1849 0040 181C     		mov	r0, r3
 1850              	.LVL157:
 904:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = (uint32_t)CCU4_GCSC_S0SC_Pos +\
 1851              		.loc 1 904 0
 1852 0042 8900     		lsl	r1, r1, #2
 1853              	.LVL158:
 1854              		.loc 1 907 0
 1855 0044 5469     		ldr	r4, [r2, #20]
 1856 0046 8840     		lsl	r0, r0, r1
 1857 0048 011C     		mov	r1, r0
 1858              	.LVL159:
 1859 004a 2143     		orr	r1, r4
 1860 004c 5161     		str	r1, [r2, #20]
 1861              	.LVL160:
 1862              	.L143:
 908:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 909:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 910:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 911:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1863              		.loc 1 911 0
 1864 004e 181C     		mov	r0, r3
 1865              		@ sp needed for prologue
 1866 0050 10BD     		pop	{r4, pc}
 1867              		.cfi_endproc
 1868              	.LFE55:
 1870              		.section	.text.PWMSP003_UpdateCompare,"ax",%progbits
 1871              		.align	1
 1872              		.global	PWMSP003_UpdateCompare
 1873              		.code	16
 1874              		.thumb_func
 1876              	PWMSP003_UpdateCompare:
 1877              	.LFB56:
 912:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 913:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 914:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function changes the compare register value.
 915:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 916:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_UpdateCompare(const PWMSP003_HandleType * HandlePtr,
 917:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                 uint32_t CompareVal, uint8_t Recall)
 918:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1878              		.loc 1 918 0
 1879              		.cfi_startproc
 1880              	.LVL161:
 1881 0000 30B5     		push	{r4, r5, lr}
 1882              	.LCFI9:
 1883              		.cfi_def_cfa_offset 12
 1884              		.cfi_offset 4, -12
 1885              		.cfi_offset 5, -8
 1886              		.cfi_offset 14, -4
 1887              		.loc 1 918 0
 1888 0002 031C     		mov	r3, r0
 919:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 920:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp1;
 921:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 922:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED))
 1889              		.loc 1 922 0
 1890 0004 C06D     		ldr	r0, [r0, #92]
 1891              	.LVL162:
 1892 0006 0478     		ldrb	r4, [r0]
 919:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1893              		.loc 1 919 0
 1894 0008 0120     		mov	r0, #1
 1895              		.loc 1 922 0
 1896 000a 002C     		cmp	r4, #0
 1897 000c 17D0     		beq	.L151
 1898 000e 1D1C     		mov	r5, r3
 1899 0010 9C69     		ldr	r4, [r3, #24]
 1900 0012 5835     		add	r5, r5, #88
 923:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 924:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(Recall != TRUE)
 1901              		.loc 1 924 0
 1902 0014 8242     		cmp	r2, r0
 1903 0016 0AD0     		beq	.L152
 925:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 926:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yRegsPtr->CRS = (CompareVal & 0xFFFFU);
 1904              		.loc 1 926 0
 1905 0018 DA69     		ldr	r2, [r3, #28]
 1906              	.LVL163:
 1907 001a 8BB2     		uxth	r3, r1
 1908              	.LVL164:
 1909 001c D363     		str	r3, [r2, #60]
 1910              	.LVL165:
 927:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 928:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       /*Request shadow transfer for the slice*/
 929:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = CCU4_GCSS_S0SE_Pos +\
 930:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                        (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 1911              		.loc 1 930 0
 1912 001e 2D78     		ldrb	r5, [r5]
 1913              	.LVL166:
 931:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 932:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=    ((uint32_t)0x01 << Temp1);
 1914              		.loc 1 932 0
 1915 0020 2169     		ldr	r1, [r4, #16]
 1916              	.LVL167:
 929:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = CCU4_GCSS_S0SE_Pos +\
 1917              		.loc 1 929 0
 1918 0022 AA00     		lsl	r2, r5, #2
 1919              		.loc 1 932 0
 1920 0024 9040     		lsl	r0, r0, r2
 1921 0026 0843     		orr	r0, r1
 1922 0028 2061     		str	r0, [r4, #16]
 1923              	.LVL168:
 933:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 934:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1924              		.loc 1 934 0
 1925 002a 0020     		mov	r0, #0
 1926 002c 07E0     		b	.L151
 1927              	.LVL169:
 1928              	.L152:
 935:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 936:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 937:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else
 938:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 939:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       /* Cancel any pending shadow transfer of the slice */
 940:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = CCU4_GCSC_S0SC_Pos +\
 941:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                       (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 1929              		.loc 1 941 0
 1930 002e 2978     		ldrb	r1, [r5]
 1931              	.LVL170:
 942:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 943:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yKernRegsPtr->GCSC |=  ((uint32_t)0x01 << Temp1);
 1932              		.loc 1 943 0
 1933 0030 051C     		mov	r5, r0
 940:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = CCU4_GCSC_S0SC_Pos +\
 1934              		.loc 1 940 0
 1935 0032 8B00     		lsl	r3, r1, #2
 1936              	.LVL171:
 1937              		.loc 1 943 0
 1938 0034 6269     		ldr	r2, [r4, #20]
 1939              	.LVL172:
 1940 0036 9D40     		lsl	r5, r5, r3
 1941 0038 291C     		mov	r1, r5
 1942 003a 1143     		orr	r1, r2
 1943 003c 6161     		str	r1, [r4, #20]
 1944              	.LVL173:
 1945              	.L151:
 944:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 945:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 946:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 947:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
 948:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 1946              		.loc 1 948 0
 1947              		@ sp needed for prologue
 1948 003e 30BD     		pop	{r4, r5, pc}
 1949              		.cfi_endproc
 1950              	.LFE56:
 1952              		.global	__aeabi_fcmpgt
 1953              		.global	__aeabi_fcmplt
 1954              		.section	.text.PWMSP003_SetDutyCycle,"ax",%progbits
 1955              		.align	1
 1956              		.global	PWMSP003_SetDutyCycle
 1957              		.code	16
 1958              		.thumb_func
 1960              	PWMSP003_SetDutyCycle:
 1961              	.LFB57:
 949:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 950:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 951:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function is used to change the duty cycle of the PWM waveform
 952:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 953:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_SetDutyCycle(const PWMSP003_HandleType* HandlePtr,
 954:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                float Duty)
 955:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1962              		.loc 1 955 0
 1963              		.cfi_startproc
 1964              	.LVL174:
 1965 0000 70B5     		push	{r4, r5, r6, lr}
 1966              	.LCFI10:
 1967              		.cfi_def_cfa_offset 16
 1968              		.cfi_offset 4, -16
 1969              		.cfi_offset 5, -12
 1970              		.cfi_offset 6, -8
 1971              		.cfi_offset 14, -4
 956:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 957:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 958:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 1972              		.loc 1 958 0
 1973 0002 C26D     		ldr	r2, [r0, #92]
 955:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1974              		.loc 1 955 0
 1975 0004 061C     		mov	r6, r0
 1976              		.loc 1 958 0
 1977 0006 1378     		ldrb	r3, [r2]
 955:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 1978              		.loc 1 955 0
 1979 0008 0D1C     		add	r5, r1, #0
 956:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 1980              		.loc 1 956 0
 1981 000a 0124     		mov	r4, #1
 1982              		.loc 1 958 0
 1983 000c 002B     		cmp	r3, #0
 1984 000e 11D0     		beq	.L156
 959:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 960:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if((Duty > (float)100) || (Duty < (float)0))
 1985              		.loc 1 960 0
 1986 0010 081C     		add	r0, r1, #0
 1987              	.LVL175:
 1988 0012 0949     		ldr	r1, .L161
 1989              	.LVL176:
 1990 0014 FFF7FEFF 		bl	__aeabi_fcmpgt
 1991              	.LVL177:
 961:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 962:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = (uint32_t)PWMSP003_INVALID_PARAM_ERROR;
 1992              		.loc 1 962 0
 1993 0018 0224     		mov	r4, #2
 960:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if((Duty > (float)100) || (Duty < (float)0))
 1994              		.loc 1 960 0
 1995 001a 0028     		cmp	r0, #0
 1996 001c 0AD1     		bne	.L156
 960:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if((Duty > (float)100) || (Duty < (float)0))
 1997              		.loc 1 960 0 is_stmt 0 discriminator 1
 1998 001e 281C     		add	r0, r5, #0
 1999 0020 0021     		mov	r1, #0
 2000 0022 FFF7FEFF 		bl	__aeabi_fcmplt
 2001              	.LVL178:
 2002 0026 0028     		cmp	r0, #0
 2003 0028 04D1     		bne	.L156
 963:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 964:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else
 965:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 966:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       /* Call the function as per configured mode */
 967:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 2004              		.loc 1 967 0 is_stmt 1
 2005 002a 746E     		ldr	r4, [r6, #100]
 2006 002c 301C     		mov	r0, r6
 2007 002e 291C     		add	r1, r5, #0
 2008 0030 A047     		blx	r4
 2009              	.LVL179:
 968:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2010              		.loc 1 968 0
 2011 0032 0024     		mov	r4, #0
 2012              	.LVL180:
 2013              	.L156:
 969:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
 970:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
 971:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 972:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return (Status);
 973:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2014              		.loc 1 973 0
 2015 0034 201C     		mov	r0, r4
 2016              		@ sp needed for prologue
 2017              	.LVL181:
 2018              	.LVL182:
 2019              	.LVL183:
 2020 0036 70BD     		pop	{r4, r5, r6, pc}
 2021              	.L162:
 2022              		.align	2
 2023              	.L161:
 2024 0038 0000C842 		.word	1120403456
 2025              		.cfi_endproc
 2026              	.LFE57:
 2028              		.section	.text.PWMSP003_UpdateFloatingPrescaler,"ax",%progbits
 2029              		.align	1
 2030              		.global	PWMSP003_UpdateFloatingPrescaler
 2031              		.code	16
 2032              		.thumb_func
 2034              	PWMSP003_UpdateFloatingPrescaler:
 2035              	.LFB58:
 974:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 975:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
 976:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function changes the floating prescaler register value
 977:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
 978:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_UpdateFloatingPrescaler(const PWMSP003_HandleType * HandlePtr,
 979:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                           uint16_t FloatingPS, uint8_t Recall)
 980:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2036              		.loc 1 980 0
 2037              		.cfi_startproc
 2038              	.LVL184:
 2039 0000 10B5     		push	{r4, lr}
 2040              	.LCFI11:
 2041              		.cfi_def_cfa_offset 8
 2042              		.cfi_offset 4, -8
 2043              		.cfi_offset 14, -4
 981:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 982:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp1;
 983:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 984:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED))
 2044              		.loc 1 984 0
 2045 0002 C36D     		ldr	r3, [r0, #92]
 2046 0004 1C78     		ldrb	r4, [r3]
 981:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 2047              		.loc 1 981 0
 2048 0006 0123     		mov	r3, #1
 2049              		.loc 1 984 0
 2050 0008 002C     		cmp	r4, #0
 2051 000a 1ED0     		beq	.L164
 985:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
 986:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(Recall != TRUE)
 2052              		.loc 1 986 0
 2053 000c 9A42     		cmp	r2, r3
 2054 000e 11D0     		beq	.L165
 987:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
 988:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(FloatingPS > (uint16_t)0xFU)
 989:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 990:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         Status = (uint32_t)PWMSP003_INVALID_PARAM_ERROR;
 2055              		.loc 1 990 0
 2056 0010 0223     		mov	r3, #2
 988:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       if(FloatingPS > (uint16_t)0xFU)
 2057              		.loc 1 988 0
 2058 0012 0F29     		cmp	r1, #15
 2059 0014 19D8     		bhi	.L164
 991:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
 992:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       else
 993:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       {
 994:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         HandlePtr->CC4yRegsPtr->FPCS = (FloatingPS & 0xFU);
 2060              		.loc 1 994 0
 2061 0016 C369     		ldr	r3, [r0, #28]
 995:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
 996:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         /* Request shadow transfer for the slice */
 997:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0PSE_Pos +\
 998:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                     (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 999:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1000:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=    ((uint32_t)0x01 << Temp1);
 2062              		.loc 1 1000 0
 2063 0018 8469     		ldr	r4, [r0, #24]
 994:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         HandlePtr->CC4yRegsPtr->FPCS = (FloatingPS & 0xFU);
 2064              		.loc 1 994 0
 2065 001a D962     		str	r1, [r3, #44]
 2066              	.LVL185:
 998:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                     (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 2067              		.loc 1 998 0
 2068 001c 5830     		add	r0, r0, #88
 2069              	.LVL186:
 2070 001e 0278     		ldrb	r2, [r0]
 2071              	.LVL187:
 2072              		.loc 1 1000 0
 2073 0020 0120     		mov	r0, #1
 2074              	.LVL188:
 998:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                     (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 2075              		.loc 1 998 0
 2076 0022 9300     		lsl	r3, r2, #2
 997:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0PSE_Pos +\
 2077              		.loc 1 997 0
 2078 0024 0233     		add	r3, r3, #2
 2079              		.loc 1 1000 0
 2080 0026 2169     		ldr	r1, [r4, #16]
 2081              	.LVL189:
 2082 0028 9840     		lsl	r0, r0, r3
 2083 002a 021C     		mov	r2, r0
 2084 002c 0A43     		orr	r2, r1
 2085 002e 2261     		str	r2, [r4, #16]
 2086              	.LVL190:
1001:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1002:../Dave/Generated/src/PWMSP003/PWMSP003.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2087              		.loc 1 1002 0
 2088 0030 0023     		mov	r3, #0
 2089 0032 0AE0     		b	.L164
 2090              	.LVL191:
 2091              	.L165:
1003:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       }
1004:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1005:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1006:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else
1007:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
1008:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       /* Cancel any pending shadow transfer for the slice */
1009:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = (uint32_t)CCU4_GCSC_S0PSC_Pos +\
1010:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                   (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
1011:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1012:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yKernRegsPtr->GCSC |=  ((uint32_t)0x01 << Temp1);
 2092              		.loc 1 1012 0
 2093 0034 8269     		ldr	r2, [r0, #24]
 2094              	.LVL192:
1010:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                   (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 2095              		.loc 1 1010 0
 2096 0036 5830     		add	r0, r0, #88
 2097              	.LVL193:
 2098 0038 0178     		ldrb	r1, [r0]
 2099              	.LVL194:
 2100              		.loc 1 1012 0
 2101 003a 181C     		mov	r0, r3
 2102              	.LVL195:
1010:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                   (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 2103              		.loc 1 1010 0
 2104 003c 8900     		lsl	r1, r1, #2
1009:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = (uint32_t)CCU4_GCSC_S0PSC_Pos +\
 2105              		.loc 1 1009 0
 2106 003e 0231     		add	r1, r1, #2
 2107              		.loc 1 1012 0
 2108 0040 5469     		ldr	r4, [r2, #20]
 2109 0042 8840     		lsl	r0, r0, r1
 2110 0044 011C     		mov	r1, r0
 2111 0046 2143     		orr	r1, r4
 2112 0048 5161     		str	r1, [r2, #20]
 2113              	.LVL196:
 2114              	.L164:
1013:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1014:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1015:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1016:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1017:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2115              		.loc 1 1017 0
 2116 004a 181C     		mov	r0, r3
 2117              		@ sp needed for prologue
 2118 004c 10BD     		pop	{r4, pc}
 2119              		.cfi_endproc
 2120              	.LFE58:
 2122              		.section	.text.PWMSP003_UpdateDither,"ax",%progbits
 2123              		.align	1
 2124              		.global	PWMSP003_UpdateDither
 2125              		.code	16
 2126              		.thumb_func
 2128              	PWMSP003_UpdateDither:
 2129              	.LFB59:
1018:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1019:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
1020:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function changes the dither register value.
1021:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
1022:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_UpdateDither(const PWMSP003_HandleType * HandlePtr,
1023:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                uint32_t DitherVal, uint8_t Recall)
1024:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2130              		.loc 1 1024 0
 2131              		.cfi_startproc
 2132              	.LVL197:
 2133 0000 30B5     		push	{r4, r5, lr}
 2134              	.LCFI12:
 2135              		.cfi_def_cfa_offset 12
 2136              		.cfi_offset 4, -12
 2137              		.cfi_offset 5, -8
 2138              		.cfi_offset 14, -4
 2139              		.loc 1 1024 0
 2140 0002 031C     		mov	r3, r0
1025:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
1026:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   uint32_t Temp1;
1027:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1028:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED))
 2141              		.loc 1 1028 0
 2142 0004 C06D     		ldr	r0, [r0, #92]
 2143              	.LVL198:
 2144 0006 0478     		ldrb	r4, [r0]
1025:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 2145              		.loc 1 1025 0
 2146 0008 0120     		mov	r0, #1
 2147              		.loc 1 1028 0
 2148 000a 002C     		cmp	r4, #0
 2149 000c 1AD0     		beq	.L170
 2150 000e 1D1C     		mov	r5, r3
 2151 0010 9C69     		ldr	r4, [r3, #24]
 2152 0012 5835     		add	r5, r5, #88
1029:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
1030:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(Recall != TRUE)
 2153              		.loc 1 1030 0
 2154 0014 8242     		cmp	r2, r0
 2155 0016 0CD0     		beq	.L171
1031:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
1032:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yRegsPtr->DITS = (DitherVal & 0xFU);
 2156              		.loc 1 1032 0
 2157 0018 DB69     		ldr	r3, [r3, #28]
 2158              	.LVL199:
 2159 001a 0F22     		mov	r2, #15
 2160              	.LVL200:
 2161 001c 1140     		and	r1, r2
 2162              	.LVL201:
 2163 001e 1962     		str	r1, [r3, #32]
 2164              	.LVL202:
1033:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1034:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       /*Request shadow transfer for the slice*/
1035:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = CCU4_GCSS_S0DSE_Pos +\
1036:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                   (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 2165              		.loc 1 1036 0
 2166 0020 2D78     		ldrb	r5, [r5]
 2167              	.LVL203:
1037:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1038:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=    ((uint32_t)0x01 << Temp1);
 2168              		.loc 1 1038 0
 2169 0022 2169     		ldr	r1, [r4, #16]
1036:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                   (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 2170              		.loc 1 1036 0
 2171 0024 AB00     		lsl	r3, r5, #2
1035:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = CCU4_GCSS_S0DSE_Pos +\
 2172              		.loc 1 1035 0
 2173 0026 1A18     		add	r2, r3, r0
 2174              		.loc 1 1038 0
 2175 0028 9040     		lsl	r0, r0, r2
 2176 002a 0843     		orr	r0, r1
 2177 002c 2061     		str	r0, [r4, #16]
 2178              	.LVL204:
1039:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1040:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2179              		.loc 1 1040 0
 2180 002e 0020     		mov	r0, #0
 2181 0030 08E0     		b	.L170
 2182              	.LVL205:
 2183              	.L171:
1041:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1042:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1043:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else
1044:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
1045:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       /* Cancel any pending shadow transfer for the slice */
1046:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = (uint32_t)CCU4_GCSC_S0DSC_Pos +\
1047:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 2184              		.loc 1 1047 0
 2185 0032 2978     		ldrb	r1, [r5]
 2186              	.LVL206:
1048:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1049:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       HandlePtr->CC4yKernRegsPtr->GCSC |=  ((uint32_t)0x01 << Temp1);
 2187              		.loc 1 1049 0
 2188 0034 051C     		mov	r5, r0
1047:../Dave/Generated/src/PWMSP003/PWMSP003.c ****               (PWMSP003_NO_OF_SLICES * (uint32_t)HandlePtr->Slice);
 2189              		.loc 1 1047 0
 2190 0036 8B00     		lsl	r3, r1, #2
 2191              	.LVL207:
1046:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Temp1 = (uint32_t)CCU4_GCSC_S0DSC_Pos +\
 2192              		.loc 1 1046 0
 2193 0038 0133     		add	r3, r3, #1
 2194              		.loc 1 1049 0
 2195 003a 6269     		ldr	r2, [r4, #20]
 2196              	.LVL208:
 2197 003c 9D40     		lsl	r5, r5, r3
 2198 003e 291C     		mov	r1, r5
 2199 0040 1143     		orr	r1, r2
 2200 0042 6161     		str	r1, [r4, #20]
 2201              	.LVL209:
 2202              	.L170:
1050:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1051:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1052:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1053:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1054:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2203              		.loc 1 1054 0
 2204              		@ sp needed for prologue
 2205 0044 30BD     		pop	{r4, r5, pc}
 2206              		.cfi_endproc
 2207              	.LFE59:
 2209              		.section	.text.PWMSP003_GetShadowTransferStatus,"ax",%progbits
 2210              		.align	1
 2211              		.global	PWMSP003_GetShadowTransferStatus
 2212              		.code	16
 2213              		.thumb_func
 2215              	PWMSP003_GetShadowTransferStatus:
 2216              	.LFB60:
1055:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1056:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
1057:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function reads the shadow transfer status of the given slice
1058:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
1059:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_GetShadowTransferStatus(const PWMSP003_HandleType * HandlePtr,
1060:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                           PWMSP003_ShadowTransferType Function,
1061:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                           uint8_t * State)
1062:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2217              		.loc 1 1062 0
 2218              		.cfi_startproc
 2219              	.LVL210:
 2220 0000 10B5     		push	{r4, lr}
 2221              	.LCFI13:
 2222              		.cfi_def_cfa_offset 8
 2223              		.cfi_offset 4, -8
 2224              		.cfi_offset 14, -4
 2225              		.loc 1 1062 0
 2226 0002 031C     		mov	r3, r0
1063:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
1064:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1065:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 2227              		.loc 1 1065 0
 2228 0004 C06D     		ldr	r0, [r0, #92]
 2229              	.LVL211:
 2230 0006 0478     		ldrb	r4, [r0]
 2231 0008 0120     		mov	r0, #1
 2232 000a 002C     		cmp	r4, #0
 2233 000c 06D0     		beq	.L175
1066:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
1067:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     *State = (uint8_t)RD_REG(HandlePtr->CC4yKernRegsPtr->GCST,\
 2234              		.loc 1 1067 0
 2235 000e 9B69     		ldr	r3, [r3, #24]
 2236              	.LVL212:
 2237 0010 8840     		lsl	r0, r0, r1
 2238 0012 9C69     		ldr	r4, [r3, #24]
 2239 0014 2040     		and	r0, r4
 2240 0016 C840     		lsr	r0, r0, r1
 2241 0018 1070     		strb	r0, [r2]
 2242              	.LVL213:
1068:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                            (uint32_t)(CCU4_GCST_S0SS_Msk << (uint32_t)Function),
1069:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                            (uint32_t)(CCU4_GCST_S0SS_Pos + (uint32_t)Function));
1070:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1071:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2243              		.loc 1 1071 0
 2244 001a 0020     		mov	r0, #0
 2245              	.LVL214:
 2246              	.L175:
1072:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1073:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1074:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1075:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2247              		.loc 1 1075 0
 2248              		@ sp needed for prologue
 2249 001c 10BD     		pop	{r4, pc}
 2250              		.cfi_endproc
 2251              	.LFE60:
 2253              		.section	.text.PWMSP003_GetCountingDirection,"ax",%progbits
 2254              		.align	1
 2255              		.global	PWMSP003_GetCountingDirection
 2256              		.code	16
 2257              		.thumb_func
 2259              	PWMSP003_GetCountingDirection:
 2260              	.LFB61:
1076:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1077:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
1078:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function reads the counting direction of the given slice
1079:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
1080:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_GetCountingDirection(const PWMSP003_HandleType * HandlePtr,
1081:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                        PWMSP003_CountDirectionType * CountDir)
1082:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2261              		.loc 1 1082 0
 2262              		.cfi_startproc
 2263              	.LVL215:
 2264              		.loc 1 1082 0
 2265 0000 031C     		mov	r3, r0
1083:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
1084:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1085:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED))
 2266              		.loc 1 1085 0
 2267 0002 C06D     		ldr	r0, [r0, #92]
 2268              	.LVL216:
 2269 0004 0278     		ldrb	r2, [r0]
1083:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 2270              		.loc 1 1083 0
 2271 0006 0120     		mov	r0, #1
 2272              		.loc 1 1085 0
 2273 0008 002A     		cmp	r2, #0
 2274 000a 05D0     		beq	.L179
1086:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
1087:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     *CountDir =
1088:../Dave/Generated/src/PWMSP003/PWMSP003.c ****              (PWMSP003_CountDirectionType)RD_REG(HandlePtr->CC4yRegsPtr->TCST,\
 2275              		.loc 1 1088 0
 2276 000c DB69     		ldr	r3, [r3, #28]
 2277              	.LVL217:
 2278 000e 9868     		ldr	r0, [r3, #8]
 2279 0010 8207     		lsl	r2, r0, #30
 2280 0012 D30F     		lsr	r3, r2, #31
 2281 0014 0B70     		strb	r3, [r1]
 2282              	.LVL218:
1089:../Dave/Generated/src/PWMSP003/PWMSP003.c ****              CCU4_CC4_TCST_CDIR_Msk,
1090:../Dave/Generated/src/PWMSP003/PWMSP003.c ****              CCU4_CC4_TCST_CDIR_Pos);
1091:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1092:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2283              		.loc 1 1092 0
 2284 0016 0020     		mov	r0, #0
 2285              	.LVL219:
 2286              	.L179:
1093:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1094:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1095:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1096:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2287              		.loc 1 1096 0
 2288              		@ sp needed for prologue
 2289 0018 7047     		bx	lr
 2290              		.cfi_endproc
 2291              	.LFE61:
 2293              		.section	.text.PWMSP003_RemapInput,"ax",%progbits
 2294              		.align	1
 2295              		.global	PWMSP003_RemapInput
 2296              		.code	16
 2297              		.thumb_func
 2299              	PWMSP003_RemapInput:
 2300              	.LFB62:
1097:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1098:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
1099:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function allows user to change the input mapping
1100:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * for the given event.
1101:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
1102:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_RemapInput(const PWMSP003_HandleType * HandlePtr,
1103:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                              PWMSP003_InputSelectionType Input,
1104:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                              PWMSP003_ExtEventType ExtEvent)
1105:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2301              		.loc 1 1105 0
 2302              		.cfi_startproc
 2303              	.LVL220:
 2304 0000 10B5     		push	{r4, lr}
 2305              	.LCFI14:
 2306              		.cfi_def_cfa_offset 8
 2307              		.cfi_offset 4, -8
 2308              		.cfi_offset 14, -4
1106:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
1107:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1108:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP003_RUNNING))
 2309              		.loc 1 1108 0
 2310 0002 C46D     		ldr	r4, [r0, #92]
 2311 0004 2378     		ldrb	r3, [r4]
 2312 0006 022B     		cmp	r3, #2
 2313 0008 0DD0     		beq	.L184
1109:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
1110:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->INS,\
 2314              		.loc 1 1110 0
 2315 000a 084C     		ldr	r4, .L185
 2316 000c C369     		ldr	r3, [r0, #28]
 2317 000e 1219     		add	r2, r2, r4
 2318              	.LVL221:
 2319 0010 9200     		lsl	r2, r2, #2
 2320 0012 1868     		ldr	r0, [r3]
 2321              	.LVL222:
 2322 0014 0F24     		mov	r4, #15
 2323 0016 9440     		lsl	r4, r4, r2
 2324 0018 9140     		lsl	r1, r1, r2
 2325              	.LVL223:
 2326 001a A043     		bic	r0, r4
 2327 001c 0C40     		and	r4, r1
 2328 001e 0443     		orr	r4, r0
 2329 0020 1C60     		str	r4, [r3]
 2330              	.LVL224:
1111:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           ((uint32_t)CCU4_CC4_INS_EV0IS_Msk <<\
1112:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           (uint32_t)(((uint32_t)ExtEvent - 1U) * PWMSP003_NO_OF_SLICES)),\
1113:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           ((uint32_t)CCU4_CC4_INS_EV0IS_Pos +\
1114:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           (uint32_t)(((uint32_t)ExtEvent - 1U) * PWMSP003_NO_OF_SLICES)),\
1115:../Dave/Generated/src/PWMSP003/PWMSP003.c ****           (uint32_t)Input);
1116:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1117:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2331              		.loc 1 1117 0
 2332 0022 0020     		mov	r0, #0
 2333 0024 00E0     		b	.L183
 2334              	.LVL225:
 2335              	.L184:
1106:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 2336              		.loc 1 1106 0
 2337 0026 0120     		mov	r0, #1
 2338              	.LVL226:
 2339              	.L183:
1118:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1119:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1120:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1121:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2340              		.loc 1 1121 0
 2341              		@ sp needed for prologue
 2342 0028 10BD     		pop	{r4, pc}
 2343              	.L186:
 2344 002a C046     		.align	2
 2345              	.L185:
 2346 002c FFFFFF3F 		.word	1073741823
 2347              		.cfi_endproc
 2348              	.LFE62:
 2350              		.section	.text.PWMSP003_RemapEvent,"ax",%progbits
 2351              		.align	1
 2352              		.global	PWMSP003_RemapEvent
 2353              		.code	16
 2354              		.thumb_func
 2356              	PWMSP003_RemapEvent:
 2357              	.LFB63:
1122:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1123:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
1124:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function allows user to change the functionality
1125:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * for the given external event.
1126:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
1127:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_RemapEvent(const PWMSP003_HandleType * HandlePtr,
1128:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                              PWMSP003_ExtEventType ExtEvent,
1129:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                              PWMSP003_ExtEventFunctionType Function)
1130:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2358              		.loc 1 1130 0
 2359              		.cfi_startproc
 2360              	.LVL227:
 2361 0000 10B5     		push	{r4, lr}
 2362              	.LCFI15:
 2363              		.cfi_def_cfa_offset 8
 2364              		.cfi_offset 4, -8
 2365              		.cfi_offset 14, -4
1131:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
1132:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1133:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_RUNNING)
 2366              		.loc 1 1133 0
 2367 0002 C46D     		ldr	r4, [r0, #92]
 2368 0004 2378     		ldrb	r3, [r4]
 2369 0006 022B     		cmp	r3, #2
 2370 0008 2DD0     		beq	.L193
1134:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
1135:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Trap can be configured only for event 2 */
1136:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if(((uint32_t)ExtEvent == PWMSP003_EVENT_2) &&
 2371              		.loc 1 1136 0
 2372 000a 0329     		cmp	r1, #3
 2373 000c 08D1     		bne	.L189
 2374              		.loc 1 1136 0 is_stmt 0 discriminator 1
 2375 000e 112A     		cmp	r2, #17
 2376 0010 09D1     		bne	.L190
1137:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                  ((uint32_t)Function == PWMSP003_EXTERNAL_TRAP))
1138:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
1139:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->CMC, (uint32_t)CCU4_CC4_CMC_TS_Msk,\
 2377              		.loc 1 1139 0 is_stmt 1
 2378 0012 C369     		ldr	r3, [r0, #28]
 2379 0014 8021     		mov	r1, #128
 2380              	.LVL228:
 2381 0016 5868     		ldr	r0, [r3, #4]
 2382              	.LVL229:
 2383 0018 8A02     		lsl	r2, r1, #10
 2384              	.LVL230:
 2385 001a 0243     		orr	r2, r0
 2386 001c 5A60     		str	r2, [r3, #4]
 2387              	.LVL231:
 2388 001e 20E0     		b	.L198
 2389              	.LVL232:
 2390              	.L189:
1140:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                               (uint32_t)CCU4_CC4_CMC_TS_Pos, PWMSP003_EVENT_2);
1141:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1142:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
1143:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1144:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else if(((uint32_t)ExtEvent!=PWMSP003_EVENT_2) &&
1145:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                    ((uint32_t)Function==PWMSP003_EXTERNAL_TRAP))
1146:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
1147:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = PWMSP003_INVALID_PARAM_ERROR;
 2391              		.loc 1 1147 0 discriminator 1
 2392 0020 0224     		mov	r4, #2
1144:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else if(((uint32_t)ExtEvent!=PWMSP003_EVENT_2) &&
 2393              		.loc 1 1144 0 discriminator 1
 2394 0022 112A     		cmp	r2, #17
 2395 0024 20D0     		beq	.L188
 2396              	.L190:
1148:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1149:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     /* Override can be configured only for event 1 and event 2 */
1150:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else if(((ExtEvent == PWMSP003_EVENT_1)
 2397              		.loc 1 1150 0
 2398 0026 8B1E     		sub	r3, r1, #2
 2399 0028 012B     		cmp	r3, #1
 2400 002a 0CD8     		bhi	.L191
1151:../Dave/Generated/src/PWMSP003/PWMSP003.c ****             || ((uint32_t)ExtEvent == PWMSP003_EVENT_2))
1152:../Dave/Generated/src/PWMSP003/PWMSP003.c ****             && ((uint32_t)Function == PWMSP003_EXTERNAL_OVERRIDE))
 2401              		.loc 1 1152 0
 2402 002c 102A     		cmp	r2, #16
 2403 002e 0FD1     		bne	.L192
1153:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
1154:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->CMC, (uint32_t)CCU4_CC4_CMC_OFS_Msk,\
 2404              		.loc 1 1154 0
 2405 0030 C369     		ldr	r3, [r0, #28]
 2406 0032 8024     		mov	r4, #128
 2407 0034 5868     		ldr	r0, [r3, #4]
 2408              	.LVL233:
 2409 0036 6202     		lsl	r2, r4, #9
 2410              	.LVL234:
 2411 0038 0C4C     		ldr	r4, .L199
 2412 003a 0904     		lsl	r1, r1, #16
 2413              	.LVL235:
 2414 003c 1140     		and	r1, r2
 2415 003e 2040     		and	r0, r4
 2416 0040 0143     		orr	r1, r0
 2417 0042 5960     		str	r1, [r3, #4]
 2418              	.LVL236:
 2419 0044 0DE0     		b	.L198
 2420              	.LVL237:
 2421              	.L191:
1155:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                             (uint32_t)CCU4_CC4_CMC_OFS_Pos, (uint32_t)ExtEvent);
1156:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1157:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
1158:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1159:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else if(((uint32_t)ExtEvent == PWMSP003_EVENT_0) &&\
 2422              		.loc 1 1159 0
 2423 0046 0129     		cmp	r1, #1
 2424 0048 02D1     		bne	.L192
1147:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = PWMSP003_INVALID_PARAM_ERROR;
 2425              		.loc 1 1147 0 discriminator 1
 2426 004a 0224     		mov	r4, #2
 2427              		.loc 1 1159 0 discriminator 1
 2428 004c 102A     		cmp	r2, #16
 2429 004e 0BD0     		beq	.L188
 2430              	.L192:
1160:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                ((uint32_t)Function == PWMSP003_EXTERNAL_OVERRIDE))
1161:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
1162:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = PWMSP003_INVALID_PARAM_ERROR;
1163:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1164:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     else
1165:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
1166:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       WR_REG(HandlePtr->CC4yRegsPtr->CMC,\
 2431              		.loc 1 1166 0
 2432 0050 C369     		ldr	r3, [r0, #28]
 2433 0052 0324     		mov	r4, #3
 2434 0054 5868     		ldr	r0, [r3, #4]
 2435              	.LVL238:
 2436 0056 9440     		lsl	r4, r4, r2
 2437 0058 9140     		lsl	r1, r1, r2
 2438              	.LVL239:
 2439 005a A043     		bic	r0, r4
 2440 005c 0C40     		and	r4, r1
 2441 005e 0443     		orr	r4, r0
 2442 0060 5C60     		str	r4, [r3, #4]
 2443              	.LVL240:
 2444              	.L198:
1167:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                 ((uint32_t)CCU4_CC4_CMC_STRTS_Msk << (uint32_t)Function),\
1168:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                 ((uint32_t)CCU4_CC4_CMC_STRTS_Pos  + (uint32_t)Function),\
1169:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                 (uint32_t)ExtEvent);
1170:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2445              		.loc 1 1170 0
 2446 0062 0024     		mov	r4, #0
 2447 0064 00E0     		b	.L188
 2448              	.LVL241:
 2449              	.L193:
1131:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 2450              		.loc 1 1131 0
 2451 0066 0124     		mov	r4, #1
 2452              	.LVL242:
 2453              	.L188:
1171:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1172:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1173:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1174:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1175:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2454              		.loc 1 1175 0
 2455 0068 201C     		mov	r0, r4
 2456              		@ sp needed for prologue
 2457              	.LVL243:
 2458 006a 10BD     		pop	{r4, pc}
 2459              	.L200:
 2460              		.align	2
 2461              	.L199:
 2462 006c FFFFFEFF 		.word	-65537
 2463              		.cfi_endproc
 2464              	.LFE63:
 2466              		.section	.text.PWMSP003_ClearTrapFlag,"ax",%progbits
 2467              		.align	1
 2468              		.global	PWMSP003_ClearTrapFlag
 2469              		.code	16
 2470              		.thumb_func
 2472              	PWMSP003_ClearTrapFlag:
 2473              	.LFB64:
1176:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1177:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
1178:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function resets the trap flag if trap condition is inactive
1179:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
1180:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_ClearTrapFlag(const PWMSP003_HandleType * HandlePtr)
1181:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2474              		.loc 1 1181 0
 2475              		.cfi_startproc
 2476              	.LVL244:
1182:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
1183:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1184:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED))
 2477              		.loc 1 1184 0
 2478 0000 C16D     		ldr	r1, [r0, #92]
1181:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2479              		.loc 1 1181 0
 2480 0002 031C     		mov	r3, r0
 2481              		.loc 1 1184 0
 2482 0004 0A78     		ldrb	r2, [r1]
1182:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
 2483              		.loc 1 1182 0
 2484 0006 0120     		mov	r0, #1
 2485              	.LVL245:
 2486              		.loc 1 1184 0
 2487 0008 002A     		cmp	r2, #0
 2488 000a 11D0     		beq	.L202
1185:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
1186:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 2489              		.loc 1 1186 0
 2490 000c 197D     		ldrb	r1, [r3, #20]
 2491 000e DB69     		ldr	r3, [r3, #28]
 2492              	.LVL246:
 2493 0010 8142     		cmp	r1, r0
 2494 0012 06D1     		bne	.L203
1187:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     {
1188:../Dave/Generated/src/PWMSP003/PWMSP003.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP003_EXTERNALEVENT_2_INTERRUPT);
 2495              		.loc 1 1188 0
 2496 0014 1A1C     		mov	r2, r3
 2497 0016 B032     		add	r2, r2, #176
 2498 0018 1068     		ldr	r0, [r2]
 2499 001a 8021     		mov	r1, #128
 2500 001c C900     		lsl	r1, r1, #3
 2501 001e 0143     		orr	r1, r0
 2502 0020 1160     		str	r1, [r2]
 2503              	.L203:
1189:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     }
1190:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP003_EXTERNALTRAP_INTERRUPT);
 2504              		.loc 1 1190 0
 2505 0022 B033     		add	r3, r3, #176
 2506 0024 1868     		ldr	r0, [r3]
 2507 0026 8022     		mov	r2, #128
 2508 0028 1101     		lsl	r1, r2, #4
 2509 002a 0143     		orr	r1, r0
 2510 002c 1960     		str	r1, [r3]
 2511              	.LVL247:
1191:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1192:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2512              		.loc 1 1192 0
 2513 002e 0020     		mov	r0, #0
 2514              	.LVL248:
 2515              	.L202:
1193:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1194:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1195:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2516              		.loc 1 1195 0
 2517              		@ sp needed for prologue
 2518 0030 7047     		bx	lr
 2519              		.cfi_endproc
 2520              	.LFE64:
 2522              		.section	.text.PWMSP003_GetInterruptStatus,"ax",%progbits
 2523              		.align	1
 2524              		.global	PWMSP003_GetInterruptStatus
 2525              		.code	16
 2526              		.thumb_func
 2528              	PWMSP003_GetInterruptStatus:
 2529              	.LFB65:
1196:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1197:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
1198:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  *  This function reads the requested event status for the given slice
1199:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
1200:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_GetInterruptStatus(const PWMSP003_HandleType * HandlePtr,
1201:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                      PWMSP003_InterruptType Event,
1202:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                      uint8_t * InterruptStatus)
1203:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2530              		.loc 1 1203 0
 2531              		.cfi_startproc
 2532              	.LVL249:
 2533 0000 10B5     		push	{r4, lr}
 2534              	.LCFI16:
 2535              		.cfi_def_cfa_offset 8
 2536              		.cfi_offset 4, -8
 2537              		.cfi_offset 14, -4
 2538              		.loc 1 1203 0
 2539 0002 031C     		mov	r3, r0
1204:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
1205:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1206:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 2540              		.loc 1 1206 0
 2541 0004 C06D     		ldr	r0, [r0, #92]
 2542              	.LVL250:
 2543 0006 0478     		ldrb	r4, [r0]
 2544 0008 0120     		mov	r0, #1
 2545 000a 002C     		cmp	r4, #0
 2546 000c 07D0     		beq	.L207
1207:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
1208:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     *InterruptStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->INTS,\
 2547              		.loc 1 1208 0
 2548 000e DB69     		ldr	r3, [r3, #28]
 2549              	.LVL251:
 2550 0010 8840     		lsl	r0, r0, r1
 2551 0012 A033     		add	r3, r3, #160
 2552 0014 1C68     		ldr	r4, [r3]
 2553 0016 2040     		and	r0, r4
 2554 0018 C840     		lsr	r0, r0, r1
 2555 001a 1070     		strb	r0, [r2]
 2556              	.LVL252:
1209:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                           (CCU4_CC4_INTS_PMUS_Msk << (uint32_t)Event),\
1210:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                           (CCU4_CC4_INTS_PMUS_Pos + (uint32_t)Event));
1211:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1212:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2557              		.loc 1 1212 0
 2558 001c 0020     		mov	r0, #0
 2559              	.LVL253:
 2560              	.L207:
1213:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1214:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1215:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1216:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2561              		.loc 1 1216 0
 2562              		@ sp needed for prologue
 2563 001e 10BD     		pop	{r4, pc}
 2564              		.cfi_endproc
 2565              	.LFE65:
 2567              		.section	.text.PWMSP003_TriggerInterrupt,"ax",%progbits
 2568              		.align	1
 2569              		.global	PWMSP003_TriggerInterrupt
 2570              		.code	16
 2571              		.thumb_func
 2573              	PWMSP003_TriggerInterrupt:
 2574              	.LFB66:
1217:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1218:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
1219:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function triggers the requested event for the given slice
1220:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
1221:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_TriggerInterrupt(const PWMSP003_HandleType * HandlePtr,
1222:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                    PWMSP003_InterruptType Event)
1223:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2575              		.loc 1 1223 0
 2576              		.cfi_startproc
 2577              	.LVL254:
1224:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
1225:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1226:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 2578              		.loc 1 1226 0
 2579 0000 C36D     		ldr	r3, [r0, #92]
 2580 0002 1A78     		ldrb	r2, [r3]
 2581 0004 0123     		mov	r3, #1
 2582 0006 002A     		cmp	r2, #0
 2583 0008 08D0     		beq	.L211
1227:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
1228:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->SWS,\
 2584              		.loc 1 1228 0
 2585 000a C269     		ldr	r2, [r0, #28]
 2586 000c 8B40     		lsl	r3, r3, r1
 2587 000e AC32     		add	r2, r2, #172
 2588 0010 1068     		ldr	r0, [r2]
 2589              	.LVL255:
 2590 0012 011C     		mov	r1, r0
 2591              	.LVL256:
 2592 0014 9943     		bic	r1, r3
 2593 0016 0B43     		orr	r3, r1
 2594 0018 1360     		str	r3, [r2]
 2595              	.LVL257:
1229:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                        (CCU4_CC4_SWS_SPM_Msk << (uint32_t)Event),\
1230:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                        (CCU4_CC4_SWS_SPM_Pos + (uint32_t)Event),\
1231:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                        (uint32_t)0x1U);
1232:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1233:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2596              		.loc 1 1233 0
 2597 001a 0023     		mov	r3, #0
 2598              	.LVL258:
 2599              	.L211:
1234:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1235:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1236:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1237:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2600              		.loc 1 1237 0
 2601 001c 181C     		mov	r0, r3
 2602              		@ sp needed for prologue
 2603 001e 7047     		bx	lr
 2604              		.cfi_endproc
 2605              	.LFE66:
 2607              		.section	.text.PWMSP003_AcknowledgeInterrupt,"ax",%progbits
 2608              		.align	1
 2609              		.global	PWMSP003_AcknowledgeInterrupt
 2610              		.code	16
 2611              		.thumb_func
 2613              	PWMSP003_AcknowledgeInterrupt:
 2614              	.LFB67:
1238:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1239:../Dave/Generated/src/PWMSP003/PWMSP003.c **** /**
1240:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  * This function clear the requested event flag for the given slice
1241:../Dave/Generated/src/PWMSP003/PWMSP003.c ****  */
1242:../Dave/Generated/src/PWMSP003/PWMSP003.c **** status_t PWMSP003_AcknowledgeInterrupt(const PWMSP003_HandleType * HandlePtr,
1243:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                                        PWMSP003_InterruptType Event)
1244:../Dave/Generated/src/PWMSP003/PWMSP003.c **** {
 2615              		.loc 1 1244 0
 2616              		.cfi_startproc
 2617              	.LVL259:
1245:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   status_t Status = (uint32_t)PWMSP003_OPER_NOT_ALLOWED_ERROR;
1246:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1247:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   if (HandlePtr->DynamicDataType->StateType != PWMSP003_UNINITIALIZED)
 2618              		.loc 1 1247 0
 2619 0000 C36D     		ldr	r3, [r0, #92]
 2620 0002 1A78     		ldrb	r2, [r3]
 2621 0004 0123     		mov	r3, #1
 2622 0006 002A     		cmp	r2, #0
 2623 0008 08D0     		beq	.L215
1248:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   {
1249:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     WR_REG(HandlePtr->CC4yRegsPtr->SWR,\
 2624              		.loc 1 1249 0
 2625 000a C269     		ldr	r2, [r0, #28]
 2626 000c 8B40     		lsl	r3, r3, r1
 2627 000e B032     		add	r2, r2, #176
 2628 0010 1068     		ldr	r0, [r2]
 2629              	.LVL260:
 2630 0012 011C     		mov	r1, r0
 2631              	.LVL261:
 2632 0014 9943     		bic	r1, r3
 2633 0016 0B43     		orr	r3, r1
 2634 0018 1360     		str	r3, [r2]
 2635              	.LVL262:
1250:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                        (CCU4_CC4_SWR_RPM_Msk << (uint32_t)Event),\
1251:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                        (CCU4_CC4_SWR_RPM_Pos + (uint32_t)Event),\
1252:../Dave/Generated/src/PWMSP003/PWMSP003.c ****                        (uint32_t)0x1U);
1253:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1254:../Dave/Generated/src/PWMSP003/PWMSP003.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2636              		.loc 1 1254 0
 2637 001a 0023     		mov	r3, #0
 2638              	.LVL263:
 2639              	.L215:
1255:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   }
1256:../Dave/Generated/src/PWMSP003/PWMSP003.c **** 
1257:../Dave/Generated/src/PWMSP003/PWMSP003.c ****   return Status;
1258:../Dave/Generated/src/PWMSP003/PWMSP003.c **** }
 2640              		.loc 1 1258 0
 2641 001c 181C     		mov	r0, r3
 2642              		@ sp needed for prologue
 2643 001e 7047     		bx	lr
 2644              		.cfi_endproc
 2645              	.LFE67:
 2647              		.text
 2648              	.Letext0:
 2649              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2650              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1200_series/Include/XMC1200.h"
 2651              		.file 4 "../Dave/Generated/src/PWMSP003/../../inc/PWMSP003/../../inc/LIBS/types.h"
 2652              		.file 5 "../Dave/Generated/src/PWMSP003/../../inc/PWMSP003/PWMSP003.h"
 2653              		.file 6 "../Dave/Generated/src/PWMSP003/../../inc/PWMSP003/PWMSP003_Extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP003.c
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:18     .text.PWMSP003_lSetCompareEdgeAlign:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:23     .text.PWMSP003_lSetCompareEdgeAlign:00000000 PWMSP003_lSetCompareEdgeAlign
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:61     .text.PWMSP003_lSetCompareCenterAlign:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:66     .text.PWMSP003_lSetCompareCenterAlign:00000000 PWMSP003_lSetCompareCenterAlign
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:108    .text.PWMSP003_lSetDutyEdgeAlign:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:113    .text.PWMSP003_lSetDutyEdgeAlign:00000000 PWMSP003_lSetDutyEdgeAlign
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:191    .text.PWMSP003_lSetDutyEdgeAlign:00000048 $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:196    .text.PWMSP003_lSetDutyCenterAlign:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:201    .text.PWMSP003_lSetDutyCenterAlign:00000000 PWMSP003_lSetDutyCenterAlign
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:277    .text.PWMSP003_lSetDutyCenterAlign:00000044 $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:282    .text.PWMSP003_lInit:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:287    .text.PWMSP003_lInit:00000000 PWMSP003_lInit
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:766    .text.PWMSP003_lInit:0000025c $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:779    .text.PWMSP003_lInit:00000284 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1095   .text.PWMSP003_lInit:00000444 $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1107   .text.PWMSP003_Start:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1112   .text.PWMSP003_Start:00000000 PWMSP003_Start
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1215   .text.PWMSP003_Start:00000074 $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1221   .text.PWMSP003_Init:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1226   .text.PWMSP003_Init:00000000 PWMSP003_Init
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1271   .text.PWMSP003_Init:00000028 $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1276   .text.PWMSP003_Deinit:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1281   .text.PWMSP003_Deinit:00000000 PWMSP003_Deinit
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1369   .text.PWMSP003_Deinit:00000054 $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1374   .text.PWMSP003_Stop:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1379   .text.PWMSP003_Stop:00000000 PWMSP003_Stop
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1445   .text.PWMSP003_GetSliceIdleStatus:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1450   .text.PWMSP003_GetSliceIdleStatus:00000000 PWMSP003_GetSliceIdleStatus
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1489   .text.PWMSP003_SetSliceIdleState:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1494   .text.PWMSP003_SetSliceIdleState:00000000 PWMSP003_SetSliceIdleState
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1532   .text.PWMSP003_RemoveSliceIdleState:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1537   .text.PWMSP003_RemoveSliceIdleState:00000000 PWMSP003_RemoveSliceIdleState
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1575   .text.PWMSP003_StartTimer:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1580   .text.PWMSP003_StartTimer:00000000 PWMSP003_StartTimer
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1610   .text.PWMSP003_StopTimer:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1615   .text.PWMSP003_StopTimer:00000000 PWMSP003_StopTimer
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1645   .text.PWMSP003_GetTimerValue:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1650   .text.PWMSP003_GetTimerValue:00000000 PWMSP003_GetTimerValue
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1692   .text.PWMSP003_GetTimerStatus:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1697   .text.PWMSP003_GetTimerStatus:00000000 PWMSP003_GetTimerStatus
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1727   .text.PWMSP003_GetCompareMatchStatus:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1732   .text.PWMSP003_GetCompareMatchStatus:00000000 PWMSP003_GetCompareMatchStatus
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1774   .text.PWMSP003_UpdatePeriod:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1779   .text.PWMSP003_UpdatePeriod:00000000 PWMSP003_UpdatePeriod
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1871   .text.PWMSP003_UpdateCompare:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1876   .text.PWMSP003_UpdateCompare:00000000 PWMSP003_UpdateCompare
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1955   .text.PWMSP003_SetDutyCycle:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:1960   .text.PWMSP003_SetDutyCycle:00000000 PWMSP003_SetDutyCycle
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2024   .text.PWMSP003_SetDutyCycle:00000038 $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2029   .text.PWMSP003_UpdateFloatingPrescaler:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2034   .text.PWMSP003_UpdateFloatingPrescaler:00000000 PWMSP003_UpdateFloatingPrescaler
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2123   .text.PWMSP003_UpdateDither:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2128   .text.PWMSP003_UpdateDither:00000000 PWMSP003_UpdateDither
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2210   .text.PWMSP003_GetShadowTransferStatus:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2215   .text.PWMSP003_GetShadowTransferStatus:00000000 PWMSP003_GetShadowTransferStatus
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2254   .text.PWMSP003_GetCountingDirection:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2259   .text.PWMSP003_GetCountingDirection:00000000 PWMSP003_GetCountingDirection
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2294   .text.PWMSP003_RemapInput:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2299   .text.PWMSP003_RemapInput:00000000 PWMSP003_RemapInput
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2346   .text.PWMSP003_RemapInput:0000002c $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2351   .text.PWMSP003_RemapEvent:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2356   .text.PWMSP003_RemapEvent:00000000 PWMSP003_RemapEvent
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2462   .text.PWMSP003_RemapEvent:0000006c $d
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2467   .text.PWMSP003_ClearTrapFlag:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2472   .text.PWMSP003_ClearTrapFlag:00000000 PWMSP003_ClearTrapFlag
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2523   .text.PWMSP003_GetInterruptStatus:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2528   .text.PWMSP003_GetInterruptStatus:00000000 PWMSP003_GetInterruptStatus
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2568   .text.PWMSP003_TriggerInterrupt:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2573   .text.PWMSP003_TriggerInterrupt:00000000 PWMSP003_TriggerInterrupt
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2608   .text.PWMSP003_AcknowledgeInterrupt:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccMPmR1z.s:2613   .text.PWMSP003_AcknowledgeInterrupt:00000000 PWMSP003_AcknowledgeInterrupt
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e09b9dd5224853206c418479f14d6963
                           .group:00000000 wm4.uc_id.h.35.62dcba5f6261c1436e3866a751c1a98b
                           .group:00000000 wm4.XMC1200.h.45.4c899b4822ac22c0f00d6fd7f173cc96
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1200.h.122.96b58b1204def4c9f76341a4e21abaf6
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.BCCUDIM01_Conf.h.46.1e3ffd6581cbd401bcc28a6ce60f19f0
                           .group:00000000 wm4.BCCUCH01_Conf.h.48.2ce679450068d1645a9e0c3a7937e697
                           .group:00000000 wm4.IO002_Conf.h.51.9fc2eb43e77e0a2c02912a3744f3ec9d
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.NVIC002_Conf.h.62.64042456dc7f2eb96fc713abacb4c5d4
                           .group:00000000 wm4.DMX512RD01_Conf.h.49.036b57ce74a404ea8f8ade310b364436
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.Usic.h.40.f6a4fed014760114cf5039d398d6dd2c
                           .group:00000000 wm4.I2C003_Conf.h.50.5fb7c255d386301836868ba2fd78b91f
                           .group:00000000 wm4.FLASH003.h.76.20bf3d34b222314a45adfdfb414ab1b6
                           .group:00000000 wm4.FLASH003_Conf.h.72.6d366060eda228c6c8843c467361c30c
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP003_Conf.h.49.a3ea83c25b3af429e78acb0f2dc45bd4
                           .group:00000000 wm4.PWMSP003.h.103.903071678b9af5683776405c5b299fbb

UNDEFINED SYMBOLS
__aeabi_ui2f
__aeabi_fsub
__aeabi_fdiv
__aeabi_fmul
__aeabi_f2uiz
PWMSP003_HandleArr
__aeabi_fcmpgt
__aeabi_fcmplt
