   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"FLASH003.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLASH003_Init,"ax",%progbits
  18              		.align	1
  19              		.global	FLASH003_Init
  20              		.code	16
  21              		.thumb_func
  23              	FLASH003_Init:
  24              	.LFB38:
  25              		.file 1 "../Dave/Generated/src/FLASH003/FLASH003.c"
   1:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
   2:../Dave/Generated/src/FLASH003/FLASH003.c **** **  DAVE App Name : FLASH003       App Version: 1.0.10               
   3:../Dave/Generated/src/FLASH003/FLASH003.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/FLASH003/FLASH003.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
   6:../Dave/Generated/src/FLASH003/FLASH003.c **** 
   7:../Dave/Generated/src/FLASH003/FLASH003.c **** /*CODE_BLOCK_BEGIN[FLASH003.c]*/
   8:../Dave/Generated/src/FLASH003/FLASH003.c **** 
   9:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
  10:../Dave/Generated/src/FLASH003/FLASH003.c **** Copyright (c) 2014, Infineon Technologies AG                                  **
  11:../Dave/Generated/src/FLASH003/FLASH003.c **** All rights reserved.                                                          **
  12:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                                               **
  13:../Dave/Generated/src/FLASH003/FLASH003.c **** Redistribution and use in source and binary forms, with or without            **
  14:../Dave/Generated/src/FLASH003/FLASH003.c **** modification,are permitted provided that the following conditions are met:    **
  15:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                                               **
  16:../Dave/Generated/src/FLASH003/FLASH003.c **** *Redistributions of source code must retain the above copyright notice,       **
  17:../Dave/Generated/src/FLASH003/FLASH003.c **** this list of conditions and the following disclaimer.                         **
  18:../Dave/Generated/src/FLASH003/FLASH003.c **** *Redistributions in binary form must reproduce the above copyright notice,    **
  19:../Dave/Generated/src/FLASH003/FLASH003.c **** this list of conditions and the following disclaimer in the documentation     **
  20:../Dave/Generated/src/FLASH003/FLASH003.c **** and/or other materials provided with the distribution.                        **
  21:../Dave/Generated/src/FLASH003/FLASH003.c **** *Neither the name of the copyright holders nor the names of its contributors  **
  22:../Dave/Generated/src/FLASH003/FLASH003.c **** may be used to endorse or promote products derived from this software without ** 
  23:../Dave/Generated/src/FLASH003/FLASH003.c **** specific prior written permission.                                            **
  24:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                                               **
  25:../Dave/Generated/src/FLASH003/FLASH003.c **** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   **
  26:../Dave/Generated/src/FLASH003/FLASH003.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE     **
  27:../Dave/Generated/src/FLASH003/FLASH003.c **** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE    **
  28:../Dave/Generated/src/FLASH003/FLASH003.c **** ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    **
  29:../Dave/Generated/src/FLASH003/FLASH003.c **** LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          **
  30:../Dave/Generated/src/FLASH003/FLASH003.c **** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF          **
  31:../Dave/Generated/src/FLASH003/FLASH003.c **** SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     **
  32:../Dave/Generated/src/FLASH003/FLASH003.c **** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN       **
  33:../Dave/Generated/src/FLASH003/FLASH003.c **** CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)        **
  34:../Dave/Generated/src/FLASH003/FLASH003.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE    **
  35:../Dave/Generated/src/FLASH003/FLASH003.c **** POSSIBILITY OF SUCH DAMAGE.                                                   **
  36:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                                               **
  37:../Dave/Generated/src/FLASH003/FLASH003.c **** To improve the quality of the software, users are encouraged to share         **
  38:../Dave/Generated/src/FLASH003/FLASH003.c **** modifications, enhancements or bug fixes with Infineon Technologies AG        **
  39:../Dave/Generated/src/FLASH003/FLASH003.c **** dave@infineon.com).                                                           **
  40:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                                               **
  41:../Dave/Generated/src/FLASH003/FLASH003.c **** ********************************************************************************
  42:../Dave/Generated/src/FLASH003/FLASH003.c **** **                                                                            **
  43:../Dave/Generated/src/FLASH003/FLASH003.c **** **                                                                            **
  44:../Dave/Generated/src/FLASH003/FLASH003.c **** ** PLATFORM : Infineon XMC1000 Series                                         **
  45:../Dave/Generated/src/FLASH003/FLASH003.c **** **                                                                            **
  46:../Dave/Generated/src/FLASH003/FLASH003.c **** ** COMPILER : GCC                                                             **
  47:../Dave/Generated/src/FLASH003/FLASH003.c **** **                                                                            **
  48:../Dave/Generated/src/FLASH003/FLASH003.c **** ** AUTHOR   : App Developer                                                   **
  49:../Dave/Generated/src/FLASH003/FLASH003.c **** **                                                                            **
  50:../Dave/Generated/src/FLASH003/FLASH003.c **** ** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **
  51:../Dave/Generated/src/FLASH003/FLASH003.c **** **                                                                            **
  52:../Dave/Generated/src/FLASH003/FLASH003.c **** ** MODIFICATION DATE : Jan 06, 2014                                           **
  53:../Dave/Generated/src/FLASH003/FLASH003.c **** **                                                                            **
  54:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
  55:../Dave/Generated/src/FLASH003/FLASH003.c **** /* Revision History
  56:../Dave/Generated/src/FLASH003/FLASH003.c ****  *****************************************************************************
  57:../Dave/Generated/src/FLASH003/FLASH003.c ****  * Date          Version   Remarks
  58:../Dave/Generated/src/FLASH003/FLASH003.c ****  * 28 June 2013  1.0.0     Initial Version
  59:../Dave/Generated/src/FLASH003/FLASH003.c ****  * 28 Aug  2013  1.0.4     1.FLASH003_RegisterCallbackEvent,
  60:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           FLASH003_lEccInterrupt,
  61:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           FLASH003_lSeqInterrupt are added 
  62:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                         2.Each api is edited to support Asynchronous mode
  63:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           of Operation with interrupts.
  64:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                         3.FLASH003_Read APIs are changed to read the data
  65:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           with ECC errors also.
  66:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                         4.Changed the naming convention of the ROM apis and
  67:../Dave/Generated/src/FLASH003/FLASH003.c ****  * 							 return status.
  68:../Dave/Generated/src/FLASH003/FLASH003.c ****  * 30 Oct  2013   1.0.6    1.In FLASH003_WriteMultipleBlocks(),
  69:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           FLASH003_WriteBlock() APIs corrected the macros to 
  70:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           read the Verification status from NVM_STATUS
  71:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           Register.
  72:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                         2.In FLASH003_Read APIs during checking for ECC 
  73:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           errors changed the condition check to return 
  74:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           Flash_error if any one is set.
  75:../Dave/Generated/src/FLASH003/FLASH003.c ****  * 27 Jan  2014   1.0.8    1.Defect fix 36939 :Whenever interrupts are enabled,
  76:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           the FLASH003_global_status is cleared if  wrong 
  77:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           parameter is passed as input to the APIs. 
  78:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                         2.FLASH003_Init() changed to support auto 
  79:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           registration of the events configured in UI.
  80:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                         3.FLASH003_RegisterCallbackEvent() api is changed to 
  81:../Dave/Generated/src/FLASH003/FLASH003.c ****  *                           support registration of 5 callbacks to each event.
  82:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
  83:../Dave/Generated/src/FLASH003/FLASH003.c **** 
  84:../Dave/Generated/src/FLASH003/FLASH003.c **** /**
  85:../Dave/Generated/src/FLASH003/FLASH003.c ****  * @file FLASH003.c
  86:../Dave/Generated/src/FLASH003/FLASH003.c ****  *
  87:../Dave/Generated/src/FLASH003/FLASH003.c ****  * App Version FLASH003 <1.0.10>
  88:../Dave/Generated/src/FLASH003/FLASH003.c ****  *
  89:../Dave/Generated/src/FLASH003/FLASH003.c ****  * @brief  Flash App implementation.
  90:../Dave/Generated/src/FLASH003/FLASH003.c ****  *
  91:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
  92:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
  93:../Dave/Generated/src/FLASH003/FLASH003.c ****  ** INCLUDE FILES                                                             **
  94:../Dave/Generated/src/FLASH003/FLASH003.c ****  ******************************************************************************/
  95:../Dave/Generated/src/FLASH003/FLASH003.c **** #include <DAVE3.h>
  96:../Dave/Generated/src/FLASH003/FLASH003.c **** #include "../../inc/FLASH003/FLASH003_Conf.h"
  97:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
  98:../Dave/Generated/src/FLASH003/FLASH003.c **** **                      Private Macro Definitions                             **
  99:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
 100:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Macro to check the Block alignment of the input Address*/
 101:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_BLOCK_ALIGN_CHECK          0xFU
 102:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Command for ONESHOT_WRITE_AUTOVERIFY*/
 103:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_ONESHOT_WRITE_AUTOVERIFY   0x51U
 104:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Reset State*/
 105:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_RESET                      0x0000U
 106:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Macro to check ECC and Verification error*/
 107:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_ECCVERRRST_IDLESET         0x3000U
 108:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Delay of 10us for each block write*/
 109:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_DELAY                      0x2AAU
 110:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Macro to check for NULL Event Handler*/
 111:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_NULL_HANDLER               0x0U
 112:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Macro to check for Max. Call back Events*/
 113:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_MAX_CALLBACK               0x2U
 114:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Macro to check the interrupt status*/
 115:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_INTR_ENABLED               0x1U
 116:../Dave/Generated/src/FLASH003/FLASH003.c **** /* ROM function Table */
 117:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Start address of the ROM function table*/
 118:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_ROM_FUNCTION_TABLE_START   (0x00000100U)   
 119:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Pointer to Erase Flash Page routine*/
 120:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_NvmErase            (FLASH003_ROM_FUNCTION_TABLE_START + 0x00U) 
 121:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Pointer to Erase, Program & Verify Flash Page routine*/
 122:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_NvmProgVerify       (FLASH003_ROM_FUNCTION_TABLE_START + 0x04U) 
 123:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Macro for Erase Flash Page routine*/
 124:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_NvmErasePage \
 125:../Dave/Generated/src/FLASH003/FLASH003.c ****         (*((FLASH003_NVM_STATUS (**) (uint32_t * src_add)) FLASH003_NvmErase))
 126:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Macro for ProgVerifyPage Flash Page routine*/
 127:../Dave/Generated/src/FLASH003/FLASH003.c **** #define FLASH003_NvmProgVerifyPage \
 128:../Dave/Generated/src/FLASH003/FLASH003.c ****         (*((FLASH003_NVM_STATUS (**) (uint32_t * src_add, uint32_t * dst_add))\
 129:../Dave/Generated/src/FLASH003/FLASH003.c ****         FLASH003_NvmProgVerify))
 130:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
 131:../Dave/Generated/src/FLASH003/FLASH003.c **** **                      Private Type Definitions                              **
 132:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
 133:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 134:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
 135:../Dave/Generated/src/FLASH003/FLASH003.c **** **                 Private Function Declarations                              **
 136:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
 137:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Local function to write the Block of Data*/
 138:../Dave/Generated/src/FLASH003/FLASH003.c **** void FLASH003_lWriteBlock (uint32_t Address, const uint32_t pBuf[]);
 139:../Dave/Generated/src/FLASH003/FLASH003.c **** #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 140:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Local Handler for End of Sequence event to register with NVIC_SR001 App*/
 141:../Dave/Generated/src/FLASH003/FLASH003.c **** void FLASH003_lSeqInterrupt(uint32_t cbargs);
 142:../Dave/Generated/src/FLASH003/FLASH003.c **** #endif
 143:../Dave/Generated/src/FLASH003/FLASH003.c **** #if (FLASH003_ECC_INTERRUPT == FLASH003_INTR_ENABLED)
 144:../Dave/Generated/src/FLASH003/FLASH003.c **** /*Local Handler for ECC event to register with NVIC_SR001 App*/
 145:../Dave/Generated/src/FLASH003/FLASH003.c **** void FLASH003_lEccInterrupt(uint32_t cbargs);
 146:../Dave/Generated/src/FLASH003/FLASH003.c **** #endif
 147:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
 148:../Dave/Generated/src/FLASH003/FLASH003.c **** **                      Extern Declaration                                    **
 149:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
 150:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 151:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
 152:../Dave/Generated/src/FLASH003/FLASH003.c **** **                      Global Constant Definitions                           **
 153:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
 154:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 155:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
 156:../Dave/Generated/src/FLASH003/FLASH003.c **** **                      Global Variable Definitions                           **
 157:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
 158:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 159:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
 160:../Dave/Generated/src/FLASH003/FLASH003.c **** **                      Private Constant Definitions                          **
 161:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
 162:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 163:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
 164:../Dave/Generated/src/FLASH003/FLASH003.c **** **                      Private Function Definitions                          **
 165:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
 166:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 167:../Dave/Generated/src/FLASH003/FLASH003.c **** /*******************************************************************************
 168:../Dave/Generated/src/FLASH003/FLASH003.c **** **                      Public Function Definitions                           **
 169:../Dave/Generated/src/FLASH003/FLASH003.c **** *******************************************************************************/
 170:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 171:../Dave/Generated/src/FLASH003/FLASH003.c **** void FLASH003_Init()
 172:../Dave/Generated/src/FLASH003/FLASH003.c **** {
  26              		.loc 1 172 0
  27              		.cfi_startproc
  28              	.LVL0:
 173:../Dave/Generated/src/FLASH003/FLASH003.c **** 	const FLASH003_HandleType* Handle;
 174:../Dave/Generated/src/FLASH003/FLASH003.c **** 	Handle = &FLASH003_Handle0;
 175:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*Enabling flash Idle State*/
 176:../Dave/Generated/src/FLASH003/FLASH003.c **** 	Handle->FlashRegsPtr->NVMPROG = FLASH003_ECCVERRRST_IDLESET;
  29              		.loc 1 176 0
  30 0000 074B     		ldr	r3, .L2
  31 0002 C022     		mov	r2, #192
  32 0004 D868     		ldr	r0, [r3, #12]
  33 0006 9101     		lsl	r1, r2, #6
  34 0008 8180     		strh	r1, [r0, #4]
 177:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*reset ECC2READ,ECC1READ in NVMSTATUS*/
 178:../Dave/Generated/src/FLASH003/FLASH003.c ****     SET_BIT(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_RSTECC_Pos);
  35              		.loc 1 178 0
  36 000a 8388     		ldrh	r3, [r0, #4]
  37 000c 8022     		mov	r2, #128
  38 000e 9101     		lsl	r1, r2, #6
  39 0010 1943     		orr	r1, r3
  40 0012 8180     		strh	r1, [r0, #4]
 179:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*reset Write protocol error in NVMSTATUS*/
 180:../Dave/Generated/src/FLASH003/FLASH003.c ****     SET_BIT(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_RSTVERR_Pos);
  41              		.loc 1 180 0
  42 0014 8388     		ldrh	r3, [r0, #4]
  43 0016 8022     		mov	r2, #128
  44 0018 5101     		lsl	r1, r2, #5
  45 001a 1943     		orr	r1, r3
  46 001c 8180     		strh	r1, [r0, #4]
 181:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 182:../Dave/Generated/src/FLASH003/FLASH003.c **** 	#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 183:../Dave/Generated/src/FLASH003/FLASH003.c **** 	FLASH003_RegisterCallbackEvent(FLASH003_FLCMPLTI,FLASH003_SEQ_EVENT,0);
 184:../Dave/Generated/src/FLASH003/FLASH003.c **** 	NVIC_SR001_RegisterCallback(NVIC_SR001_FLCMPLTI,FLASH003_lSeqInterrupt,0U);
 185:../Dave/Generated/src/FLASH003/FLASH003.c **** 	#endif
 186:../Dave/Generated/src/FLASH003/FLASH003.c ****     #if (FLASH003_ECC_INTERRUPT == FLASH003_INTR_ENABLED)
 187:../Dave/Generated/src/FLASH003/FLASH003.c **** 	FLASH003_RegisterCallbackEvent(FLASH003_FLECC2I,FLASH003_ECC_EVENT,0);
 188:../Dave/Generated/src/FLASH003/FLASH003.c **** 	NVIC_SR001_RegisterCallback(NVIC_SR001_FLECC2I,FLASH003_lEccInterrupt,0U);
 189:../Dave/Generated/src/FLASH003/FLASH003.c **** 	#endif
 190:../Dave/Generated/src/FLASH003/FLASH003.c **** 	
 191:../Dave/Generated/src/FLASH003/FLASH003.c **** }
  47              		.loc 1 191 0
  48              		@ sp needed for prologue
  49 001e 7047     		bx	lr
  50              	.L3:
  51              		.align	2
  52              	.L2:
  53 0020 00000000 		.word	FLASH003_Handle0
  54              		.cfi_endproc
  55              	.LFE38:
  57              		.section	.text.FLASH003_ClearStatus,"ax",%progbits
  58              		.align	1
  59              		.global	FLASH003_ClearStatus
  60              		.code	16
  61              		.thumb_func
  63              	FLASH003_ClearStatus:
  64              	.LFB39:
 192:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 193:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  This function executes a 'Clear Status' Command
 194:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  A clear status command clears all error flags in the 
 195:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  flash status register. 
 196:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 197:../Dave/Generated/src/FLASH003/FLASH003.c **** void FLASH003_ClearStatus(void)
 198:../Dave/Generated/src/FLASH003/FLASH003.c **** {
  65              		.loc 1 198 0
  66              		.cfi_startproc
  67              	.LVL1:
 199:../Dave/Generated/src/FLASH003/FLASH003.c **** 	const FLASH003_HandleType* Handle;
 200:../Dave/Generated/src/FLASH003/FLASH003.c **** 	Handle = &FLASH003_Handle0;
 201:../Dave/Generated/src/FLASH003/FLASH003.c **** 	/*clear error status*/
 202:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*reset ECC2READ,ECC1READ in NVMSTATUS*/
 203:../Dave/Generated/src/FLASH003/FLASH003.c ****     SET_BIT(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_RSTECC_Pos);
  68              		.loc 1 203 0
  69 0000 064B     		ldr	r3, .L5
  70 0002 8022     		mov	r2, #128
  71 0004 D868     		ldr	r0, [r3, #12]
  72 0006 9301     		lsl	r3, r2, #6
  73 0008 8188     		ldrh	r1, [r0, #4]
 204:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*reset Write protocol error in NVMSTATUS*/
 205:../Dave/Generated/src/FLASH003/FLASH003.c ****     SET_BIT(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_RSTVERR_Pos);
  74              		.loc 1 205 0
  75 000a 8022     		mov	r2, #128
 203:../Dave/Generated/src/FLASH003/FLASH003.c ****     SET_BIT(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_RSTECC_Pos);
  76              		.loc 1 203 0
  77 000c 0B43     		orr	r3, r1
  78 000e 8380     		strh	r3, [r0, #4]
  79              		.loc 1 205 0
  80 0010 8188     		ldrh	r1, [r0, #4]
  81 0012 5301     		lsl	r3, r2, #5
  82 0014 0B43     		orr	r3, r1
  83 0016 8380     		strh	r3, [r0, #4]
 206:../Dave/Generated/src/FLASH003/FLASH003.c **** }
  84              		.loc 1 206 0
  85              		@ sp needed for prologue
  86 0018 7047     		bx	lr
  87              	.L6:
  88 001a C046     		.align	2
  89              	.L5:
  90 001c 00000000 		.word	FLASH003_Handle0
  91              		.cfi_endproc
  92              	.LFE39:
  94              		.section	.text.FLASH003_lWriteBlock,"ax",%progbits
  95              		.align	1
  96              		.global	FLASH003_lWriteBlock
  97              		.code	16
  98              		.thumb_func
 100              	FLASH003_lWriteBlock:
 101              	.LFB42:
 207:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 208:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  The function programs one Block of the Flash using
 209:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  WriteBlock command
 210:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 211:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_WriteBlock (uint32_t Address, const uint32_t pBuf[])
 212:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 213:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003Status_Type status;
 214:../Dave/Generated/src/FLASH003/FLASH003.c **** 	const FLASH003_HandleType* Handle;
 215:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd1;
 216:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd2;
 217:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd3;
 218:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 219:../Dave/Generated/src/FLASH003/FLASH003.c ****     #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 220:../Dave/Generated/src/FLASH003/FLASH003.c ****       FLASH003_DynamicHandleType* DynamicHandle;
 221:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle = &FLASH003_DynamicHandle0;
 222:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*no of blocks will be only one,so while interrupt is called user handler 
 223:../Dave/Generated/src/FLASH003/FLASH003.c ****         has to be called at first time itself*/
 224:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle->FLASH003_Blk_Cnt = 0U;
 225:../Dave/Generated/src/FLASH003/FLASH003.c ****       if(DynamicHandle->FLASH003_global_status != FLASH003_IDLE)
 226:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 227:../Dave/Generated/src/FLASH003/FLASH003.c ****         DynamicHandle->FLASH003_global_status = FLASH003_ERROR;
 228:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 229:../Dave/Generated/src/FLASH003/FLASH003.c ****       else
 230:../Dave/Generated/src/FLASH003/FLASH003.c ****     #endif
 231:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 232:../Dave/Generated/src/FLASH003/FLASH003.c ****     #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 233:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle->FLASH003_global_status = FLASH003_IN_PROGRESS;
 234:../Dave/Generated/src/FLASH003/FLASH003.c ****     #endif
 235:../Dave/Generated/src/FLASH003/FLASH003.c ****       Handle = &FLASH003_Handle0;
 236:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_IN_PROGRESS;
 237:../Dave/Generated/src/FLASH003/FLASH003.c ****       
 238:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 239:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMPROG_ACTION_Pos);
 240:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 241:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMSTATUS_BUSY_Pos);
 242:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 243:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                           NVM_NVMSTATUS_SLEEP_Pos);
 244:../Dave/Generated/src/FLASH003/FLASH003.c ****      /* <<<DD_FLASH003_API_3>>> */
 245:../Dave/Generated/src/FLASH003/FLASH003.c ****      /*validate the Address for Range and Block Alignment*/
 246:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 247:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                  || ((Address & FLASH003_BLOCK_ALIGN_CHECK) != 0U))
 248:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 249:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_INVALID_ADDRESS;
 250:../Dave/Generated/src/FLASH003/FLASH003.c **** 		#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 251:../Dave/Generated/src/FLASH003/FLASH003.c ****             DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 252:../Dave/Generated/src/FLASH003/FLASH003.c ****         #endif
 253:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 254:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*Checking for the status of Flash for Idle and Sleep Mode*/
 255:../Dave/Generated/src/FLASH003/FLASH003.c ****       else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 256:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                         (rd3 == FLASH003_RESET))
 257:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 258:../Dave/Generated/src/FLASH003/FLASH003.c ****         /*Calling Write Block API*/
 259:../Dave/Generated/src/FLASH003/FLASH003.c ****         FLASH003_lWriteBlock (Address, pBuf);
 260:../Dave/Generated/src/FLASH003/FLASH003.c ****         /*Checking for verification flag for any writing errors*/
 261:../Dave/Generated/src/FLASH003/FLASH003.c ****         if(RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_VERR_Msk,\
 262:../Dave/Generated/src/FLASH003/FLASH003.c ****         		                      NVM_NVMSTATUS_VERR_Pos) == FLASH003_RESET)
 263:../Dave/Generated/src/FLASH003/FLASH003.c ****         {
 264:../Dave/Generated/src/FLASH003/FLASH003.c ****           status = FLASH003_COMPLETE;
 265:../Dave/Generated/src/FLASH003/FLASH003.c ****         }
 266:../Dave/Generated/src/FLASH003/FLASH003.c ****         else
 267:../Dave/Generated/src/FLASH003/FLASH003.c ****         {
 268:../Dave/Generated/src/FLASH003/FLASH003.c ****           status = FLASH003_ERROR;
 269:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  /* need to be checked whether required or not*/
 270:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 271:../Dave/Generated/src/FLASH003/FLASH003.c ****              DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 272:../Dave/Generated/src/FLASH003/FLASH003.c ****           #endif
 273:../Dave/Generated/src/FLASH003/FLASH003.c ****         }
 274:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 275:../Dave/Generated/src/FLASH003/FLASH003.c ****       else
 276:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 277:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_ERROR;
 278:../Dave/Generated/src/FLASH003/FLASH003.c **** 		#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 279:../Dave/Generated/src/FLASH003/FLASH003.c ****             DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 280:../Dave/Generated/src/FLASH003/FLASH003.c ****         #endif
 281:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 282:../Dave/Generated/src/FLASH003/FLASH003.c ****    }
 283:../Dave/Generated/src/FLASH003/FLASH003.c ****     return (uint32_t)status;
 284:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 285:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 286:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 287:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  The function programs Multiple No_of_Blocks of the Flash using
 288:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  WriteMultipleBlocks command
 289:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 290:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_WriteMultipleBlocks(uint32_t Address,const uint32_t pBuf[],\
 291:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                           uint32_t No_of_Blocks)
 292:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 293:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003Status_Type status;
 294:../Dave/Generated/src/FLASH003/FLASH003.c **** 	const FLASH003_HandleType* Handle;
 295:../Dave/Generated/src/FLASH003/FLASH003.c **** 	
 296:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t lBlk_Cnt;
 297:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t lAddress;
 298:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd1;
 299:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd2;
 300:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd3;
 301:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*This is to check weather the last byte of data is crossing the max limit
 302:../Dave/Generated/src/FLASH003/FLASH003.c ****      *of the flash or not.
 303:../Dave/Generated/src/FLASH003/FLASH003.c ****      */
 304:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t final_blk_end_add;
 305:../Dave/Generated/src/FLASH003/FLASH003.c ****     
 306:../Dave/Generated/src/FLASH003/FLASH003.c ****     #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 307:../Dave/Generated/src/FLASH003/FLASH003.c ****       FLASH003_DynamicHandleType* DynamicHandle;
 308:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle = &FLASH003_DynamicHandle0;
 309:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle->FLASH003_Blk_Cnt = No_of_Blocks;
 310:../Dave/Generated/src/FLASH003/FLASH003.c ****       if(DynamicHandle->FLASH003_global_status != FLASH003_IDLE)
 311:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 312:../Dave/Generated/src/FLASH003/FLASH003.c ****         DynamicHandle->FLASH003_global_status = FLASH003_ERROR;
 313:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 314:../Dave/Generated/src/FLASH003/FLASH003.c ****       else
 315:../Dave/Generated/src/FLASH003/FLASH003.c ****     #endif
 316:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 317:../Dave/Generated/src/FLASH003/FLASH003.c ****     #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 318:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle->FLASH003_global_status = FLASH003_IN_PROGRESS;
 319:../Dave/Generated/src/FLASH003/FLASH003.c ****     #endif
 320:../Dave/Generated/src/FLASH003/FLASH003.c ****       Handle = &FLASH003_Handle0;
 321:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_IN_PROGRESS;
 322:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*calculation of the last byte address*/
 323:../Dave/Generated/src/FLASH003/FLASH003.c ****       final_blk_end_add = (uint32_t)((uint32_t)Address + \
 324:../Dave/Generated/src/FLASH003/FLASH003.c ****                     (uint32_t)(No_of_Blocks*FLASH003_BLOCK_SIZE)) - 1U;
 325:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 326:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMPROG_ACTION_Pos);
 327:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 328:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMSTATUS_BUSY_Pos);
 329:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 330:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                           NVM_NVMSTATUS_SLEEP_Pos);
 331:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*validate the Address for Range and Block Alignment*/
 332:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 333:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                  || (final_blk_end_add > Handle->kEnd_Address) || \
 334:../Dave/Generated/src/FLASH003/FLASH003.c ****                                  ((Address & FLASH003_BLOCK_ALIGN_CHECK) != 0U))
 335:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 336:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_INVALID_ADDRESS;
 337:../Dave/Generated/src/FLASH003/FLASH003.c **** 		#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 338:../Dave/Generated/src/FLASH003/FLASH003.c ****             DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 339:../Dave/Generated/src/FLASH003/FLASH003.c ****         #endif
 340:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 341:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*Checking for the status of Flash for Idle and Sleep Mode*/
 342:../Dave/Generated/src/FLASH003/FLASH003.c ****       else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 343:../Dave/Generated/src/FLASH003/FLASH003.c ****              (rd3 == FLASH003_RESET))
 344:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 345:../Dave/Generated/src/FLASH003/FLASH003.c ****         for(lBlk_Cnt = 0U;lBlk_Cnt < (uint32_t)No_of_Blocks;lBlk_Cnt++)
 346:../Dave/Generated/src/FLASH003/FLASH003.c ****         {
 347:../Dave/Generated/src/FLASH003/FLASH003.c ****           /*Updating the Address for each Block*/
 348:../Dave/Generated/src/FLASH003/FLASH003.c ****           lAddress = Address+(FLASH003_BLOCK_SIZE*lBlk_Cnt);
 349:../Dave/Generated/src/FLASH003/FLASH003.c ****           /*Calling Write Block API*/
 350:../Dave/Generated/src/FLASH003/FLASH003.c ****           FLASH003_lWriteBlock (lAddress, pBuf+(FLASH003_WORD_SIZE*lBlk_Cnt));
 351:../Dave/Generated/src/FLASH003/FLASH003.c ****           /*Checking for verification flag for any writing errors*/
 352:../Dave/Generated/src/FLASH003/FLASH003.c ****           if(RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_VERR_Msk,\
 353:../Dave/Generated/src/FLASH003/FLASH003.c ****         		                      NVM_NVMSTATUS_VERR_Pos) == FLASH003_RESET)
 354:../Dave/Generated/src/FLASH003/FLASH003.c ****           {
 355:../Dave/Generated/src/FLASH003/FLASH003.c ****             status = FLASH003_COMPLETE;
 356:../Dave/Generated/src/FLASH003/FLASH003.c ****           }
 357:../Dave/Generated/src/FLASH003/FLASH003.c ****           else
 358:../Dave/Generated/src/FLASH003/FLASH003.c ****           {
 359:../Dave/Generated/src/FLASH003/FLASH003.c ****             status = FLASH003_ERROR;
 360:../Dave/Generated/src/FLASH003/FLASH003.c **** 			#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 361:../Dave/Generated/src/FLASH003/FLASH003.c ****                 DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 362:../Dave/Generated/src/FLASH003/FLASH003.c ****             #endif
 363:../Dave/Generated/src/FLASH003/FLASH003.c ****             break;
 364:../Dave/Generated/src/FLASH003/FLASH003.c ****           }
 365:../Dave/Generated/src/FLASH003/FLASH003.c ****         }
 366:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 367:../Dave/Generated/src/FLASH003/FLASH003.c ****       else
 368:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 369:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_ERROR;
 370:../Dave/Generated/src/FLASH003/FLASH003.c **** 		#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 371:../Dave/Generated/src/FLASH003/FLASH003.c ****             DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 372:../Dave/Generated/src/FLASH003/FLASH003.c ****         #endif
 373:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 374:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 375:../Dave/Generated/src/FLASH003/FLASH003.c ****     return (uint32_t)status;
 376:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 377:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 378:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  The function is local to Flash app 
 379:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  used to write the block of data
 380:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 381:../Dave/Generated/src/FLASH003/FLASH003.c **** void FLASH003_lWriteBlock (uint32_t Address, const uint32_t pBuf[])
 382:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 102              		.loc 1 382 0
 103              		.cfi_startproc
 104              	.LVL2:
 105 0000 10B5     		push	{r4, lr}
 106              	.LCFI0:
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 4, -8
 109              		.cfi_offset 14, -4
 383:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t lWord_Cnt;
 384:../Dave/Generated/src/FLASH003/FLASH003.c ****     const FLASH003_HandleType* Handle;
 385:../Dave/Generated/src/FLASH003/FLASH003.c **** 	Handle = &FLASH003_Handle0;
 386:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*updating the ACTION with Oneshot Write and Auto Verify*/
 387:../Dave/Generated/src/FLASH003/FLASH003.c ****     WR_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 110              		.loc 1 387 0
 111 0002 0E4B     		ldr	r3, .L16
 112 0004 FF24     		mov	r4, #255
 113 0006 DA68     		ldr	r2, [r3, #12]
 114 0008 9388     		ldrh	r3, [r2, #4]
 115 000a A343     		bic	r3, r4
 116 000c 5124     		mov	r4, #81
 117 000e 2343     		orr	r3, r4
 118 0010 9380     		strh	r3, [r2, #4]
 119              	.LVL3:
 120 0012 0023     		mov	r3, #0
 121              	.LVL4:
 122              	.L8:
 388:../Dave/Generated/src/FLASH003/FLASH003.c ****     		          NVM_NVMPROG_ACTION_Pos,FLASH003_ONESHOT_WRITE_AUTOVERIFY);
 389:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*Writing a Block of Data*/
 390:../Dave/Generated/src/FLASH003/FLASH003.c ****     for(lWord_Cnt = 0U;lWord_Cnt < FLASH003_WORD_SIZE;lWord_Cnt++)
 391:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 392:../Dave/Generated/src/FLASH003/FLASH003.c ****       *((uint32_t *) (Address + (FLASH003_WORD_SIZE * lWord_Cnt) )) = \
 123              		.loc 1 392 0 discriminator 2
 124 0014 CC58     		ldr	r4, [r1, r3]
 125 0016 1C50     		str	r4, [r3, r0]
 126 0018 0433     		add	r3, r3, #4
 390:../Dave/Generated/src/FLASH003/FLASH003.c ****     for(lWord_Cnt = 0U;lWord_Cnt < FLASH003_WORD_SIZE;lWord_Cnt++)
 127              		.loc 1 390 0 discriminator 2
 128 001a 102B     		cmp	r3, #16
 129 001c FAD1     		bne	.L8
 130              	.LVL5:
 131              	.L11:
 393:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                                 pBuf[lWord_Cnt];
 394:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 395:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 396:../Dave/Generated/src/FLASH003/FLASH003.c ****     #if (FLASH003_SEQ_INTERRUPT != FLASH003_INTR_ENABLED)
 397:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*Polling Busy Flag until Idle State*/
 398:../Dave/Generated/src/FLASH003/FLASH003.c ****     while(RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 132              		.loc 1 398 0
 133 001e 1088     		ldrh	r0, [r2]
 134 0020 C107     		lsl	r1, r0, #31
 135 0022 FCD4     		bmi	.L11
 399:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                          NVM_NVMSTATUS_BUSY_Pos) != FLASH003_RESET)
 400:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 401:../Dave/Generated/src/FLASH003/FLASH003.c ****       ;
 402:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 403:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*Wait for 10us to complete the verification(need to check)*/
 404:../Dave/Generated/src/FLASH003/FLASH003.c ****     WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,\
 136              		.loc 1 404 0
 137 0024 064B     		ldr	r3, .L16+4
 138 0026 074A     		ldr	r2, .L16+8
 139 0028 1968     		ldr	r1, [r3]
 140 002a 074C     		ldr	r4, .L16+12
 141 002c 0A40     		and	r2, r1
 142 002e 2243     		orr	r2, r4
 143 0030 1A60     		str	r2, [r3]
 144              	.L10:
 405:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                             FLASH003_DELAY);
 406:../Dave/Generated/src/FLASH003/FLASH003.c ****     while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 145              		.loc 1 406 0 discriminator 1
 146 0032 1868     		ldr	r0, [r3]
 147 0034 4400     		lsl	r4, r0, #1
 148 0036 FCD4     		bmi	.L10
 407:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 408:../Dave/Generated/src/FLASH003/FLASH003.c ****       ;
 409:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 410:../Dave/Generated/src/FLASH003/FLASH003.c ****     #endif
 411:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 149              		.loc 1 411 0
 150              		@ sp needed for prologue
 151 0038 10BD     		pop	{r4, pc}
 152              	.L17:
 153 003a C046     		.align	2
 154              	.L16:
 155 003c 00000000 		.word	FLASH003_Handle0
 156 0040 00030140 		.word	1073808128
 157 0044 FFFF0FC0 		.word	-1072693249
 158 0048 0000A02A 		.word	715128832
 159              		.cfi_endproc
 160              	.LFE42:
 162              		.section	.text.FLASH003_WriteMultipleBlocks,"ax",%progbits
 163              		.align	1
 164              		.global	FLASH003_WriteMultipleBlocks
 165              		.code	16
 166              		.thumb_func
 168              	FLASH003_WriteMultipleBlocks:
 169              	.LFB41:
 292:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 170              		.loc 1 292 0
 171              		.cfi_startproc
 172              	.LVL6:
 173 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 174              	.LCFI1:
 175              		.cfi_def_cfa_offset 20
 176              		.cfi_offset 4, -20
 177              		.cfi_offset 5, -16
 178              		.cfi_offset 6, -12
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 325:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 181              		.loc 1 325 0
 182 0002 1B4B     		ldr	r3, .L28
 292:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 183              		.loc 1 292 0
 184 0004 041C     		mov	r4, r0
 325:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 185              		.loc 1 325 0
 186 0006 D868     		ldr	r0, [r3, #12]
 187              	.LVL7:
 292:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 188              		.loc 1 292 0
 189 0008 85B0     		sub	sp, sp, #20
 190              	.LCFI2:
 191              		.cfi_def_cfa_offset 40
 325:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 192              		.loc 1 325 0
 193 000a 0190     		str	r0, [sp, #4]
 292:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 194              		.loc 1 292 0
 195 000c 0291     		str	r1, [sp, #8]
 196 000e 171C     		mov	r7, r2
 197              	.LVL8:
 332:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 198              		.loc 1 332 0
 199 0010 5D68     		ldr	r5, [r3, #4]
 325:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 200              		.loc 1 325 0
 201 0012 8288     		ldrh	r2, [r0, #4]
 202              	.LVL9:
 327:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 203              		.loc 1 327 0
 204 0014 0688     		ldrh	r6, [r0]
 205              	.LVL10:
 329:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 206              		.loc 1 329 0
 207 0016 0188     		ldrh	r1, [r0]
 208              	.LVL11:
 336:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_INVALID_ADDRESS;
 209              		.loc 1 336 0
 210 0018 0120     		mov	r0, #1
 329:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 211              		.loc 1 329 0
 212 001a 8C46     		mov	ip, r1
 213              	.LVL12:
 332:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 214              		.loc 1 332 0
 215 001c AC42     		cmp	r4, r5
 216 001e 25D3     		bcc	.L19
 332:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 217              		.loc 1 332 0 is_stmt 0 discriminator 1
 218 0020 9B68     		ldr	r3, [r3, #8]
 219 0022 9C42     		cmp	r4, r3
 220 0024 22D8     		bhi	.L19
 323:../Dave/Generated/src/FLASH003/FLASH003.c ****       final_blk_end_add = (uint32_t)((uint32_t)Address + \
 221              		.loc 1 323 0 is_stmt 1
 222 0026 651E     		sub	r5, r4, #1
 223              	.LVL13:
 324:../Dave/Generated/src/FLASH003/FLASH003.c ****                     (uint32_t)(No_of_Blocks*FLASH003_BLOCK_SIZE)) - 1U;
 224              		.loc 1 324 0
 225 0028 3901     		lsl	r1, r7, #4
 226              	.LVL14:
 323:../Dave/Generated/src/FLASH003/FLASH003.c ****       final_blk_end_add = (uint32_t)((uint32_t)Address + \
 227              		.loc 1 323 0
 228 002a 6D18     		add	r5, r5, r1
 229              	.LVL15:
 333:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                  || (final_blk_end_add > Handle->kEnd_Address) || \
 230              		.loc 1 333 0
 231 002c 9D42     		cmp	r5, r3
 232 002e 1DD8     		bhi	.L19
 333:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                  || (final_blk_end_add > Handle->kEnd_Address) || \
 233              		.loc 1 333 0 is_stmt 0 discriminator 1
 234 0030 2307     		lsl	r3, r4, #28
 235 0032 1BD1     		bne	.L19
 327:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 236              		.loc 1 327 0 is_stmt 1
 237 0034 0640     		and	r6, r0
 238              	.LVL16:
 325:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 239              		.loc 1 325 0
 240 0036 D0B2     		uxtb	r0, r2
 329:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 241              		.loc 1 329 0
 242 0038 6246     		mov	r2, ip
 243              	.LVL17:
 244 003a 9307     		lsl	r3, r2, #30
 342:../Dave/Generated/src/FLASH003/FLASH003.c ****       else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 245              		.loc 1 342 0
 246 003c 0643     		orr	r6, r0
 329:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 247              		.loc 1 329 0
 248 003e D90F     		lsr	r1, r3, #31
 249              	.LVL18:
 342:../Dave/Generated/src/FLASH003/FLASH003.c ****       else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 250              		.loc 1 342 0
 251 0040 0E43     		orr	r6, r1
 252 0042 01D0     		beq	.L27
 253              	.LVL19:
 254              	.L21:
 369:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_ERROR;
 255              		.loc 1 369 0
 256 0044 0220     		mov	r0, #2
 257 0046 11E0     		b	.L19
 258              	.LVL20:
 259              	.L27:
 342:../Dave/Generated/src/FLASH003/FLASH003.c ****       else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 260              		.loc 1 342 0
 261 0048 251C     		mov	r5, r4
 262 004a 0320     		mov	r0, #3
 263              	.LVL21:
 264              	.L20:
 345:../Dave/Generated/src/FLASH003/FLASH003.c ****         for(lBlk_Cnt = 0U;lBlk_Cnt < (uint32_t)No_of_Blocks;lBlk_Cnt++)
 265              		.loc 1 345 0 discriminator 1
 266 004c BE42     		cmp	r6, r7
 267 004e 0DD0     		beq	.L19
 268              	.L22:
 269              	.LVL22:
 290:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_WriteMultipleBlocks(uint32_t Address,const uint32_t pBuf[],\
 270              		.loc 1 290 0
 271 0050 0298     		ldr	r0, [sp, #8]
 272 0052 021B     		sub	r2, r0, r4
 273 0054 5119     		add	r1, r2, r5
 350:../Dave/Generated/src/FLASH003/FLASH003.c ****           FLASH003_lWriteBlock (lAddress, pBuf+(FLASH003_WORD_SIZE*lBlk_Cnt));
 274              		.loc 1 350 0
 275 0056 281C     		mov	r0, r5
 276 0058 FFF7FEFF 		bl	FLASH003_lWriteBlock
 277              	.LVL23:
 352:../Dave/Generated/src/FLASH003/FLASH003.c ****           if(RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_VERR_Msk,\
 278              		.loc 1 352 0
 279 005c 019B     		ldr	r3, [sp, #4]
 280 005e 1035     		add	r5, r5, #16
 281              	.LVL24:
 282 0060 1988     		ldrh	r1, [r3]
 283 0062 0807     		lsl	r0, r1, #28
 284 0064 800F     		lsr	r0, r0, #30
 285 0066 EDD1     		bne	.L21
 286              	.LVL25:
 345:../Dave/Generated/src/FLASH003/FLASH003.c ****         for(lBlk_Cnt = 0U;lBlk_Cnt < (uint32_t)No_of_Blocks;lBlk_Cnt++)
 287              		.loc 1 345 0
 288 0068 0136     		add	r6, r6, #1
 289              	.LVL26:
 290 006a EFE7     		b	.L20
 291              	.LVL27:
 292              	.L19:
 376:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 293              		.loc 1 376 0
 294 006c 05B0     		add	sp, sp, #20
 295              		@ sp needed for prologue
 296              	.LVL28:
 297              	.LVL29:
 298 006e F0BD     		pop	{r4, r5, r6, r7, pc}
 299              	.L29:
 300              		.align	2
 301              	.L28:
 302 0070 00000000 		.word	FLASH003_Handle0
 303              		.cfi_endproc
 304              	.LFE41:
 306              		.section	.text.FLASH003_WriteBlock,"ax",%progbits
 307              		.align	1
 308              		.global	FLASH003_WriteBlock
 309              		.code	16
 310              		.thumb_func
 312              	FLASH003_WriteBlock:
 313              	.LFB40:
 212:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 314              		.loc 1 212 0
 315              		.cfi_startproc
 316              	.LVL30:
 317 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 318              	.LCFI3:
 319              		.cfi_def_cfa_offset 32
 320              		.cfi_offset 0, -32
 321              		.cfi_offset 1, -28
 322              		.cfi_offset 2, -24
 323              		.cfi_offset 4, -20
 324              		.cfi_offset 5, -16
 325              		.cfi_offset 6, -12
 326              		.cfi_offset 7, -8
 327              		.cfi_offset 14, -4
 238:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 328              		.loc 1 238 0
 329 0002 124A     		ldr	r2, .L37
 330 0004 D468     		ldr	r4, [r2, #12]
 246:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 331              		.loc 1 246 0
 332 0006 5368     		ldr	r3, [r2, #4]
 238:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 333              		.loc 1 238 0
 334 0008 0094     		str	r4, [sp]
 335 000a A688     		ldrh	r6, [r4, #4]
 336              	.LVL31:
 240:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 337              		.loc 1 240 0
 338 000c 2788     		ldrh	r7, [r4]
 339              	.LVL32:
 242:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 340              		.loc 1 242 0
 341 000e 2588     		ldrh	r5, [r4]
 342              	.LVL33:
 246:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 343              		.loc 1 246 0
 344 0010 0193     		str	r3, [sp, #4]
 345 0012 019C     		ldr	r4, [sp, #4]
 249:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_INVALID_ADDRESS;
 346              		.loc 1 249 0
 347 0014 0123     		mov	r3, #1
 246:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 348              		.loc 1 246 0
 349 0016 A042     		cmp	r0, r4
 350 0018 15D3     		bcc	.L31
 246:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 351              		.loc 1 246 0 is_stmt 0 discriminator 1
 352 001a 9268     		ldr	r2, [r2, #8]
 353 001c 9042     		cmp	r0, r2
 354 001e 12D8     		bhi	.L31
 247:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                  || ((Address & FLASH003_BLOCK_ALIGN_CHECK) != 0U))
 355              		.loc 1 247 0 is_stmt 1
 356 0020 0207     		lsl	r2, r0, #28
 357 0022 10D1     		bne	.L31
 240:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 358              		.loc 1 240 0
 359 0024 1F40     		and	r7, r3
 360              	.LVL34:
 242:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 361              		.loc 1 242 0
 362 0026 0223     		mov	r3, #2
 238:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 363              		.loc 1 238 0
 364 0028 F6B2     		uxtb	r6, r6
 365              	.LVL35:
 242:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 366              		.loc 1 242 0
 367 002a 1D40     		and	r5, r3
 368              	.LVL36:
 255:../Dave/Generated/src/FLASH003/FLASH003.c ****       else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 369              		.loc 1 255 0
 370 002c 3743     		orr	r7, r6
 242:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 371              		.loc 1 242 0
 372 002e 6D08     		lsr	r5, r5, #1
 255:../Dave/Generated/src/FLASH003/FLASH003.c ****       else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 373              		.loc 1 255 0
 374 0030 2F43     		orr	r7, r5
 375 0032 08D1     		bne	.L31
 259:../Dave/Generated/src/FLASH003/FLASH003.c ****         FLASH003_lWriteBlock (Address, pBuf);
 376              		.loc 1 259 0
 377 0034 FFF7FEFF 		bl	FLASH003_lWriteBlock
 378              	.LVL37:
 261:../Dave/Generated/src/FLASH003/FLASH003.c ****         if(RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_VERR_Msk,\
 379              		.loc 1 261 0
 380 0038 0098     		ldr	r0, [sp]
 381 003a 0188     		ldrh	r1, [r0]
 382 003c 0B07     		lsl	r3, r1, #28
 383 003e 9C0F     		lsr	r4, r3, #30
 264:../Dave/Generated/src/FLASH003/FLASH003.c ****           status = FLASH003_COMPLETE;
 384              		.loc 1 264 0
 385 0040 621E     		sub	r2, r4, #1
 386 0042 9441     		sbc	r4, r4, r2
 387 0044 6300     		lsl	r3, r4, #1
 388              	.L31:
 389              	.LVL38:
 284:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 390              		.loc 1 284 0
 391 0046 181C     		mov	r0, r3
 392              		@ sp needed for prologue
 393 0048 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 394              	.L38:
 395 004a C046     		.align	2
 396              	.L37:
 397 004c 00000000 		.word	FLASH003_Handle0
 398              		.cfi_endproc
 399              	.LFE40:
 401              		.section	.text.FLASH003_ErasePage,"ax",%progbits
 402              		.align	1
 403              		.global	FLASH003_ErasePage
 404              		.code	16
 405              		.thumb_func
 407              	FLASH003_ErasePage:
 408              	.LFB43:
 412:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 413:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  The function uses the ROM api to Erase 
 414:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  the one page of data
 415:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 416:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_ErasePage (uint32_t Address)
 417:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 409              		.loc 1 417 0
 410              		.cfi_startproc
 411              	.LVL39:
 418:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003Status_Type status;
 419:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003_NVM_STATUS lstatus;
 420:../Dave/Generated/src/FLASH003/FLASH003.c **** 	const FLASH003_HandleType* Handle;
 421:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 422:../Dave/Generated/src/FLASH003/FLASH003.c **** 	#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 423:../Dave/Generated/src/FLASH003/FLASH003.c ****       FLASH003_DynamicHandleType* DynamicHandle;
 424:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle = &FLASH003_DynamicHandle0;
 425:../Dave/Generated/src/FLASH003/FLASH003.c ****       if(DynamicHandle->FLASH003_global_status != FLASH003_IDLE)
 426:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 427:../Dave/Generated/src/FLASH003/FLASH003.c ****         DynamicHandle->FLASH003_global_status = FLASH003_ERROR;
 428:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 429:../Dave/Generated/src/FLASH003/FLASH003.c ****       else
 430:../Dave/Generated/src/FLASH003/FLASH003.c ****     #endif
 431:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 432:../Dave/Generated/src/FLASH003/FLASH003.c ****     #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 433:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle->FLASH003_global_status = FLASH003_IN_PROGRESS;
 434:../Dave/Generated/src/FLASH003/FLASH003.c ****     #endif
 435:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_IN_PROGRESS;
 436:../Dave/Generated/src/FLASH003/FLASH003.c ****       lstatus = FLASH003_NVM_E_FAIL;
 437:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  Handle = &FLASH003_Handle0;
 438:../Dave/Generated/src/FLASH003/FLASH003.c **** 	
 439:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*validate the Address Range*/
 440:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address))
 412              		.loc 1 440 0
 413 0000 0F4B     		ldr	r3, .L46
 417:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 414              		.loc 1 417 0
 415 0002 13B5     		push	{r0, r1, r4, lr}
 416              	.LCFI4:
 417              		.cfi_def_cfa_offset 16
 418              		.cfi_offset 0, -16
 419              		.cfi_offset 1, -12
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 422              		.loc 1 440 0
 423 0004 5A68     		ldr	r2, [r3, #4]
 441:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 442:../Dave/Generated/src/FLASH003/FLASH003.c ****       	 status = FLASH003_INVALID_ADDRESS;
 424              		.loc 1 442 0
 425 0006 0124     		mov	r4, #1
 440:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address))
 426              		.loc 1 440 0
 427 0008 9042     		cmp	r0, r2
 428 000a 17D3     		bcc	.L40
 440:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address))
 429              		.loc 1 440 0 is_stmt 0 discriminator 1
 430 000c 9968     		ldr	r1, [r3, #8]
 431 000e 8842     		cmp	r0, r1
 432 0010 14D8     		bhi	.L40
 443:../Dave/Generated/src/FLASH003/FLASH003.c ****   		 #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 444:../Dave/Generated/src/FLASH003/FLASH003.c ****   			DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 445:../Dave/Generated/src/FLASH003/FLASH003.c ****   		 #endif
 446:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 447:../Dave/Generated/src/FLASH003/FLASH003.c ****       else
 448:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 449:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  /*Calling ROM API to Erase a Page*/
 450:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  lstatus = FLASH003_NvmErasePage((uint32_t *)Address);
 433              		.loc 1 450 0 is_stmt 1
 434 0012 8023     		mov	r3, #128
 435 0014 A340     		lsl	r3, r3, r4
 436 0016 1A68     		ldr	r2, [r3]
 437 0018 9047     		blx	r2
 438              	.LVL40:
 451:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  /*Mapping different status returned by ROM Api to Standard Return*/
 452:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  if(lstatus == FLASH003_NVM_PASS)
 439              		.loc 1 452 0
 440 001a 8021     		mov	r1, #128
 441 001c 4B02     		lsl	r3, r1, #9
 442 001e 9842     		cmp	r0, r3
 443 0020 0BD0     		beq	.L45
 453:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  {
 454:../Dave/Generated/src/FLASH003/FLASH003.c **** 			status = FLASH003_COMPLETE;
 455:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  }
 456:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  else if((lstatus == FLASH003_NVM_E_FAIL) ||
 444              		.loc 1 456 0
 445 0022 084A     		ldr	r2, .L46+4
 446 0024 9042     		cmp	r0, r2
 447 0026 01D1     		bne	.L41
 448              	.L42:
 457:../Dave/Generated/src/FLASH003/FLASH003.c **** 				 (lstatus == FLASH003_NVM_E_NVM_FAIL) || \
 458:../Dave/Generated/src/FLASH003/FLASH003.c **** 				 (lstatus == FLASH003_NVM_E_VERIFY))
 459:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  {
 460:../Dave/Generated/src/FLASH003/FLASH003.c **** 			status = FLASH003_ERROR;
 449              		.loc 1 460 0
 450 0028 0224     		mov	r4, #2
 451 002a 07E0     		b	.L40
 452              	.L41:
 456:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  else if((lstatus == FLASH003_NVM_E_FAIL) ||
 453              		.loc 1 456 0 discriminator 1
 454 002c 0649     		ldr	r1, .L46+8
 455 002e 8842     		cmp	r0, r1
 456 0030 FAD0     		beq	.L42
 457:../Dave/Generated/src/FLASH003/FLASH003.c **** 				 (lstatus == FLASH003_NVM_E_NVM_FAIL) || \
 457              		.loc 1 457 0
 458 0032 064B     		ldr	r3, .L46+12
 459 0034 9842     		cmp	r0, r3
 460 0036 01D1     		bne	.L40
 461 0038 F6E7     		b	.L42
 462              	.L45:
 454:../Dave/Generated/src/FLASH003/FLASH003.c **** 			status = FLASH003_COMPLETE;
 463              		.loc 1 454 0
 464 003a 0024     		mov	r4, #0
 465              	.LVL41:
 466              	.L40:
 461:../Dave/Generated/src/FLASH003/FLASH003.c **** 			#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 462:../Dave/Generated/src/FLASH003/FLASH003.c **** 				DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 463:../Dave/Generated/src/FLASH003/FLASH003.c **** 			#endif
 464:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  }
 465:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  else
 466:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  {
 467:../Dave/Generated/src/FLASH003/FLASH003.c **** 			status = FLASH003_INVALID_ADDRESS;
 468:../Dave/Generated/src/FLASH003/FLASH003.c **** 			#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 469:../Dave/Generated/src/FLASH003/FLASH003.c **** 				DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 470:../Dave/Generated/src/FLASH003/FLASH003.c **** 			#endif
 471:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  }
 472:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 473:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 474:../Dave/Generated/src/FLASH003/FLASH003.c ****     return (uint32_t)status;
 475:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 467              		.loc 1 475 0
 468 003c 201C     		mov	r0, r4
 469              		@ sp needed for prologue
 470              	.LVL42:
 471 003e 16BD     		pop	{r1, r2, r4, pc}
 472              	.L47:
 473              		.align	2
 474              	.L46:
 475 0040 00000000 		.word	FLASH003_Handle0
 476 0044 01000180 		.word	-2147418111
 477 0048 05000180 		.word	-2147418107
 478 004c 06000180 		.word	-2147418106
 479              		.cfi_endproc
 480              	.LFE43:
 482              		.section	.text.FLASH003_ProgVerifyPage,"ax",%progbits
 483              		.align	1
 484              		.global	FLASH003_ProgVerifyPage
 485              		.code	16
 486              		.thumb_func
 488              	FLASH003_ProgVerifyPage:
 489              	.LFB44:
 476:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 477:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  The function uses the ROM api to Program one Page 
 478:../Dave/Generated/src/FLASH003/FLASH003.c ****  *  which will Erase,Write and Verify
 479:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 480:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_ProgVerifyPage (uint32_t dstAddress,const uint32_t pBuf[])
 481:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 490              		.loc 1 481 0
 491              		.cfi_startproc
 492              	.LVL43:
 482:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003Status_Type status;
 483:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003_NVM_STATUS lstatus;
 484:../Dave/Generated/src/FLASH003/FLASH003.c **** 	const FLASH003_HandleType* Handle;
 485:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 486:../Dave/Generated/src/FLASH003/FLASH003.c ****     #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 487:../Dave/Generated/src/FLASH003/FLASH003.c ****       FLASH003_DynamicHandleType* DynamicHandle;
 488:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle = &FLASH003_DynamicHandle0;
 489:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle->FLASH003_Blk_Cnt = FLASH003_BLOCK_SIZE;
 490:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 491:../Dave/Generated/src/FLASH003/FLASH003.c ****       if(DynamicHandle->FLASH003_global_status != FLASH003_IDLE)
 492:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 493:../Dave/Generated/src/FLASH003/FLASH003.c ****         DynamicHandle->FLASH003_global_status = FLASH003_ERROR;
 494:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 495:../Dave/Generated/src/FLASH003/FLASH003.c ****       else
 496:../Dave/Generated/src/FLASH003/FLASH003.c ****     #endif
 497:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 498:../Dave/Generated/src/FLASH003/FLASH003.c ****     #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 499:../Dave/Generated/src/FLASH003/FLASH003.c ****       DynamicHandle->FLASH003_global_status = FLASH003_IN_PROGRESS;
 500:../Dave/Generated/src/FLASH003/FLASH003.c ****     #endif
 501:../Dave/Generated/src/FLASH003/FLASH003.c ****       lstatus = FLASH003_NVM_E_FAIL;
 502:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_IN_PROGRESS;
 503:../Dave/Generated/src/FLASH003/FLASH003.c ****       Handle = &FLASH003_Handle0;
 504:../Dave/Generated/src/FLASH003/FLASH003.c ****     
 505:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*validate the Address Range*/
 506:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((dstAddress < Handle->kStart_Address) || (dstAddress > Handle->kEnd_Address))
 493              		.loc 1 506 0
 494 0000 114A     		ldr	r2, .L55
 481:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 495              		.loc 1 481 0
 496 0002 13B5     		push	{r0, r1, r4, lr}
 497              	.LCFI5:
 498              		.cfi_def_cfa_offset 16
 499              		.cfi_offset 0, -16
 500              		.cfi_offset 1, -12
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 481:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 503              		.loc 1 481 0
 504 0004 031C     		mov	r3, r0
 505              		.loc 1 506 0
 506 0006 5068     		ldr	r0, [r2, #4]
 507              	.LVL44:
 507:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 508:../Dave/Generated/src/FLASH003/FLASH003.c ****     	  status = FLASH003_INVALID_ADDRESS;
 508              		.loc 1 508 0
 509 0008 0124     		mov	r4, #1
 506:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((dstAddress < Handle->kStart_Address) || (dstAddress > Handle->kEnd_Address))
 510              		.loc 1 506 0
 511 000a 8342     		cmp	r3, r0
 512 000c 19D3     		bcc	.L49
 506:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((dstAddress < Handle->kStart_Address) || (dstAddress > Handle->kEnd_Address))
 513              		.loc 1 506 0 is_stmt 0 discriminator 1
 514 000e 9268     		ldr	r2, [r2, #8]
 515 0010 9342     		cmp	r3, r2
 516 0012 16D8     		bhi	.L49
 509:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 510:../Dave/Generated/src/FLASH003/FLASH003.c **** 			DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 511:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  #endif
 512:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 513:../Dave/Generated/src/FLASH003/FLASH003.c ****       else
 514:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 515:../Dave/Generated/src/FLASH003/FLASH003.c ****           /*Calling ROM API to Program a Page*/
 516:../Dave/Generated/src/FLASH003/FLASH003.c ****           lstatus = FLASH003_NvmProgVerifyPage((uint32_t *)pBuf ,\
 517              		.loc 1 516 0 is_stmt 1
 518 0014 8220     		mov	r0, #130
 519 0016 A040     		lsl	r0, r0, r4
 520 0018 0268     		ldr	r2, [r0]
 521 001a 081C     		mov	r0, r1
 522 001c 191C     		mov	r1, r3
 523              	.LVL45:
 524 001e 9047     		blx	r2
 525              	.LVL46:
 517:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                         (uint32_t *)dstAddress);
 518:../Dave/Generated/src/FLASH003/FLASH003.c ****           /*Mapping the status returned by ROM Api to Standard Return Defined*/
 519:../Dave/Generated/src/FLASH003/FLASH003.c ****           if(lstatus == FLASH003_NVM_PASS)
 526              		.loc 1 519 0
 527 0020 8021     		mov	r1, #128
 528 0022 4B02     		lsl	r3, r1, #9
 529 0024 9842     		cmp	r0, r3
 530 0026 0BD0     		beq	.L54
 520:../Dave/Generated/src/FLASH003/FLASH003.c ****           {
 521:../Dave/Generated/src/FLASH003/FLASH003.c ****             status = FLASH003_COMPLETE;
 522:../Dave/Generated/src/FLASH003/FLASH003.c ****           }
 523:../Dave/Generated/src/FLASH003/FLASH003.c ****           else if((lstatus == FLASH003_NVM_E_FAIL) ||\
 531              		.loc 1 523 0
 532 0028 084A     		ldr	r2, .L55+4
 533 002a 9042     		cmp	r0, r2
 534 002c 01D1     		bne	.L50
 535              	.L51:
 524:../Dave/Generated/src/FLASH003/FLASH003.c ****                   (lstatus == FLASH003_NVM_E_NVM_FAIL) || \
 525:../Dave/Generated/src/FLASH003/FLASH003.c ****                   (lstatus == FLASH003_NVM_E_VERIFY))
 526:../Dave/Generated/src/FLASH003/FLASH003.c ****           {
 527:../Dave/Generated/src/FLASH003/FLASH003.c ****             status = FLASH003_ERROR;
 536              		.loc 1 527 0
 537 002e 0224     		mov	r4, #2
 538 0030 07E0     		b	.L49
 539              	.L50:
 523:../Dave/Generated/src/FLASH003/FLASH003.c ****           else if((lstatus == FLASH003_NVM_E_FAIL) ||\
 540              		.loc 1 523 0 discriminator 1
 541 0032 0749     		ldr	r1, .L55+8
 542 0034 8842     		cmp	r0, r1
 543 0036 FAD0     		beq	.L51
 524:../Dave/Generated/src/FLASH003/FLASH003.c ****                   (lstatus == FLASH003_NVM_E_NVM_FAIL) || \
 544              		.loc 1 524 0
 545 0038 064B     		ldr	r3, .L55+12
 546 003a 9842     		cmp	r0, r3
 547 003c 01D1     		bne	.L49
 548 003e F6E7     		b	.L51
 549              	.L54:
 521:../Dave/Generated/src/FLASH003/FLASH003.c ****             status = FLASH003_COMPLETE;
 550              		.loc 1 521 0
 551 0040 0024     		mov	r4, #0
 552              	.LVL47:
 553              	.L49:
 528:../Dave/Generated/src/FLASH003/FLASH003.c ****     		#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 529:../Dave/Generated/src/FLASH003/FLASH003.c ****                 DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 530:../Dave/Generated/src/FLASH003/FLASH003.c ****             #endif
 531:../Dave/Generated/src/FLASH003/FLASH003.c ****           }
 532:../Dave/Generated/src/FLASH003/FLASH003.c ****           else
 533:../Dave/Generated/src/FLASH003/FLASH003.c ****           {
 534:../Dave/Generated/src/FLASH003/FLASH003.c ****             status = FLASH003_INVALID_ADDRESS;
 535:../Dave/Generated/src/FLASH003/FLASH003.c ****     		#if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 536:../Dave/Generated/src/FLASH003/FLASH003.c ****                 DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 537:../Dave/Generated/src/FLASH003/FLASH003.c ****             #endif
 538:../Dave/Generated/src/FLASH003/FLASH003.c ****           }
 539:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 540:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 541:../Dave/Generated/src/FLASH003/FLASH003.c ****     return (uint32_t)status;
 542:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 554              		.loc 1 542 0
 555 0042 201C     		mov	r0, r4
 556              		@ sp needed for prologue
 557              	.LVL48:
 558 0044 16BD     		pop	{r1, r2, r4, pc}
 559              	.L56:
 560 0046 C046     		.align	2
 561              	.L55:
 562 0048 00000000 		.word	FLASH003_Handle0
 563 004c 01000180 		.word	-2147418111
 564 0050 05000180 		.word	-2147418107
 565 0054 06000180 		.word	-2147418106
 566              		.cfi_endproc
 567              	.LFE44:
 569              		.section	.text.FLASH003_ReadWord,"ax",%progbits
 570              		.align	1
 571              		.global	FLASH003_ReadWord
 572              		.code	16
 573              		.thumb_func
 575              	FLASH003_ReadWord:
 576              	.LFB45:
 543:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 544:../Dave/Generated/src/FLASH003/FLASH003.c ****  * This function used to read a word
 545:../Dave/Generated/src/FLASH003/FLASH003.c ****  * from the specified address
 546:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 547:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_ReadWord(uint32_t Address,uint32_t* buf)
 548:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 577              		.loc 1 548 0
 578              		.cfi_startproc
 579              	.LVL49:
 580 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 581              	.LCFI6:
 582              		.cfi_def_cfa_offset 32
 583              		.cfi_offset 0, -32
 584              		.cfi_offset 1, -28
 585              		.cfi_offset 2, -24
 586              		.cfi_offset 4, -20
 587              		.cfi_offset 5, -16
 588              		.cfi_offset 6, -12
 589              		.cfi_offset 7, -8
 590              		.cfi_offset 14, -4
 549:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003Status_Type status;
 550:../Dave/Generated/src/FLASH003/FLASH003.c **** 	const FLASH003_HandleType* Handle;
 551:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd1;
 552:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd2;
 553:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd3;
 554:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 555:../Dave/Generated/src/FLASH003/FLASH003.c **** 	Handle = &FLASH003_Handle0;
 556:../Dave/Generated/src/FLASH003/FLASH003.c ****     status = FLASH003_IN_PROGRESS;
 557:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 591              		.loc 1 557 0
 592 0002 114C     		ldr	r4, .L63
 548:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 593              		.loc 1 548 0
 594 0004 021C     		mov	r2, r0
 595              		.loc 1 557 0
 596 0006 E368     		ldr	r3, [r4, #12]
 558:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMPROG_ACTION_Pos);
 559:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 560:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMSTATUS_BUSY_Pos);
 561:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 562:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                           NVM_NVMSTATUS_SLEEP_Pos);
 563:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*validate the Address for Range*/
 564:../Dave/Generated/src/FLASH003/FLASH003.c ****     if ((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address))
 597              		.loc 1 564 0
 598 0008 6068     		ldr	r0, [r4, #4]
 599              	.LVL50:
 557:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 600              		.loc 1 557 0
 601 000a 9E88     		ldrh	r6, [r3, #4]
 602              	.LVL51:
 559:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 603              		.loc 1 559 0
 604 000c 1F88     		ldrh	r7, [r3]
 605              	.LVL52:
 561:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 606              		.loc 1 561 0
 607 000e 1D88     		ldrh	r5, [r3]
 608              		.loc 1 564 0
 609 0010 0190     		str	r0, [sp, #4]
 561:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 610              		.loc 1 561 0
 611 0012 AC46     		mov	ip, r5
 612              	.LVL53:
 613              		.loc 1 564 0
 614 0014 019D     		ldr	r5, [sp, #4]
 615              	.LVL54:
 616 0016 0120     		mov	r0, #1
 617 0018 AA42     		cmp	r2, r5
 618 001a 14D3     		bcc	.L58
 619              		.loc 1 564 0 is_stmt 0 discriminator 1
 620 001c A468     		ldr	r4, [r4, #8]
 621 001e A242     		cmp	r2, r4
 622 0020 11D8     		bhi	.L58
 559:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 623              		.loc 1 559 0 is_stmt 1
 624 0022 0740     		and	r7, r0
 625              	.LVL55:
 561:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 626              		.loc 1 561 0
 627 0024 6546     		mov	r5, ip
 628 0026 0220     		mov	r0, #2
 557:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 629              		.loc 1 557 0
 630 0028 F6B2     		uxtb	r6, r6
 631              	.LVL56:
 561:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 632              		.loc 1 561 0
 633 002a 0540     		and	r5, r0
 565:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 566:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_INVALID_ADDRESS;
 567:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 568:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*Checking for the status of Flash for Idle and Sleep Mode*/
 569:../Dave/Generated/src/FLASH003/FLASH003.c ****     else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 634              		.loc 1 569 0
 635 002c 3743     		orr	r7, r6
 561:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 636              		.loc 1 561 0
 637 002e 6C08     		lsr	r4, r5, #1
 638              		.loc 1 569 0
 639 0030 2743     		orr	r7, r4
 640 0032 08D1     		bne	.L58
 641              	.LVL57:
 570:../Dave/Generated/src/FLASH003/FLASH003.c ****             (rd3 == FLASH003_RESET))
 571:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 572:../Dave/Generated/src/FLASH003/FLASH003.c ****       /* reads one word*/
 573:../Dave/Generated/src/FLASH003/FLASH003.c ****       *buf = *((uint32_t*)Address);
 642              		.loc 1 573 0
 643 0034 1268     		ldr	r2, [r2]
 644              	.LVL58:
 645 0036 0A60     		str	r2, [r1]
 574:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_COMPLETE;
 575:../Dave/Generated/src/FLASH003/FLASH003.c ****         
 576:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_ECC1READ_Msk,\
 646              		.loc 1 576 0
 647 0038 1988     		ldrh	r1, [r3]
 648              	.LVL59:
 577:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                        NVM_NVMSTATUS_ECC1READ_Pos);
 578:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_ECC2READ_Msk,\
 649              		.loc 1 578 0
 650 003a 1B88     		ldrh	r3, [r3]
 651              	.LVL60:
 576:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_ECC1READ_Msk,\
 652              		.loc 1 576 0
 653 003c C806     		lsl	r0, r1, #27
 654              		.loc 1 578 0
 655 003e 9F06     		lsl	r7, r3, #26
 576:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_ECC1READ_Msk,\
 656              		.loc 1 576 0
 657 0040 3843     		orr	r0, r7
 579:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                        NVM_NVMSTATUS_ECC2READ_Pos); 
 580:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*Checking for ECC error flags*/
 581:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((rd1 != FLASH003_RESET) || (rd2 != FLASH003_RESET))
 658              		.loc 1 581 0
 659 0042 C60F     		lsr	r6, r0, #31
 574:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_COMPLETE;
 660              		.loc 1 574 0
 661 0044 7000     		lsl	r0, r6, #1
 662              	.LVL61:
 663              	.L58:
 582:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 583:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_ERROR;
 584:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 585:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 586:../Dave/Generated/src/FLASH003/FLASH003.c ****     else
 587:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 588:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_ERROR;
 589:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 590:../Dave/Generated/src/FLASH003/FLASH003.c ****   return (uint32_t)status;
 591:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 664              		.loc 1 591 0
 665              		@ sp needed for prologue
 666 0046 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 667              	.L64:
 668              		.align	2
 669              	.L63:
 670 0048 00000000 		.word	FLASH003_Handle0
 671              		.cfi_endproc
 672              	.LFE45:
 674              		.section	.text.FLASH003_ReadBlock,"ax",%progbits
 675              		.align	1
 676              		.global	FLASH003_ReadBlock
 677              		.code	16
 678              		.thumb_func
 680              	FLASH003_ReadBlock:
 681              	.LFB46:
 592:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 593:../Dave/Generated/src/FLASH003/FLASH003.c ****  * This function used to read the Block 
 594:../Dave/Generated/src/FLASH003/FLASH003.c ****  * from the specified address
 595:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 596:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_ReadBlock(uint32_t Address,uint32_t buf[])
 597:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 682              		.loc 1 597 0
 683              		.cfi_startproc
 684              	.LVL62:
 685 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 686              	.LCFI7:
 687              		.cfi_def_cfa_offset 32
 688              		.cfi_offset 0, -32
 689              		.cfi_offset 1, -28
 690              		.cfi_offset 2, -24
 691              		.cfi_offset 4, -20
 692              		.cfi_offset 5, -16
 693              		.cfi_offset 6, -12
 694              		.cfi_offset 7, -8
 695              		.cfi_offset 14, -4
 598:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003Status_Type status;
 599:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t lWord_Cnt;
 600:../Dave/Generated/src/FLASH003/FLASH003.c **** 	const FLASH003_HandleType* Handle;
 601:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd1;
 602:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd2;
 603:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd3;
 604:../Dave/Generated/src/FLASH003/FLASH003.c ****     status = FLASH003_IN_PROGRESS;
 605:../Dave/Generated/src/FLASH003/FLASH003.c **** 	Handle = &FLASH003_Handle0;
 606:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 607:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 696              		.loc 1 607 0
 697 0002 164D     		ldr	r5, .L74
 597:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 698              		.loc 1 597 0
 699 0004 041C     		mov	r4, r0
 700              		.loc 1 607 0
 701 0006 EA68     		ldr	r2, [r5, #12]
 608:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMPROG_ACTION_Pos);
 609:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 610:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMSTATUS_BUSY_Pos);
 611:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 612:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                           NVM_NVMSTATUS_SLEEP_Pos);
 613:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*validate the Address for Range and Block Alignment*/
 614:../Dave/Generated/src/FLASH003/FLASH003.c ****     if ((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address) \
 702              		.loc 1 614 0
 703 0008 6868     		ldr	r0, [r5, #4]
 704              	.LVL63:
 607:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 705              		.loc 1 607 0
 706 000a 9788     		ldrh	r7, [r2, #4]
 707              	.LVL64:
 609:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 708              		.loc 1 609 0
 709 000c 1388     		ldrh	r3, [r2]
 611:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 710              		.loc 1 611 0
 711 000e 1688     		ldrh	r6, [r2]
 712              		.loc 1 614 0
 713 0010 0190     		str	r0, [sp, #4]
 609:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 714              		.loc 1 609 0
 715 0012 9C46     		mov	ip, r3
 716              	.LVL65:
 717              		.loc 1 614 0
 718 0014 019B     		ldr	r3, [sp, #4]
 719              	.LVL66:
 615:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                  || ((Address & FLASH003_BLOCK_ALIGN_CHECK) != 0U))
 616:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 617:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_INVALID_ADDRESS;
 720              		.loc 1 617 0
 721 0016 0120     		mov	r0, #1
 614:../Dave/Generated/src/FLASH003/FLASH003.c ****     if ((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address) \
 722              		.loc 1 614 0
 723 0018 9C42     		cmp	r4, r3
 724 001a 1DD3     		bcc	.L66
 614:../Dave/Generated/src/FLASH003/FLASH003.c ****     if ((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address) \
 725              		.loc 1 614 0 is_stmt 0 discriminator 1
 726 001c AD68     		ldr	r5, [r5, #8]
 727 001e 0195     		str	r5, [sp, #4]
 728 0020 AC42     		cmp	r4, r5
 729 0022 19D8     		bhi	.L66
 615:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                  || ((Address & FLASH003_BLOCK_ALIGN_CHECK) != 0U))
 730              		.loc 1 615 0 is_stmt 1
 731 0024 2307     		lsl	r3, r4, #28
 732 0026 17D1     		bne	.L66
 609:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 733              		.loc 1 609 0
 734 0028 6346     		mov	r3, ip
 735 002a 0340     		and	r3, r0
 611:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 736              		.loc 1 611 0
 737 002c 0220     		mov	r0, #2
 607:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 738              		.loc 1 607 0
 739 002e FFB2     		uxtb	r7, r7
 740              	.LVL67:
 611:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 741              		.loc 1 611 0
 742 0030 0640     		and	r6, r0
 743              	.LVL68:
 618:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 619:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*Checking for the status of Flash for Idle and Sleep Mode*/
 620:../Dave/Generated/src/FLASH003/FLASH003.c ****     else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 744              		.loc 1 620 0
 745 0032 3B43     		orr	r3, r7
 611:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 746              		.loc 1 611 0
 747 0034 7508     		lsr	r5, r6, #1
 748              		.loc 1 620 0
 749 0036 2B43     		orr	r3, r5
 750 0038 0ED1     		bne	.L66
 751              	.LVL69:
 752              	.L67:
 621:../Dave/Generated/src/FLASH003/FLASH003.c ****            (rd3 == FLASH003_RESET))
 622:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 623:../Dave/Generated/src/FLASH003/FLASH003.c ****       /* reads one Block*/  
 624:../Dave/Generated/src/FLASH003/FLASH003.c ****       for(lWord_Cnt = 0U;lWord_Cnt < (uint32_t)FLASH003_WORD_SIZE;lWord_Cnt++)
 625:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 626:../Dave/Generated/src/FLASH003/FLASH003.c ****         /* reads one word*/
 627:../Dave/Generated/src/FLASH003/FLASH003.c ****         *(buf + lWord_Cnt) = *((uint32_t*)Address + lWord_Cnt);
 753              		.loc 1 627 0 discriminator 2
 754 003a 1859     		ldr	r0, [r3, r4]
 755 003c C850     		str	r0, [r1, r3]
 756              	.LVL70:
 757 003e 0433     		add	r3, r3, #4
 624:../Dave/Generated/src/FLASH003/FLASH003.c ****       for(lWord_Cnt = 0U;lWord_Cnt < (uint32_t)FLASH003_WORD_SIZE;lWord_Cnt++)
 758              		.loc 1 624 0 discriminator 2
 759 0040 102B     		cmp	r3, #16
 760 0042 FAD1     		bne	.L67
 628:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_COMPLETE;
 629:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 630:../Dave/Generated/src/FLASH003/FLASH003.c ****       
 631:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,\
 761              		.loc 1 631 0
 762 0044 1188     		ldrh	r1, [r2]
 763              	.LVL71:
 632:../Dave/Generated/src/FLASH003/FLASH003.c ****             NVM_NVMSTATUS_ECC1READ_Msk,NVM_NVMSTATUS_ECC1READ_Pos);
 633:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,\
 764              		.loc 1 633 0
 765 0046 1488     		ldrh	r4, [r2]
 766              	.LVL72:
 631:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,\
 767              		.loc 1 631 0
 768 0048 0B40     		and	r3, r1
 769              		.loc 1 633 0
 770 004a A206     		lsl	r2, r4, #26
 631:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,\
 771              		.loc 1 631 0
 772 004c 1B09     		lsr	r3, r3, #4
 773              		.loc 1 633 0
 774 004e D70F     		lsr	r7, r2, #31
 634:../Dave/Generated/src/FLASH003/FLASH003.c ****             NVM_NVMSTATUS_ECC2READ_Msk,NVM_NVMSTATUS_ECC2READ_Pos);
 635:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*Checking for ECC error flags*/
 636:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((rd1 != FLASH003_RESET) || (rd2 != FLASH003_RESET))
 775              		.loc 1 636 0
 776 0050 1F43     		orr	r7, r3
 777 0052 7B1E     		sub	r3, r7, #1
 778 0054 9F41     		sbc	r7, r7, r3
 779 0056 7800     		lsl	r0, r7, #1
 780              	.LVL73:
 781              	.L66:
 637:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 638:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_ERROR;
 639:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 640:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 641:../Dave/Generated/src/FLASH003/FLASH003.c ****     else
 642:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 643:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_ERROR;
 644:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 645:../Dave/Generated/src/FLASH003/FLASH003.c ****   return (uint32_t)status;
 646:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 782              		.loc 1 646 0
 783              		@ sp needed for prologue
 784 0058 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 785              	.L75:
 786 005a C046     		.align	2
 787              	.L74:
 788 005c 00000000 		.word	FLASH003_Handle0
 789              		.cfi_endproc
 790              	.LFE46:
 792              		.section	.text.FLASH003_ReadBytes,"ax",%progbits
 793              		.align	1
 794              		.global	FLASH003_ReadBytes
 795              		.code	16
 796              		.thumb_func
 798              	FLASH003_ReadBytes:
 799              	.LFB47:
 647:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 648:../Dave/Generated/src/FLASH003/FLASH003.c ****  * This function used to read the No_of_bytes
 649:../Dave/Generated/src/FLASH003/FLASH003.c ****  * from the specified address
 650:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 651:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_ReadBytes(uint32_t Address, uint8_t buf[],\
 652:../Dave/Generated/src/FLASH003/FLASH003.c ****                                                         uint32_t No_of_bytes)
 653:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 800              		.loc 1 653 0
 801              		.cfi_startproc
 802              	.LVL74:
 803 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804              	.LCFI8:
 805              		.cfi_def_cfa_offset 32
 806              		.cfi_offset 0, -32
 807              		.cfi_offset 1, -28
 808              		.cfi_offset 2, -24
 809              		.cfi_offset 4, -20
 810              		.cfi_offset 5, -16
 811              		.cfi_offset 6, -12
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
 654:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003Status_Type status;
 655:../Dave/Generated/src/FLASH003/FLASH003.c **** 	const FLASH003_HandleType* Handle;
 656:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t lByte_Cnt;
 657:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd1;
 658:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd2;
 659:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t rd3;
 660:../Dave/Generated/src/FLASH003/FLASH003.c **** 	Handle = &FLASH003_Handle0;
 661:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 662:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*This is to check weather the last byte of data is crossing the max limit
 663:../Dave/Generated/src/FLASH003/FLASH003.c ****      *of the flash or not.
 664:../Dave/Generated/src/FLASH003/FLASH003.c ****      */
 665:../Dave/Generated/src/FLASH003/FLASH003.c ****     uint32_t final_add_location;
 666:../Dave/Generated/src/FLASH003/FLASH003.c ****     status = FLASH003_IN_PROGRESS;
 667:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*calculation of the last byte address*/
 668:../Dave/Generated/src/FLASH003/FLASH003.c ****     final_add_location = (uint32_t)((uint32_t)Address + \
 669:../Dave/Generated/src/FLASH003/FLASH003.c ****                                       (uint32_t)No_of_bytes) - 1U;
 670:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 671:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 814              		.loc 1 671 0
 815 0002 1A4D     		ldr	r5, .L86
 653:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 816              		.loc 1 653 0
 817 0004 031C     		mov	r3, r0
 818              	.LVL75:
 819              		.loc 1 671 0
 820 0006 EC68     		ldr	r4, [r5, #12]
 821 0008 A688     		ldrh	r6, [r4, #4]
 672:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMPROG_ACTION_Pos);
 673:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 822              		.loc 1 673 0
 823 000a 2788     		ldrh	r7, [r4]
 671:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 824              		.loc 1 671 0
 825 000c B446     		mov	ip, r6
 826              	.LVL76:
 674:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                            NVM_NVMSTATUS_BUSY_Pos);
 675:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 676:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                           NVM_NVMSTATUS_SLEEP_Pos);
 677:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*validate the Address for Range and Block Alignment*/
 678:../Dave/Generated/src/FLASH003/FLASH003.c ****     if ((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 827              		.loc 1 678 0
 828 000e 6E68     		ldr	r6, [r5, #4]
 829              	.LVL77:
 675:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 830              		.loc 1 675 0
 831 0010 2088     		ldrh	r0, [r4]
 832              	.LVL78:
 833              		.loc 1 678 0
 834 0012 0096     		str	r6, [sp]
 835 0014 009E     		ldr	r6, [sp]
 675:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 836              		.loc 1 675 0
 837 0016 0190     		str	r0, [sp, #4]
 838              	.LVL79:
 679:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                     || (final_add_location > Handle->kEnd_Address))
 680:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 681:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_INVALID_ADDRESS;
 839              		.loc 1 681 0
 840 0018 0120     		mov	r0, #1
 841              	.LVL80:
 678:../Dave/Generated/src/FLASH003/FLASH003.c ****     if ((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 842              		.loc 1 678 0
 843 001a B342     		cmp	r3, r6
 844 001c 24D3     		bcc	.L77
 678:../Dave/Generated/src/FLASH003/FLASH003.c ****     if ((Address < Handle->kStart_Address) || (Address > Handle->kEnd_Address)\
 845              		.loc 1 678 0 is_stmt 0 discriminator 1
 846 001e AD68     		ldr	r5, [r5, #8]
 847 0020 0095     		str	r5, [sp]
 848 0022 AB42     		cmp	r3, r5
 849 0024 20D8     		bhi	.L77
 668:../Dave/Generated/src/FLASH003/FLASH003.c ****     final_add_location = (uint32_t)((uint32_t)Address + \
 850              		.loc 1 668 0 is_stmt 1
 851 0026 5E1E     		sub	r6, r3, #1
 852              	.LVL81:
 853 0028 B518     		add	r5, r6, r2
 679:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                     || (final_add_location > Handle->kEnd_Address))
 854              		.loc 1 679 0
 855 002a 009E     		ldr	r6, [sp]
 856              	.LVL82:
 857 002c B542     		cmp	r5, r6
 858 002e 1BD8     		bhi	.L77
 673:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_BUSY_Msk,\
 859              		.loc 1 673 0
 860 0030 0740     		and	r7, r0
 861              	.LVL83:
 675:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 862              		.loc 1 675 0
 863 0032 019E     		ldr	r6, [sp, #4]
 671:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd1 = RD_REG(Handle->FlashRegsPtr->NVMPROG,NVM_NVMPROG_ACTION_Msk,\
 864              		.loc 1 671 0
 865 0034 6046     		mov	r0, ip
 866 0036 C5B2     		uxtb	r5, r0
 675:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 867              		.loc 1 675 0
 868 0038 0220     		mov	r0, #2
 869 003a 0640     		and	r6, r0
 682:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 683:../Dave/Generated/src/FLASH003/FLASH003.c ****     /*Checking for the status of Flash for Idle and Sleep Mode*/
 684:../Dave/Generated/src/FLASH003/FLASH003.c ****     else if((rd1 == FLASH003_RESET) && (rd2 == FLASH003_RESET) && \
 870              		.loc 1 684 0
 871 003c 2F43     		orr	r7, r5
 675:../Dave/Generated/src/FLASH003/FLASH003.c ****     rd3 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_SLEEP_Msk,\
 872              		.loc 1 675 0
 873 003e 7508     		lsr	r5, r6, #1
 874              		.loc 1 684 0
 875 0040 2F43     		orr	r7, r5
 876 0042 11D1     		bne	.L77
 651:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_ReadBytes(uint32_t Address, uint8_t buf[],\
 877              		.loc 1 651 0
 878 0044 D718     		add	r7, r2, r3
 879 0046 1D1C     		mov	r5, r3
 880 0048 0320     		mov	r0, #3
 881              	.LVL84:
 882              	.L78:
 685:../Dave/Generated/src/FLASH003/FLASH003.c ****            (rd3 == FLASH003_RESET))
 686:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 687:../Dave/Generated/src/FLASH003/FLASH003.c ****       /* reads no of bytes specified*/  
 688:../Dave/Generated/src/FLASH003/FLASH003.c ****       for(lByte_Cnt = 0U;lByte_Cnt < (uint32_t)No_of_bytes;lByte_Cnt++)
 883              		.loc 1 688 0 discriminator 1
 884 004a BD42     		cmp	r5, r7
 885 004c 05D0     		beq	.L85
 886              	.L79:
 689:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 690:../Dave/Generated/src/FLASH003/FLASH003.c ****         /* reads one byte*/
 691:../Dave/Generated/src/FLASH003/FLASH003.c ****         *(buf + lByte_Cnt) = *((uint8_t*)Address + lByte_Cnt);
 887              		.loc 1 691 0 discriminator 2
 888 004e 2E78     		ldrb	r6, [r5]
 651:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_ReadBytes(uint32_t Address, uint8_t buf[],\
 889              		.loc 1 651 0 discriminator 2
 890 0050 C81A     		sub	r0, r1, r3
 891              		.loc 1 691 0 discriminator 2
 892 0052 4655     		strb	r6, [r0, r5]
 893              	.LVL85:
 894 0054 0135     		add	r5, r5, #1
 692:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_COMPLETE;
 895              		.loc 1 692 0 discriminator 2
 896 0056 0020     		mov	r0, #0
 897 0058 F7E7     		b	.L78
 898              	.LVL86:
 899              	.L85:
 693:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 694:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_ECC1READ_Msk,\
 900              		.loc 1 694 0
 901 005a 2388     		ldrh	r3, [r4]
 902              	.LVL87:
 695:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                        NVM_NVMSTATUS_ECC1READ_Pos);
 696:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd2 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_ECC2READ_Msk,\
 903              		.loc 1 696 0
 904 005c 2288     		ldrh	r2, [r4]
 905              	.LVL88:
 694:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_ECC1READ_Msk,\
 906              		.loc 1 694 0
 907 005e DC06     		lsl	r4, r3, #27
 908              		.loc 1 696 0
 909 0060 9106     		lsl	r1, r2, #26
 910              	.LVL89:
 694:../Dave/Generated/src/FLASH003/FLASH003.c ****       rd1 = RD_REG(Handle->FlashRegsPtr->NVMSTATUS,NVM_NVMSTATUS_ECC1READ_Msk,\
 911              		.loc 1 694 0
 912 0062 0C43     		orr	r4, r1
 697:../Dave/Generated/src/FLASH003/FLASH003.c ****     		                                        NVM_NVMSTATUS_ECC2READ_Pos);
 698:../Dave/Generated/src/FLASH003/FLASH003.c ****       /*Checking for ECC error flags*/
 699:../Dave/Generated/src/FLASH003/FLASH003.c ****       if((rd1 != FLASH003_RESET) || (rd2 != FLASH003_RESET))
 913              		.loc 1 699 0
 914 0064 00D5     		bpl	.L77
 700:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 701:../Dave/Generated/src/FLASH003/FLASH003.c ****         status = FLASH003_ERROR;
 915              		.loc 1 701 0
 916 0066 0220     		mov	r0, #2
 917              	.LVL90:
 918              	.L77:
 702:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 703:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 704:../Dave/Generated/src/FLASH003/FLASH003.c ****     else
 705:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 706:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_ERROR;
 707:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 708:../Dave/Generated/src/FLASH003/FLASH003.c ****   return (uint32_t)status;
 709:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 919              		.loc 1 709 0
 920              		@ sp needed for prologue
 921 0068 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 922              	.L87:
 923 006a C046     		.align	2
 924              	.L86:
 925 006c 00000000 		.word	FLASH003_Handle0
 926              		.cfi_endproc
 927              	.LFE47:
 929              		.section	.text.FLASH003_RegisterCallbackEvent,"ax",%progbits
 930              		.align	1
 931              		.global	FLASH003_RegisterCallbackEvent
 932              		.code	16
 933              		.thumb_func
 935              	FLASH003_RegisterCallbackEvent:
 936              	.LFB48:
 710:../Dave/Generated/src/FLASH003/FLASH003.c **** #if (FLASH003_SEQ_INTERRUPT == FLASH003_INTR_ENABLED)
 711:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 712:../Dave/Generated/src/FLASH003/FLASH003.c ****  * This function used to call the user defined Event handler
 713:../Dave/Generated/src/FLASH003/FLASH003.c ****  * for EndofSequence Interrupt
 714:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 715:../Dave/Generated/src/FLASH003/FLASH003.c **** void FLASH003_lSeqInterrupt(uint32_t cbargs)
 716:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 717:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  FLASH003_CallbackType FLASH003_UserCallback;
 718:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  FLASH003_DynamicHandleType* DynamicHandle = &FLASH003_DynamicHandle0;
 719:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  uint32_t CallbackArg = 0U;
 720:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  uint32_t levents = 0U;
 721:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 722:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  /* Checking for Block Count*/
 723:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  if(1U < DynamicHandle->FLASH003_Blk_Cnt)
 724:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  {
 725:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  DynamicHandle->FLASH003_Blk_Cnt--;
 726:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  }
 727:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  else
 728:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  {
 729:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  for(levents = 0; levents < DynamicHandle->\
 730:../Dave/Generated/src/FLASH003/FLASH003.c **** 		                              callback[1].FLASH003_CallBacks; levents++)
 731:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  {
 732:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  FLASH003_UserCallback = DynamicHandle->\
 733:../Dave/Generated/src/FLASH003/FLASH003.c **** 					                            callback[1].CbListener[levents];
 734:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  CallbackArg = DynamicHandle->callback[1].CbArg[levents];
 735:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  if(FLASH003_NULL_HANDLER != FLASH003_UserCallback)
 736:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  {
 737:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  FLASH003_UserCallback(CallbackArg);
 738:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  }
 739:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  }
 740:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 741:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  }
 742:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 743:../Dave/Generated/src/FLASH003/FLASH003.c **** #endif
 744:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 745:../Dave/Generated/src/FLASH003/FLASH003.c **** #if (FLASH003_ECC_INTERRUPT == FLASH003_INTR_ENABLED)
 746:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 747:../Dave/Generated/src/FLASH003/FLASH003.c ****  * This function used to call the user defined Event handler
 748:../Dave/Generated/src/FLASH003/FLASH003.c ****  * for EndofSequence Interrupt
 749:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 750:../Dave/Generated/src/FLASH003/FLASH003.c **** void FLASH003_lEccInterrupt(uint32_t cbargs)
 751:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 752:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  FLASH003_CallbackType FLASH003_UserCallback;
 753:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  FLASH003_DynamicHandleType* DynamicHandle = &FLASH003_DynamicHandle0;
 754:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  uint32_t CallbackArg = 0U;
 755:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  uint32_t levents = 0U;
 756:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 757:../Dave/Generated/src/FLASH003/FLASH003.c **** 	  for(levents = 0; levents < DynamicHandle->\
 758:../Dave/Generated/src/FLASH003/FLASH003.c **** 		                              callback[0].FLASH003_CallBacks; levents++)
 759:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  {
 760:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  FLASH003_UserCallback = DynamicHandle->\
 761:../Dave/Generated/src/FLASH003/FLASH003.c **** 					                            callback[0].CbListener[levents];
 762:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  CallbackArg = DynamicHandle->callback[0].CbArg[levents];
 763:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  if(FLASH003_NULL_HANDLER != FLASH003_UserCallback)
 764:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  {
 765:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  FLASH003_UserCallback(CallbackArg);
 766:../Dave/Generated/src/FLASH003/FLASH003.c **** 			  }
 767:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  }
 768:../Dave/Generated/src/FLASH003/FLASH003.c **** 		  DynamicHandle->FLASH003_global_status = FLASH003_IDLE;
 769:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 770:../Dave/Generated/src/FLASH003/FLASH003.c **** #endif
 771:../Dave/Generated/src/FLASH003/FLASH003.c **** /*
 772:../Dave/Generated/src/FLASH003/FLASH003.c ****  * This is utility function to register Event Handler 
 773:../Dave/Generated/src/FLASH003/FLASH003.c ****  * for a given event.
 774:../Dave/Generated/src/FLASH003/FLASH003.c ****  */
 775:../Dave/Generated/src/FLASH003/FLASH003.c **** status_t FLASH003_RegisterCallbackEvent(FLASH003_InterruptId IntID,\
 776:../Dave/Generated/src/FLASH003/FLASH003.c **** 		                     FLASH003_CallbackType userFunction,uint32_t CbArgs)
 777:../Dave/Generated/src/FLASH003/FLASH003.c **** {
 937              		.loc 1 777 0
 938              		.cfi_startproc
 939              	.LVL91:
 940 0000 30B5     		push	{r4, r5, lr}
 941              	.LCFI9:
 942              		.cfi_def_cfa_offset 12
 943              		.cfi_offset 4, -12
 944              		.cfi_offset 5, -8
 945              		.cfi_offset 14, -4
 778:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003Status_Type status;
 779:../Dave/Generated/src/FLASH003/FLASH003.c ****     FLASH003_DynamicHandleType* DynamicHandle = &FLASH003_DynamicHandle0;
 780:../Dave/Generated/src/FLASH003/FLASH003.c ****     status = FLASH003_ERROR;
 781:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 782:../Dave/Generated/src/FLASH003/FLASH003.c ****     switch(IntID)
 946              		.loc 1 782 0
 947 0002 0028     		cmp	r0, #0
 948 0004 02D0     		beq	.L90
 949 0006 0128     		cmp	r0, #1
 950 0008 1FD1     		bne	.L95
 951 000a 0EE0     		b	.L96
 952              	.L90:
 783:../Dave/Generated/src/FLASH003/FLASH003.c ****     {
 784:../Dave/Generated/src/FLASH003/FLASH003.c ****     case 0:
 785:../Dave/Generated/src/FLASH003/FLASH003.c ****       if(DynamicHandle->callback[0].FLASH003_CallBacks < FLASH003_MAX_CALLBACKS)
 953              		.loc 1 785 0
 954 000c 1048     		ldr	r0, .L97
 955              	.LVL92:
 780:../Dave/Generated/src/FLASH003/FLASH003.c ****     status = FLASH003_ERROR;
 956              		.loc 1 780 0
 957 000e 0223     		mov	r3, #2
 958              		.loc 1 785 0
 959 0010 046B     		ldr	r4, [r0, #48]
 960 0012 042C     		cmp	r4, #4
 961 0014 1AD8     		bhi	.L89
 786:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 787:../Dave/Generated/src/FLASH003/FLASH003.c ****          DynamicHandle->callback[0].CbListener[DynamicHandle->\
 788:../Dave/Generated/src/FLASH003/FLASH003.c ****                                  callback[0].FLASH003_CallBacks] = userFunction;
 962              		.loc 1 788 0
 963 0016 E318     		add	r3, r4, r3
 964 0018 9D00     		lsl	r5, r3, #2
 965 001a 2950     		str	r1, [r5, r0]
 789:../Dave/Generated/src/FLASH003/FLASH003.c ****          DynamicHandle->callback[0].CbArg[DynamicHandle->\
 790:../Dave/Generated/src/FLASH003/FLASH003.c ****                                        callback[0].FLASH003_CallBacks] = CbArgs;
 966              		.loc 1 790 0
 967 001c A11D     		add	r1, r4, #6
 968              	.LVL93:
 969 001e 8B00     		lsl	r3, r1, #2
 970 0020 C518     		add	r5, r0, r3
 971              	.LVL94:
 791:../Dave/Generated/src/FLASH003/FLASH003.c ****          DynamicHandle->callback[0].FLASH003_CallBacks++;
 972              		.loc 1 791 0
 973 0022 0134     		add	r4, r4, #1
 974              	.LVL95:
 790:../Dave/Generated/src/FLASH003/FLASH003.c ****                                        callback[0].FLASH003_CallBacks] = CbArgs;
 975              		.loc 1 790 0
 976 0024 6A60     		str	r2, [r5, #4]
 977              		.loc 1 791 0
 978 0026 0463     		str	r4, [r0, #48]
 979              	.LVL96:
 980 0028 0FE0     		b	.L95
 981              	.LVL97:
 982              	.L96:
 792:../Dave/Generated/src/FLASH003/FLASH003.c ****          status = FLASH003_COMPLETE;
 793:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 794:../Dave/Generated/src/FLASH003/FLASH003.c ****       break;
 795:../Dave/Generated/src/FLASH003/FLASH003.c ****     case 1:
 796:../Dave/Generated/src/FLASH003/FLASH003.c ****       if(DynamicHandle->callback[1].FLASH003_CallBacks < FLASH003_MAX_CALLBACKS)
 983              		.loc 1 796 0
 984 002a 0948     		ldr	r0, .L97
 985              	.LVL98:
 780:../Dave/Generated/src/FLASH003/FLASH003.c ****     status = FLASH003_ERROR;
 986              		.loc 1 780 0
 987 002c 0223     		mov	r3, #2
 988              		.loc 1 796 0
 989 002e C46D     		ldr	r4, [r0, #92]
 990 0030 042C     		cmp	r4, #4
 991 0032 0BD8     		bhi	.L89
 797:../Dave/Generated/src/FLASH003/FLASH003.c ****       {
 798:../Dave/Generated/src/FLASH003/FLASH003.c ****          DynamicHandle->callback[1].CbListener[DynamicHandle->\
 799:../Dave/Generated/src/FLASH003/FLASH003.c ****                                  callback[1].FLASH003_CallBacks] = userFunction;
 992              		.loc 1 799 0
 993 0034 231C     		mov	r3, r4
 994 0036 0D33     		add	r3, r3, #13
 995 0038 9D00     		lsl	r5, r3, #2
 996 003a 2950     		str	r1, [r5, r0]
 800:../Dave/Generated/src/FLASH003/FLASH003.c ****          DynamicHandle->callback[1].CbArg[DynamicHandle->\
 801:../Dave/Generated/src/FLASH003/FLASH003.c ****                                        callback[1].FLASH003_CallBacks] = CbArgs;
 997              		.loc 1 801 0
 998 003c 211C     		mov	r1, r4
 999              	.LVL99:
 1000 003e 1131     		add	r1, r1, #17
 1001 0040 8B00     		lsl	r3, r1, #2
 1002 0042 C518     		add	r5, r0, r3
 1003              	.LVL100:
 802:../Dave/Generated/src/FLASH003/FLASH003.c ****          DynamicHandle->callback[1].FLASH003_CallBacks++;
 1004              		.loc 1 802 0
 1005 0044 0134     		add	r4, r4, #1
 1006              	.LVL101:
 801:../Dave/Generated/src/FLASH003/FLASH003.c ****                                        callback[1].FLASH003_CallBacks] = CbArgs;
 1007              		.loc 1 801 0
 1008 0046 6A60     		str	r2, [r5, #4]
 1009              		.loc 1 802 0
 1010 0048 C465     		str	r4, [r0, #92]
 1011              	.LVL102:
 1012              	.L95:
 803:../Dave/Generated/src/FLASH003/FLASH003.c ****          status = FLASH003_COMPLETE;
 804:../Dave/Generated/src/FLASH003/FLASH003.c ****       }
 805:../Dave/Generated/src/FLASH003/FLASH003.c ****       break;
 806:../Dave/Generated/src/FLASH003/FLASH003.c ****     default:
 807:../Dave/Generated/src/FLASH003/FLASH003.c ****       status = FLASH003_COMPLETE;
 1013              		.loc 1 807 0
 1014 004a 0023     		mov	r3, #0
 1015              	.L89:
 1016              	.LVL103:
 808:../Dave/Generated/src/FLASH003/FLASH003.c ****     }
 809:../Dave/Generated/src/FLASH003/FLASH003.c **** 
 810:../Dave/Generated/src/FLASH003/FLASH003.c ****   return (uint32_t)status;
 811:../Dave/Generated/src/FLASH003/FLASH003.c **** }
 1017              		.loc 1 811 0
 1018 004c 181C     		mov	r0, r3
 1019              		@ sp needed for prologue
 1020 004e 30BD     		pop	{r4, r5, pc}
 1021              	.L98:
 1022              		.align	2
 1023              	.L97:
 1024 0050 00000000 		.word	FLASH003_DynamicHandle0
 1025              		.cfi_endproc
 1026              	.LFE48:
 1028              		.text
 1029              	.Letext0:
 1030              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1031              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1200_series/Include/XMC1200.h"
 1032              		.file 4 "C:\\Users\\tomasoat\\Userdata\\AEPrograms\\DAVE3_workspace_32_DAVE3110\\RGB_LED_Shield_v5
 1033              		.file 5 "C:\\Users\\tomasoat\\Userdata\\AEPrograms\\DAVE3_workspace_32_DAVE3110\\RGB_LED_Shield_v5
 1034              		.file 6 "C:\\Users\\tomasoat\\Userdata\\AEPrograms\\DAVE3_workspace_32_DAVE3110\\RGB_LED_Shield_v5
DEFINED SYMBOLS
                            *ABS*:00000000 FLASH003.c
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:18     .text.FLASH003_Init:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:23     .text.FLASH003_Init:00000000 FLASH003_Init
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:53     .text.FLASH003_Init:00000020 $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:58     .text.FLASH003_ClearStatus:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:63     .text.FLASH003_ClearStatus:00000000 FLASH003_ClearStatus
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:90     .text.FLASH003_ClearStatus:0000001c $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:95     .text.FLASH003_lWriteBlock:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:100    .text.FLASH003_lWriteBlock:00000000 FLASH003_lWriteBlock
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:155    .text.FLASH003_lWriteBlock:0000003c $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:163    .text.FLASH003_WriteMultipleBlocks:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:168    .text.FLASH003_WriteMultipleBlocks:00000000 FLASH003_WriteMultipleBlocks
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:302    .text.FLASH003_WriteMultipleBlocks:00000070 $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:307    .text.FLASH003_WriteBlock:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:312    .text.FLASH003_WriteBlock:00000000 FLASH003_WriteBlock
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:397    .text.FLASH003_WriteBlock:0000004c $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:402    .text.FLASH003_ErasePage:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:407    .text.FLASH003_ErasePage:00000000 FLASH003_ErasePage
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:475    .text.FLASH003_ErasePage:00000040 $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:483    .text.FLASH003_ProgVerifyPage:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:488    .text.FLASH003_ProgVerifyPage:00000000 FLASH003_ProgVerifyPage
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:562    .text.FLASH003_ProgVerifyPage:00000048 $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:570    .text.FLASH003_ReadWord:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:575    .text.FLASH003_ReadWord:00000000 FLASH003_ReadWord
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:670    .text.FLASH003_ReadWord:00000048 $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:675    .text.FLASH003_ReadBlock:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:680    .text.FLASH003_ReadBlock:00000000 FLASH003_ReadBlock
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:788    .text.FLASH003_ReadBlock:0000005c $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:793    .text.FLASH003_ReadBytes:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:798    .text.FLASH003_ReadBytes:00000000 FLASH003_ReadBytes
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:925    .text.FLASH003_ReadBytes:0000006c $d
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:930    .text.FLASH003_RegisterCallbackEvent:00000000 $t
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:935    .text.FLASH003_RegisterCallbackEvent:00000000 FLASH003_RegisterCallbackEvent
C:\Users\tomasoat\AppData\Local\Temp\ccLrmuiW.s:1024   .text.FLASH003_RegisterCallbackEvent:00000050 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e09b9dd5224853206c418479f14d6963
                           .group:00000000 wm4.XMC1200.h.45.4c899b4822ac22c0f00d6fd7f173cc96
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1200.h.122.96b58b1204def4c9f76341a4e21abaf6
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.uc_id.h.35.62dcba5f6261c1436e3866a751c1a98b
                           .group:00000000 wm4.BCCUDIM01_Conf.h.46.1e3ffd6581cbd401bcc28a6ce60f19f0
                           .group:00000000 wm4.BCCUCH01_Conf.h.48.2ce679450068d1645a9e0c3a7937e697
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP003_Conf.h.49.a3ea83c25b3af429e78acb0f2dc45bd4
                           .group:00000000 wm4.PWMSP003.h.103.903071678b9af5683776405c5b299fbb
                           .group:00000000 wm4.IO002_Conf.h.51.9fc2eb43e77e0a2c02912a3744f3ec9d
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.NVIC002_Conf.h.62.64042456dc7f2eb96fc713abacb4c5d4
                           .group:00000000 wm4.DMX512RD01_Conf.h.49.036b57ce74a404ea8f8ade310b364436
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.Usic.h.40.f6a4fed014760114cf5039d398d6dd2c
                           .group:00000000 wm4.I2C003_Conf.h.50.5fb7c255d386301836868ba2fd78b91f
                           .group:00000000 wm4.FLASH003.h.76.20bf3d34b222314a45adfdfb414ab1b6
                           .group:00000000 wm4.FLASH003_Conf.h.72.6d366060eda228c6c8843c467361c30c

UNDEFINED SYMBOLS
FLASH003_Handle0
FLASH003_DynamicHandle0
